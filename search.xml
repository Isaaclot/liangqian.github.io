<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis持久化方案</title>
      <link href="/archives/27e17559.html"/>
      <url>/archives/27e17559.html</url>
      
        <content type="html"><![CDATA[<h4 id="持久化方案有2种"><a href="#持久化方案有2种" class="headerlink" title="持久化方案有2种:"></a>持久化方案有2种:</h4><h5 id="Rdb-快照形式"><a href="#Rdb-快照形式" class="headerlink" title="Rdb: 快照形式"></a><code>Rdb</code>: 快照形式</h5><ul><li>定期把内存中当前时刻的数据保存在硬盘中，是Redis默认支持的持久化方案</li><li><code>Rdb</code>是一个半持久化模式，即按照一定的策略周期将数据保存在磁盘中，其中保存数据的文件为<code>dump.rdb</code></li><li>在Redis服务重启的时候，会执行一遍备份文件中的数据</li><li><p><code>Rdb</code>配置文件的默认配置方式如下(可见redis.conf)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1    #当有一条Keys数据被改变时，900秒刷新到Disk一次</span><br><span class="line">save 300 10   #当有10条Keys数据被改变时，300秒刷新到Disk一次</span><br><span class="line">save 60 10000 #当有10000条Keys数据被改变时，60秒刷新到Disk一次</span><br></pre></td></tr></table></figure></li><li><p>snapshot快照持久化Redis的文件持久化方式，决定了其在持久化的时候，有可能会出现数据丢失的情况，如果Redis服务器发生故障，那么故障前保存在内存中的数据可能没有命中持久化周期，可能会丢失。</p></li><li>同时Redis的RDB文件，也是主从复制内部实现的重要一环<ol><li>第一次Slave向master同步的实现：Salve向master发出请求同步的时候，master将数据dump到RDB文件中，然后将RDB文件全量传输给Slave，然后发送执行快照恢复的命令给Slave，实现初次同步</li><li>第二次以后的同步：master将变量的快照直接实时同步给Slave</li><li>只要master和Slave法师断开和重连，肯定会发生以上两个同步工序，Redis主从复制是建立在内存快照的持久化基础上的，只要有Slave就一定会有内存快照发生。</li></ol></li></ul><h5 id="AOF形式"><a href="#AOF形式" class="headerlink" title="AOF形式"></a><code>AOF</code>形式</h5><ul><li><code>AOF</code>持久化时，Redis会将每一个收到的写命令都通过<code>write</code>函数追加到文件中，类似mysql的binlog，当服务器重启当时候，会执行该持久化文件进行数据恢复</li><li><p>对应的参数配置如下(redis.conf)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes       #启用AOF持久化方式</span><br><span class="line">appendfilename appendonly.aof #AOF文件的名称，默认为appendonly.aof</span><br><span class="line"># appendfsync always #每次收到写命令就立即强制写入磁盘，是最有保证的完全的持久化，但速度也是最慢的，一般不推荐使用。</span><br><span class="line">appendfsync everysec #每秒钟强制写入磁盘一次，在性能和持久化方面做了很好的折中，是受推荐的方式。</span><br><span class="line"># appendfsync no     #完全依赖OS的写入，一般为30秒左右一次，性能最好但是持久化最没有保证，不被推荐。</span><br></pre></td></tr></table></figure></li><li><p><code>AOF</code>持久化类似于日志记录形式，每条数据的改变记录都会记录在AOF文件中，随着数据操作次数变多，AOF文件越来越臃肿，但是对于一个键值的操作，在进行数据恢复的时候，只有一条数据记录是有效的<br>为了压缩AOF文件，Redis提供bgrewriteaof命令，收到此命令的时，Redis使用与快照的方式，将内存中数据以命令的方式保存在临时文件中，最后替换原来的文件，以此控制AOF文件的增长</p></li><li><code>bgrewriteaof</code>使用配置如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">no-appendfsync-on-rewrite yes   #在日志重写时，不进行命令追加操作，而只是将其放在缓冲区里，避免与命令的追加造成DISK IO上的冲突。</span><br><span class="line">auto-aof-rewrite-percentage 100 #当前AOF文件大小是上次日志重写得到AOF文件大小的二倍时，自动启动新的日志重写过程。</span><br><span class="line">auto-aof-rewrite-min-size 64mb  #当前AOF文件启动新的日志重写过程的最小值，避免刚刚启动Reids时由于文件尺寸较小导致频繁的重写。</span><br></pre></td></tr></table></figure></li></ul><h4 id="持久化方案的选择"><a href="#持久化方案的选择" class="headerlink" title="持久化方案的选择"></a>持久化方案的选择</h4><ul><li>如果能接受数据灾难带来的前几分钟的数据丢失，推荐使用RDB持久化形式</li><li>如果考虑到完全使用AOF持久化会带来性能方面的问题，比如持久化带来阻塞等，可以使用RDB和AOF配合使用，RDB可以定期保存一份完整的快照，而AOF能保证减少数据丢失，提高数据保障性</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库锁机制分类</title>
      <link href="/archives/3eac123.html"/>
      <url>/archives/3eac123.html</url>
      
        <content type="html"><![CDATA[<h5 id="按照封锁类型分类"><a href="#按照封锁类型分类" class="headerlink" title="按照封锁类型分类"></a>按照封锁类型分类</h5><ul><li>排他锁(<code>X锁</code>)：又称为写锁；如果当前事务获得X锁，会阻塞其他事务的读与写，当前事务释放当前对象的X锁之前，其他事务不能对当前对象进行读或者写；</li><li>共享锁(<code>S锁</code>)：又称为读锁；如果当前事务获得了S锁，其他事务只能再对当前对象加S锁，而不能加X锁，保证其他事务可以读当前对象，不可用对当前对象作出更改</li></ul><h5 id="按照锁的封锁类型分类"><a href="#按照锁的封锁类型分类" class="headerlink" title="按照锁的封锁类型分类"></a>按照锁的封锁类型分类</h5><ul><li>行级锁(<code>MySql InnoDb</code>支持)<ol><li>优点：锁定粒度小(最小), 发生锁冲突的几率最低，并发度也最高；</li><li>缺点：获取锁与释放锁需要的开销比较大；会出现死锁；如果大部分数据操作涉及到<code>order by</code>或者全表扫描的情景，效率明显比其他锁要慢</li></ol></li><li>表级锁<ol><li>优点：开销小，加锁与释放锁效率高</li><li>缺点：锁定粒度大，发生锁冲突的概率高，并发度低。</li></ol></li><li>页级锁(<code>MySql</code>特有)<ol><li>优点：锁定粒度处于两个极端(行级锁与表级锁)之间；所以并发处理能力也处于上面两者之间</li><li>缺点：页级锁定和行级锁定一样，会发生死锁</li></ol></li><li>什么时候使用表级锁？<ul><li>对于InnoDB，大多数情况下都是选择使用行级锁；因为行级锁和事务支持是我们选择使用InnoDB的理由；</li><li>但是，也存在特殊情况：<ol><li>事务需要更新大部分或者全部数据，表又比较大，如果使用默认的行锁，处理每条数据都需要进行加锁和释放锁的操作，导致开销非常大，事务执行效率底下；也可能导致其他事务长时间等待或锁冲突；这种情况适合采用锁表来提高事务的执行效率；</li><li>事务操作设计到的表比较多，并且复杂，容易引起死锁，或者可能造成大量事务回滚。这样情况也可以考虑使用表锁进行数据库性能上的优化；</li></ol></li></ul></li></ul><h5 id="按照锁的使用方式划分"><a href="#按照锁的使用方式划分" class="headerlink" title="按照锁的使用方式划分"></a>按照锁的使用方式划分</h5><ul><li>悲观锁<ol><li>悲观并发锁(<code>PCC</code>)：总是假设最坏的情况，每次去操作数据的时候，都认为别人会进行修改，所以每次操作数据的时候都会上锁，这样别人想操作这个数据的时候，就会阻塞，知道锁被释放；共享资源每次只给一个线程\事务使用，其他线程阻塞，锁被释放才会转让操作权</li><li>使用场景：适用于多写情景下；避免数据冲突导致的数据不一致的问题</li></ol></li><li>乐观锁<ol><li>乐观并发锁：总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，不会加锁； 但是再更新到时候，都会判断一下在此期间别人有木有更新这个数据，这个检查的实现可以是通过版本号机制和CAS算法实现</li><li>使用场景：适用于多读情景下；数据冲突发生少，可以省去锁开销</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ消息可靠性</title>
      <link href="/archives/7ffea1fe.html"/>
      <url>/archives/7ffea1fe.html</url>
      
        <content type="html"><![CDATA[<h4 id="RabbitMQ服务器数据不丢失"><a href="#RabbitMQ服务器数据不丢失" class="headerlink" title="RabbitMQ服务器数据不丢失"></a>RabbitMQ服务器数据不丢失</h4><ul><li>在<code>RabbitMQ</code>服务器中，我们通过持久化数据，来保证服务器故障或重启之后，能够恢复数据来防治数据丢失</li><li>在定义<code>channel</code>的时候, 设置该通道的消息持久化。<h4 id="消息生产者传输到服务器不丢包"><a href="#消息生产者传输到服务器不丢包" class="headerlink" title="消息生产者传输到服务器不丢包"></a>消息生产者传输到服务器不丢包</h4></li><li>事务控制： 使用AMQP的自带的事务管理模式确保消息已经发送到RabbitMQ服务器，但是会带来更大的吞吐量，大量消息发送</li><li>使用Confirm模式确认(异步)<ol><li>将生产者<code>Channel</code>设置为<code>Confirm</code>模式，一旦<code>channel</code>进入<code>confirm</code>模式之后，所有在该信道上面发布的消息都会指派一个唯一的Id，一旦消息被投递到所匹配的队列之后，Broker就会发送一个确认给生产者，这样生产者就知道了消息已经到达目的地。</li></ol></li></ul><h4 id="确认消费者已经正常处理消息"><a href="#确认消费者已经正常处理消息" class="headerlink" title="确认消费者已经正常处理消息"></a>确认消费者已经正常处理消息</h4><ul><li>为了保证消息正常的到达消费者，RabbitMQ提供了消息的<code>acknowledgement</code>来确认消息</li><li>默认的消息确认设置是自动确认，且服务端不记录确认结果(<code>autoAck=None; isAutoAck=false</code>)；<code>autoAck=None;</code>表示消息发送现实的回复确认之后，消息才从服务器中移除，但是<code>acknowledgement</code>设置了Auto的话，那么<code>isAutoAck=true</code>就不安全了。消息发送出去之后，可能还没到达消费者，TCP链接就断开，因为配置了auto，消息发出之后，就移除消息，默认消费者已经正常处理。</li><li>还可以设置<code>autoAck=Normal; isAutoAck=false</code>，那么每次的消息确认操作，就需要消费者手动确认(<code>basc.ack,basic.nack等</code>),消息从服务器队列中移除或者重新入队。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速失败与安全失败机制</title>
      <link href="/archives/28d7adef.html"/>
      <url>/archives/28d7adef.html</url>
      
        <content type="html"><![CDATA[<h4 id="快速失败机制-fail-fast"><a href="#快速失败机制-fail-fast" class="headerlink" title="快速失败机制(fail-fast)"></a>快速失败机制(<code>fail-fast</code>)</h4><ul><li>在迭代器迭代的时候对集合进行修改：</li></ul><p><code>案例代码：</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.add(&quot;UML&quot;);</span><br><span class="line">list.add(&quot;PDF&quot;);</span><br><span class="line">list.add(&quot;VRP&quot;);</span><br><span class="line">// 1. 使用iterator遍历的时候发生更改，会导致 ConcurrentModificationException</span><br><span class="line">//        Iterator iterator = list.iterator();</span><br><span class="line">//        while (iterator.hasNext()) &#123;</span><br><span class="line">//            list.remove(1);</span><br><span class="line">//        &#125;</span><br><span class="line">//2. 使用foreach遍历的时候发生更改，会导致 ConcurrentModificationException</span><br><span class="line">//        for (String str : list)&#123;</span><br><span class="line">//            list.remove(1);</span><br><span class="line">//        &#125;</span><br><span class="line">//3. 使用for i 的形式遍历的时候发生更改，不会导致 ConcurrentModificationException。</span><br><span class="line">//        for (int i = 0; i &lt; list.size(); i++) &#123;</span><br><span class="line">//            list.remove(1);</span><br><span class="line">//        &#125;</span><br></pre></td></tr></table></figure></p><p><code>执行的异常结果：</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</span><br><span class="line">at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)</span><br><span class="line">at java.util.ArrayList$Itr.next(ArrayList.java:859)</span><br></pre></td></tr></table></figure></p><p><code>结果分析：</code>当迭代器遍历一个集合对象的时候，对集合对象进行内容修改(包括：赠删改)，则会抛出异常：<code>ConcurrentModificationException</code></p><ul><li>《Java编程思想》对快速失败(快速报错)的解释<ol><li>Java容器有一种保护机制，能够防止多个进程同时修改一个容器的内容。如果你正在迭代遍历某个容器的过程中，另一个线程对介入，并插入、删除、或修改容器中的某个对象，那么就会出现问题：也许迭代过程中已经处理了该对象，也许没有处理，也需要在调用<code>size()</code>方法之后容器的尺寸收缩了—–还有许多的灾难情景。</li><li>Java容器类类库采用<code>快速报错(fail-fast)</code>机制。它会探查容器上任何除了你的线程所进行的操作以外其他的所有变化，一旦发现其他线程对容器进行修改，就会立刻抛出<code>ConcurrentModificationException</code>异常</li><li>引用自书籍《Java编程思想》<code>17.11.3</code>章节</li></ol></li><li>快速失败原理：<ul><li>迭代器在便利一个集合对象时，并且在遍历过程中使用一个<code>modCount</code>变量。集合在遍历期间如果内容发生变化，就会改变<code>modCount</code>的值。每当迭代器使用<code>hashNext()/next()</code>遍历下一个元素的时候，都会检测<code>modCount</code>变量是否为<code>expectedmodCount</code>的值，如果是，则返回便利；否则抛出异常，终止便利。这里异常的抛出条件是检测到 <code>modCount！=expectedmodCount</code> 这个条件。如果集合发生变化时修改<code>modCount</code>值刚好又设置为了<code>expectedmodCount</code>值.</li><li>场景参考：java.util包下的集合类都是快速失败的，不能在多线程下发生并发修改(指的是迭代过程中被修改)<h4 id="安全失败机制-fail-safe"><a href="#安全失败机制-fail-safe" class="headerlink" title="安全失败机制(fail-safe)"></a>安全失败机制(<code>fail-safe</code>)</h4></li></ul></li><li>java.util.concurrent包下list执行迭代时修改操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">        //同样的代码：采用具备安全失败(fail-safe)的集合容器来创建对象</span><br><span class="line">        List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        list.add(&quot;UML&quot;);</span><br><span class="line">        list.add(&quot;PDF&quot;);</span><br><span class="line">        list.add(&quot;VRP&quot;);</span><br><span class="line">        // 1. 使用iterator遍历的时候发生更改，不会导致 ConcurrentModificationException</span><br><span class="line">//        Iterator iterator = list.iterator();</span><br><span class="line">//        while (iterator.hasNext()) &#123;</span><br><span class="line">//            list.remove(1);</span><br><span class="line">//            break;</span><br><span class="line">//        &#125;</span><br><span class="line">        //2. 使用foreach遍历的时候发生更改，不会导致 ConcurrentModificationException</span><br><span class="line">//        for (String str : list)&#123;</span><br><span class="line">//            list.remove(1);</span><br><span class="line">//            break;</span><br><span class="line">//        &#125;</span><br><span class="line">        //3. 使用for i 的形式遍历的时候发生更改，不会导致 ConcurrentModificationException。</span><br><span class="line">//        for (int i = 0; i &lt; list.size(); i++) &#123;</span><br><span class="line">//            list.remove(1);</span><br><span class="line">//            break;</span><br><span class="line">//        &#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>执行正常</code></p><ul><li>安全失败机制<ul><li>原理：由于迭代的时候，对原集合的拷贝进行遍历，所以在遍历过程中，对原集合所做的修改不能被迭代器检测到，所以不会触发<code>ConcurrentModificationException</code>异常</li><li>缺点：基于拷贝内容的容器虽然是避免来<code>ConcurrentModificationException</code>异常，但是同样地，拷贝出来的内容不能同步到原集合中内容信息的修改，可能会造成容器数据版本落后。</li><li>场景参考：<code>java.util.concurrent</code>包下的容器都是安全失败的，可以在多线程并发下使用，并发修改。</li><li>快速失败，安全失败是相对于迭代器而言的，包括iterator和foreach，不包括for i ；</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer封装类比较大小</title>
      <link href="/archives/a1cd7aa8.html"/>
      <url>/archives/a1cd7aa8.html</url>
      
        <content type="html"><![CDATA[<h4 id="先上Demo，Integer数据的比较大小"><a href="#先上Demo，Integer数据的比较大小" class="headerlink" title="先上Demo，Integer数据的比较大小"></a>先上Demo，Integer数据的比较大小</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer a = <span class="number">128</span>;</span><br><span class="line">        Integer b = <span class="number">128</span>;</span><br><span class="line">        <span class="comment">//test-1</span></span><br><span class="line">        <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">            System.out.println(<span class="string">" a is equal to b"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Integer c = <span class="number">127</span>;</span><br><span class="line">        Integer d = <span class="number">127</span>;</span><br><span class="line">        <span class="comment">//test-2</span></span><br><span class="line">        <span class="keyword">if</span> (c == d) &#123;</span><br><span class="line">            System.out.println(<span class="string">"c is equal to d"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> e = <span class="number">128</span>;</span><br><span class="line">        <span class="comment">//test-3</span></span><br><span class="line">        <span class="keyword">if</span> (a == e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"a is equal to e"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">127</span>;</span><br><span class="line">        <span class="comment">//test-4</span></span><br><span class="line">        <span class="keyword">if</span> (f == c) &#123;</span><br><span class="line">            System.out.println(<span class="string">"f is equal to c"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Integer g = <span class="number">129</span>;</span><br><span class="line">        <span class="comment">//test-5</span></span><br><span class="line">        <span class="keyword">if</span> (g &gt; a) &#123;</span><br><span class="line">            System.out.println(<span class="string">"g is larger to a"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//test-6</span></span><br><span class="line">        <span class="keyword">if</span> (g &gt; c) &#123;</span><br><span class="line">            System.out.println(<span class="string">"g is larger to c"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 结果：</span></span><br><span class="line"><span class="comment">         *    c is equal to d</span></span><br><span class="line"><span class="comment">         *    a is equal to e</span></span><br><span class="line"><span class="comment">         *    f is equal to c</span></span><br><span class="line"><span class="comment">         *    g is lager to a</span></span><br><span class="line"><span class="comment">         *    g is larger to c</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="测试点分析"><a href="#测试点分析" class="headerlink" title="测试点分析"></a>测试点分析</h4><ol><li><code>test-1</code>：Intger数值超出<code>Integer.MinValue（-128）</code>和<code>Integer.MaxValue（127）</code>的范围，用等号比较大小，数值不等</li><li><code>test-2</code>：Intger数值在<code>Integer.MinValue（-128）</code>和<code>Integer.MaxValue（127）</code>的范围内，用等号比较大小，数值相等</li><li><code>test-3</code>和：<code>test-4</code>：Integer数值在Integer范围内或者范围外与int基本数据类型进行比较；只要数值相等，两者都相等</li><li><code>test-5</code>和：<code>test-6</code>: Integer数值在不超出int的范围内进行比较，只比较数值的大小</li></ol><h4 id="实验结果总结"><a href="#实验结果总结" class="headerlink" title="实验结果总结"></a>实验结果总结</h4><ul><li>在-128~127的Integer值并且以Integer x = value;的方式赋值的Integer值在进行==和equals比较时，都会返回true；因为在此范围内的Integer的数值用的是原生数据类型int，会在内存中重用；比较的时候，只比较数值大小</li><li>超出-128~127的Integer的数值比较的时候，不仅比较数值的大小，还比较对象的引用地址是否一致</li><li>而Integer类型与int比较大小的时候，只比较数值大小；因为Integer会自动拆箱操作，转换成int类型再进行比较</li><li>对于超出-128~127的Integer比较数值是否相等的时候，采用<code>equal()</code>方法进行比较;但是实际生成环境中，无法确定Integer的范围时候，只能都用<code>equal()</code>进行Integer类型的大小比较;</li><li>jdk中<code>equal()</code>源码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compares this object to the specified object.  The result is</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> true&#125; if and only if the argument is not</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> null&#125; and is an &#123;<span class="doctag">@code</span> Integer&#125; object that</span></span><br><span class="line"><span class="comment"> * contains the same &#123;<span class="doctag">@code</span> int&#125; value as this object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   obj   the object to compare with.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the objects are the same;</span></span><br><span class="line"><span class="comment"> *          &#123;<span class="doctag">@code</span> false&#125; otherwise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">        <span class="keyword">return</span> value == ((Integer)obj).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx的负载均衡策略</title>
      <link href="/archives/9b0bd708.html"/>
      <url>/archives/9b0bd708.html</url>
      
        <content type="html"><![CDATA[<h4 id="Nginx负载均衡模块的作用"><a href="#Nginx负载均衡模块的作用" class="headerlink" title="Nginx负载均衡模块的作用"></a>Nginx负载均衡模块的作用</h4><ol><li>负载均衡模块用于从”upstream”指令定义的后端主机列表中选取一台主机。nginx先使用负载均衡模块找到一台主机，再使用upstream模块实现与这台主机的交互。</li><li>Nginx负载均衡默认对后端服务器有健康检测的能力，仅限于端口检测，在后端服务器比较少的情况下负载均衡能力表现突出。</li><li>提醒：各种负载均衡策略尽量不要混合使用，这样会导致负载不均衡。<h4 id="Nginx负载均衡策略"><a href="#Nginx负载均衡策略" class="headerlink" title="Nginx负载均衡策略"></a>Nginx负载均衡策略</h4></li><li><p>轮询策略(<code>round-robin</code>)</p><ul><li>轮询策略是Nginx自带的负载均衡策略，并且是默认的策略。</li><li>每个请求按照访问时间顺序，分配到不同的后端服务器</li><li>配置如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">       server 192.168.1.101:8888;</span><br><span class="line">       server 192.168.1.102:8888;</span><br><span class="line">       server 192.168.1.103:8888;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>权重策略(<code>weight</code>)</p><ul><li>被指为轮询负载均衡策略的加强版，可以指定每个可选项的轮询频率</li><li>可以根据后端服务器的异质，能承受的负载程度来使用此策略</li><li>配置如下：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123; </span><br><span class="line">    server 192.168.1.101 weight=1; </span><br><span class="line">    server 192.168.1.102 weight=2;</span><br><span class="line">    server 192.168.1.103 weight=3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>基于IP的哈希策略(<code>ip_hash</code>)</p><ul><li>按照每个访问IP的hash计算结果来分配访问指定的后端服务器；这样可以对固定的访问源转发到固定的目的地址</li><li>这样可以解决集群中session一致性的问题</li><li>配置如下：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123; </span><br><span class="line">    ip_hash; </span><br><span class="line">    server 192.168.1.101:7777; </span><br><span class="line">    server 192.168.1.102:8888;</span><br><span class="line">    server 192.168.1.103:9999;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>公平分配策略(<code>fair</code>)(来自第三方)</p><ul><li>公平的按照后端服务器的响应时间(<code>rt</code>)来分配请求，响应时间短的优先分配访问</li><li>由于这种是第三方的负载均衡策略，如果Nginx要使用的话，需要往Nginx里面下载upstr_fair模块</li><li>配置如下：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123; </span><br><span class="line">   fair;</span><br><span class="line">   server 192.168.1.101; </span><br><span class="line">   server 192.168.1.102; </span><br><span class="line">   server 192.168.1.103; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>基于URL的哈希策略(<code>url_hash</code>)(来自第三方)</p><ul><li>与IP_Hash类似，URL_Hash是根据请求的URL地址做哈希计算来分配请求值，力求每个相同的URL都能访问到相同的后端服务器</li><li>该策略主要用于缓存场景。根据缓存服务的请求参数，能提高命中同一台后端缓存服务器</li><li>使用的时候，同样，由于URL哈希属于第三方的负载均衡策略，要使用的话，需要按照这种负载均衡模块包以及指定哈希算法的hash软件包</li><li>配置如下：其中<code>hash_method</code>是哈希算法<br><pre><br>upstream backend {<br>server 192.168.1.101;<br>server 192.168.1.102;<br>server 192.168.1.103;<br>hash $request_uri;<br>hash_method crc32;<br>}<pre></pre></pre></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> NetWorker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java遍历Map对象的4种方法</title>
      <link href="/archives/d1b4efa1.html"/>
      <url>/archives/d1b4efa1.html</url>
      
        <content type="html"><![CDATA[<h4 id="Foreach遍历Map-Entry对象（O-n-）"><a href="#Foreach遍历Map-Entry对象（O-n-）" class="headerlink" title="Foreach遍历Map.Entry对象（O(n)）"></a>Foreach遍历Map.Entry对象（O(n)）</h4><ul><li>最普遍的遍历方式。但是遍历的Map不可为Null，需要做空指针判断<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//foreach遍历Entry实例</span><br><span class="line">public static void forEachMap(Map&lt;String,String&gt; stringMap)&#123;</span><br><span class="line">    if (stringMap==null) return;    //如果要遍历的Map为空，则终止遍历#NullPointerException</span><br><span class="line">    for (Map.Entry&lt;String,String&gt; entry : stringMap.entrySet())&#123;</span><br><span class="line">        System.out.println(&quot;key:&quot;+entry.getKey()+&quot;,value:&quot;+entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Foreach直接遍历key-value-（O-n-）"><a href="#Foreach直接遍历key-value-（O-n-）" class="headerlink" title="Foreach直接遍历key/value （O(n)）"></a>Foreach直接遍历key/value （O(n)）</h4><ul><li>通过Map的<code>keySet()</code>和<code>getValues()</code>对象直接获取key/value集合，再遍历得到数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//单独遍历Map对象中的key/value</span><br><span class="line">public static void forEachKeyOrValue(Map&lt;String,String&gt; map)&#123;</span><br><span class="line">    for (String key : map.keySet())&#123;</span><br><span class="line">        System.out.println(&quot;key:&quot;+key);</span><br><span class="line">    &#125;</span><br><span class="line">    for (String value : map.values())&#123;</span><br><span class="line">        System.out.println(&quot;value:&quot;+value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="根据取出来的key集合来遍历value-（O-n-n-）"><a href="#根据取出来的key集合来遍历value-（O-n-n-）" class="headerlink" title="根据取出来的key集合来遍历value （O(n*n)）"></a>根据取出来的key集合来遍历value （O(n*n)）</h4><ul><li>这种方法有种多此一举的感觉…<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line"> * 先取出Map的key值，再通过遍历取出来的key来获取value值</span><br><span class="line"> * 但是该方法效率低，取出key已经很消耗资源，再遍历一遍value，已经是翻倍的成本</span><br><span class="line"> * */</span><br><span class="line">public static void forEachByKey(Map&lt;String,String&gt; map)&#123;</span><br><span class="line">    for (String key : map.keySet())&#123;</span><br><span class="line">        System.out.println(&quot;key:&quot;+key+&quot;,value:&quot;+map.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>####使用迭代器遍历Map对象 </p><ul><li><p>使用迭代器遍历Map的泛型数据<code>（O(n)）</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//通过迭代器Iterator遍历Map，使用泛型</span><br><span class="line">    public static void iteratorMap(Map&lt;String,String&gt; map)&#123;</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String,String&gt; entry = iterator.next();</span><br><span class="line">            System.out.println(&quot;key:&quot;+entry.getKey()+&quot;,value:&quot;+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用迭代器遍历键值数据<code>（O(n*n)）</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 先取出Map的key值，再通过遍历取出来的key来获取value值</span><br><span class="line"> * 但是该方法效率低，取出key已经很消耗资源，再遍历一遍value，已经是翻倍的成本</span><br><span class="line"> * */</span><br><span class="line">public static void forEachByKey(Map&lt;String,String&gt; map)&#123;</span><br><span class="line">    for (String key : map.keySet())&#123;</span><br><span class="line">        System.out.println(&quot;key:&quot;+key+&quot;,value:&quot;+map.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array与Arrays的区别</title>
      <link href="/archives/1ab741e2.html"/>
      <url>/archives/1ab741e2.html</url>
      
        <content type="html"><![CDATA[<h4 id="Array数组类"><a href="#Array数组类" class="headerlink" title="Array数组类"></a><code>Array</code>数组类</h4><ul><li><code>Array</code>数组是Java提供的一个基本的存储结构</li><li>提供了动态创建和访问 Java 数组的方法。其中的元素的类型必须相同</li><li>效率高，但是容量固定且无法改变；如果涉及扩展，需要重新创建数组并复制数据</li></ul><h4 id="Arrays静态类"><a href="#Arrays静态类" class="headerlink" title="Arrays静态类"></a><code>Arrays</code>静态类</h4><ul><li><code>Arrays</code>是一个数组的工具类，专门用于操作数组</li><li>具备齐全的处理工具方法；例如：搜索，排序，复制等静态方法</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collection与Collections的区别</title>
      <link href="/archives/ad76721a.html"/>
      <url>/archives/ad76721a.html</url>
      
        <content type="html"><![CDATA[<h4 id="java-util-Collection是一个集合接口"><a href="#java-util-Collection是一个集合接口" class="headerlink" title="java.util.Collection是一个集合接口"></a><code>java.util.Collection</code>是一个集合接口</h4><ul><li><code>Collection</code>是个接口类，旗下派生出我们常用以及不常用的一些容器，如下：</li><li><code>java.util.Collection</code><ul><li>Queue</li><li>Set<ul><li>AbstractSet<ul><li>HashSet<ul><li>LinkedHashSet</li></ul></li><li>TreeSet</li></ul></li><li>SortSet</li></ul></li><li>List<ul><li>AbstractList<ul><li>ArrayList</li><li>AbstractSequentialList<ul><li>LinkedList</li></ul></li><li>Vector<ul><li>Stack</li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="java-util-Collections-是一个静态工具类"><a href="#java-util-Collections-是一个静态工具类" class="headerlink" title="java.util.Collections 是一个静态工具类"></a><code>java.util.Collections</code> 是一个静态工具类</h4><ul><li><code>java.util.Collection</code>主要用于操作集合容器，工具方法齐全</li><li>提供一系列的静态方法实现对各种几何的搜索、排序、线程安全化等操作</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set集合误用引发的血案</title>
      <link href="/archives/130dac3d.html"/>
      <url>/archives/130dac3d.html</url>
      
        <content type="html"><![CDATA[<h4 id="需求场景："><a href="#需求场景：" class="headerlink" title="需求场景："></a>需求场景：</h4><ol><li>功能开发完成了，准备发布版本，准备下班。</li><li>从Redis的<code>Zset</code>的结构中，根据<code>score</code>的倒序取出有序集合数据</li></ol><h4 id="罪魁祸首的业务代码"><a href="#罪魁祸首的业务代码" class="headerlink" title="罪魁祸首的业务代码"></a>罪魁祸首的业务代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static Set&lt;String&gt; getZsetOrderByScore(final String key,final Long start , final Long end)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.execute(new RedisCallback&lt;Set&lt;String&gt;&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Set&lt;String&gt; doInRedis(RedisConnection redisConnection) throws DataAccessException &#123;</span><br><span class="line">Set&lt;byte[]&gt; set = redisConnection.zRevRange(redisTemplate.getStringSerializer().serialize(key),start,end);</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; s = set.parallelStream().map(bytes -&gt; &#123;</span><br><span class="line">return redisTemplate.getStringSerializer().deserialize(bytes);</span><br><span class="line">&#125;).collect(Collectors.toSet());</span><br><span class="line">return s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">DEBUG.error(&quot;getZsetWithCol value to redis fail...&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">return Collections.emptySet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="引发问题："><a href="#引发问题：" class="headerlink" title="引发问题："></a>引发问题：</h4><ol><li>Redis中的<code>ZSet</code>数据排序正常，<code>score</code>的顺序也正常，经过上面代码取出来之后,<code>Set&lt;String&gt;</code>集合中的数据排序与Redis中的<code>ZSet</code>数据排序不一致。导致数据展示错误</li><li>出现问题，不能发版本，deadline在这，还是得把问题解决。</li></ol><h4 id="问题排查："><a href="#问题排查：" class="headerlink" title="问题排查："></a>问题排查：</h4><ol><li>把刚刚从Redis中取出来的数据，反序列化之后，直接打印出来，发现数据顺序与Redis一直；排除Java代码从Redis中查询数据的时候发生顺序错误这个猜测</li><li>随着数据流向，问题定位网上抛。判断刚刚反序列化就打印的数据顺序与<code>Set&lt;String&gt;</code>容器对象中的顺序，发现两者顺序不一致，发生顺序错误。</li><li>问题定位在反序列化数据之后，装载在<code>Set&lt;String&gt;</code>容器的时候，发送顺序错乱。</li></ol><h4 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h4><ul><li>使用lambda表达式的时候，聚合集合操作<code>Collectors.toSet()</code>打乱了数据的顺序</li><li><code>Collectors.toSet()</code>本质是重新组装<code>Set</code>集合，先看看<code>Set</code>集合是否会对集合对象进行重新排序？<br><pre><br>Set<string> set = new HashSet&lt;&gt;();<pre><code>set.add(&quot;m&quot;);set.add(&quot;a&quot;);set.add(&quot;e&quot;);System.out.println(set);//打印结果：[a, e, m]</code></pre><pre></pre></string></pre></li><li>果然问题出现在这里，幸好没去翻lambda的聚合源码</li><li>HashSet内部使用元素的自然顺序对元素进行排序，或者根据创建set时提供的Comparator进行排序</li><li>HashSet使用哈希函数对数据进寻址排序，所以数据是重新排序过的。</li></ul><h4 id="BUG-FIXED"><a href="#BUG-FIXED" class="headerlink" title="BUG FIXED"></a>BUG FIXED</h4><ol><li>在从取出来的数据反序列化完成之后，不使用<code>Set</code>集合来存方对象，使用<code>List</code>代替之。</li><li>如果能获取到Redis数据的score数值的话，也可以通过重写Comparator方法，来通过score数据排序。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> TakeDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Redis缓存的音频点赞排行榜功能实践</title>
      <link href="/archives/4354712f.html"/>
      <url>/archives/4354712f.html</url>
      
        <content type="html"><![CDATA[<h5 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h5><ul><li>情人节情话音频点赞排行榜功能：用户录制并上传一段音频，分享朋友/朋友圈，用户(包括自己)对录制的音频进行点赞，并根据点赞数量排序(排行榜)，并且，一个用户每天只能点赞一次，第二天可以继续点赞。</li></ul><h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><ul><li>DB表：<ol><li>音频信息表：包括音频的基本信息，音频的被点赞总数量</li><li>点赞信息表：包括每个音频被用户的点赞情况，不保存取消点赞的行为信息</li></ol></li><li>缓存结构：<ol><li><code>缓存结构1</code>:音频信息列表通过字符串的结构保存到缓存中，每个音频信息一个key，对应一个音频信息对象的序列化<code>JSON</code>数据，取出来的时候，反序列化下。但是其中的点赞数据以<code>[2]</code>中的<code>zSet</code>结构保存的点赞数量为主。</li><li><code>缓存结构2</code>:音频排行榜通过<code>zSet</code>结构保存，每条记录的<code>score</code>参数为音频的点赞数量</li><li><code>缓存结构3</code>:音频的点赞情况，即音频id与点赞用户id的对应关系，用<code>Set</code>结构保存一个音频，对应的点赞用户。因为需要满足不可重复点赞的功能，通过<code>Set</code>结构来对数据去重。另外，由于需求中提到一天之内点赞一次，所以，这个数据去重只能一天设置一个统计结构。所以，这个<code>Set</code>结构的key应该与日期联系起来，保证隔天之后，用户可以再次点赞，以及用户的点赞数据尽量持久化到DB中。</li></ol></li></ul><h4 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h4><ul><li>用户上传录制音频：<ol><li>前端的小伙伴负责，音频信息保存在微信的临时素材中，不过只能保持三天；</li><li>如果过了三天怎么办？通过获取前端上传给微信临时素材的id，后端在素材即将过期的时候，对素材进行续传，获取新的音频素材id；通过定时任务解决。</li><li>点赞数据上传完毕，并将该条信息初始化到缓存中，包括缓存基础信息、缓存排行榜的排序列表、点赞情况信息缓存则在用户点赞之后再创建这个结构。</li></ol></li><li>用户点赞/取消点赞：<ol><li>点赞/取消点赞的时候，发起异步请求，将请求结果保持在<code>Redis</code>缓存中</li><li>如果是点赞信息，则添加到点赞情况缓存中，如果是取消单赞，则在缓存中去掉该用户的点赞信息。</li></ol></li><li>排行榜数据：<ul><li>读取：数据从缓存排行榜中获取所有音频信息的排序，根据这个排序，根据音频id，从<code>缓存结构1</code>中将音频的详细信息反序列化出来，其中的点赞数据采用<code>ZSet</code>结构的<code>score</code></li><li>持久化：将缓存中的点赞数据缓存到DB中。何时进行持久化？在缓存中设置一个持久化周期时间标记，每次用户点赞的时候，检测这个持久化标记，达到了持久化周期，则对数据进行持久化，写入DB中。由于涉及到日期变更，缓存数据重置的问题，在持久化的时候，对前一天的保存点赞情况的<code>Set</code>结构的key检测一下存在性，如果存在，则先将该部分数据进行持久化，持久化成功之后，将这个key删除；后续再进行当天缓存数据的持久化操作。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> 场景 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础数据结构</title>
      <link href="/archives/e8fc0d11.html"/>
      <url>/archives/e8fc0d11.html</url>
      
        <content type="html"><![CDATA[<h5 id="Redis数据简述"><a href="#Redis数据简述" class="headerlink" title="Redis数据简述"></a>Redis数据简述</h5><ul><li>经常用来存储字符串，哈希结构，链表集合</li><li>Redis与memcached对比<ul><li>Redis可以用来做存储又可以做缓存，而memcached做缓存。主要因为redis具备持久化能力</li><li>Redis存储的数据多种结构(字符串，哈希结构，链表，集合，有序集合等)，而memcached只有一种存储结构(字符串)</li><li>redis支持数据的备份，即master-slave模式的数据备份；</li></ul></li></ul><h5 id="通用数据维护指令"><a href="#通用数据维护指令" class="headerlink" title="通用数据维护指令"></a>通用数据维护指令</h5><ol><li>keys <code>pattern</code> : 模糊查询 pattern为正则查询(<code>eg. keys [C|L]*</code>);</li><li>RANDOMKEY : 返回随机的key</li><li>TYPE keyname : 查询key的类型</li><li>EXISTS keyName : 判断是否存在key</li><li>DEL keyname 删除key</li><li>RENAME old new 从新命名</li><li>RENAMENX  判断新key是否会重名，如果已经存在新的key名，则操作失败</li><li>MOVE key db 移动数据到另一个库</li><li>ttl key  查询key有效期，-1表示永久有效 -2表示已经过期</li><li>EXPIRE key seconds 设置key的有效期，如果不设置，则永久有效</li><li>PEXPIRE key milliseconds 以毫秒为单位设置key的生命周期</li><li>PERSIST key 取消key的有效期限制</li></ol><h5 id="Redis数据结构操作指令说明"><a href="#Redis数据结构操作指令说明" class="headerlink" title="Redis数据结构操作指令说明"></a>Redis数据结构操作指令说明</h5><ul><li>结构操作指令说明<ol><li>Redis数据除了普通的通用指令之外，其他的指令都是针对Redis的四种数据结构，对数据的维护，包括增删查改。</li><li>而每个数据结构的增、删、查、改再进行细化操作，又有多种更加细分的操作指令。</li><li>只要按照这个思路，对Redis数据结构的花样维护这个思路去深入了解Redis的操作。</li></ol></li><li><p>字符串操作</p><ol><li><code>SET key value [expiration EX seconds(秒)|PX milliseconds(毫秒)] [NX|XX]</code>：设置字符串类型，后面可选参数，设置有效周期，用毫秒或者秒作为生命周期，而且，只能设置一个标准，如果选了两个，则以最后一个为准。nx表示key不存在的时候，才操作成功、xx表示key存在的时候才操作成功，可以用来区分创建或者新增操作。</li><li><code>MSET key value [key value ...]</code>一次创建多个k-v数据( MSET key1 “Hello” key2 “World”)</li><li>get key 获取key的值</li><li><code>MGET key1 key2</code>获取多个key的值</li><li><code>SETRANGE key offset value</code>在指定的偏移值对字符进行替换，如果缺数据，则以0代替</li><li>get key</li><li><code>GETRANGE key start end</code> 根据范围取key值</li><li><code>APPEND key value</code>在key的值后面增加数据</li><li><code>GETSET key value</code>获取旧的值，同时设置新的值，用来获取状态并更新状态</li><li><code>INCR key</code> 执行设置key值+1操作，并返回计算后的数据(减少为decr key)</li><li><code>INCRBY key increment</code>通过步进频率来增加</li><li><code>SETBIT key offset value</code> 位操作：设置字符的二进制值，而改变字符对值，比如大小写字母ascii相差32，修改对应位置的0或者1，即可进行大小写转换</li></ol></li><li><p>链表结构(List)类型</p><ol><li>增加值：[L|R]PUSH key value</li><li>去掉值：[L|R]POP key</li><li>删除值：<code>LREM key count value</code>count表示删除标示，如果count为正数，从头部往尾部删除，count为负数，从尾部开始删，如果为0，则删除所有匹配值的数据</li><li>查看长度：<code>LLEN key</code></li><li>在匹配的值前后插入值：<code>LINSERT key BEFORE|AFTER pivot value</code></li><li>两个链表之间迁移数据: <code>RPOPLPUSH source destination</code></li></ol></li><li>集合结构(<code>SET</code>)<ol><li>特点：无序性、确定性、唯一性,支持多个集合之间的交集、并集运算</li><li><code>SADD key member1 [member2]</code>往Set集合中添加成员数据，一条指令，可以添加一个或者多个成员数据</li><li><code>SCARD key</code>获取集合的成员数</li><li><code>SISMEMBER key member</code>判断 member 元素是否是集合 key 的成员</li><li><code>SMEMBERS key</code>返回集合中的所有成员</li><li><code>SRANDMEMBER key [count]</code>返回集合中一个或多个随机数,具体实际使用场景可实际斟酌使用</li><li><code>SREM key member1 [member2]</code>移除集合中一个或多个成员</li><li>交集运算：<ul><li><code>SINTER key1 [key2]</code>返回给定所有集合的交集</li><li><code>SINTERSTORE destination key1 [key2]</code>返回给定所有集合的交集并存储在 destination 中</li></ul></li><li>并集运算：</li></ol><ul><li><code>SUNION key1 [key2]</code>返回所有给定集合的并集</li><li><code>SUNIONSTORE destination key1 [key2]</code>所有给定集合的并集存储在 destination 集合中</li></ul></li><li>有序集合(<code>sorted set</code>)</li></ul><ol><li>有序集合的数据结构表现形式为<code>score(分数值) member(成员)</code> ,<code>score</code>主要是用于排序(不必须唯一)，而<code>member</code>为集合的成员(必须唯一)</li><li>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</li><li>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)</li><li><code>ZADD key score1 member1 [score2 member2]</code>向有序集合添加一个或多个成员，或者更新已存在成员的分数</li><li><code>ZCARD key</code>获取有序集合的成员数</li><li><code>ZCOUNT key min max</code>计算在有序集合中指定区间分数的成员数</li><li><code>ZINCRBY key increment member</code>有序集合中对指定成员的分数加上增量 increment</li><li><code>ZINTERSTORE destination numkeys key [key ...]</code>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</li><li><code>ZLEXCOUNT key min max</code>在有序集合中计算指定字典区间内成员数量</li><li><code>ZRANGE key start stop [WITHSCORES]</code>通过索引区间返回有序集合成指定区间内的成员</li><li><code>ZRANGEBYLEX key min max [LIMIT offset count]</code> 通过字典区间返回有序集合的成员</li><li><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</code>通过分数返回有序集合指定区间内的成员</li><li><code>ZRANK key member</code>返回有序集合中指定成员的索引</li><li><code>ZREM key member [member ...]</code>移除有序集合中的一个或多个成员</li><li><code>ZREMRANGEBYLEX key min max</code>移除有序集合中给定的字典区间的所有成员</li><li><code>ZREMRANGEBYRANK key start stop</code>移除有序集合中给定的排名区间的所有成员</li><li><code>ZREMRANGEBYSCORE key min max</code>移除有序集合中给定的分数区间的所有成员</li><li><code>ZREVRANGE key start stop [WITHSCORES]</code>返回有序集中指定区间内的成员，通过索引，分数从高到底</li><li><code>ZREVRANGEBYSCORE key max min [WITHSCORES]</code>返回有序集中指定分数区间内的成员，分数从高到低排序</li><li><code>ZREVRANK key member</code>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</li></ol><ul><li>哈希(<code>Hash</code>)</li></ul><ol><li>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象,支持保存一个对象里面的多个字段以及对应的字段值</li><li><code>HSET key field value</code>将哈希表 key 中的字段 field 的值设为 value </li><li><code>HMSET key field1 value1 [field2 value2 ]</code>同时将多个 field-value (域-值)对设置到哈希表 key 中</li><li><code>HSETNX key field value</code>只有在字段 field 不存在时，设置哈希表字段的值.</li><li><code>HGET key field</code>获取存储在哈希表中指定字段的值</li><li><code>HGETALL key</code>获取在哈希表中指定 key 的所有字段和值</li><li><code>HVALS key</code>获取哈希表中所有值</li><li><code>HSCAN key cursor [MATCH pattern] [COUNT count]</code>迭代哈希表中的键值对</li><li><code>HKEYS key</code>获取所有哈希表中的字段</li><li><code>HLEN key</code>获取哈希表中字段的数量</li><li><code>HMGET key field1 [field2]</code>获取所有给定字段的值</li><li><code>HINCRBY key field increment</code> 为哈希表 key 中的指定字段的整数值加上增量 increment </li><li><code>HINCRBYFLOAT key field increment</code>为哈希表 key 中的指定字段的浮点数值加上增量 increment </li><li><code>HEXISTS key field</code>查看哈希表 key 中，指定的字段是否存在,如果要检测key是否存在，可以使用通用命令来确认。</li><li><code>HDEL key field1 [field2]</code>删除一个或多个哈希表字段</li></ol><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul><li>本文仅仅列出常用的几条Redis指令，具体指令描述，请参照<a href="https://redis.io/commands" target="_blank" rel="noopener">官方文档</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode Reserve Integer</title>
      <link href="/archives/98ee2edb.html"/>
      <url>/archives/98ee2edb.html</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://leetcode.com/problems/reverse-integer/description/" target="_blank" rel="noopener">Reserve Integer</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Given a 32-bit signed integer, reverse digits of an integer.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: 123</span><br><span class="line">Output: 321</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: -123</span><br><span class="line">Output: -321</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: 120</span><br><span class="line">Output: 21</span><br><span class="line">Note:</span><br><span class="line">Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</span><br></pre></td></tr></table></figure></li><li><p>Solution</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">public class ReverseInteger &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int x = 12320;</span><br><span class="line">        System.out.println(&quot;x:&quot; + x);</span><br><span class="line">        System.out.println(&quot;ReverseInt:&quot; + reserveFastest(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int ReverseInt(int x) &#123;</span><br><span class="line">        double result = 0;</span><br><span class="line">        if (0 == x) return 0;</span><br><span class="line">        if (x &gt; Integer.MAX_VALUE || x &lt; Integer.MIN_VALUE) return 0;</span><br><span class="line">        int sign = (x &gt; 0) ? 1 : -1;</span><br><span class="line">        x = x * sign;</span><br><span class="line">        int division = x;</span><br><span class="line">        int numLength = String.valueOf(x).length();</span><br><span class="line">        for (int i = 1; i &lt;= numLength; i++) &#123;</span><br><span class="line">            int currentDiv = 10;</span><br><span class="line">            double currentMul = (int) Math.pow(10, numLength - i);</span><br><span class="line">            int currentPlace = division % currentDiv;</span><br><span class="line">            division = division / currentDiv;</span><br><span class="line">            result = result + currentPlace * currentMul;</span><br><span class="line">            if (result &gt;= Integer.MAX_VALUE || result &lt;= Integer.MIN_VALUE) return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return (int) (result * sign);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int reverseFast(int x) &#123;</span><br><span class="line">        double result = 0;</span><br><span class="line">        while (x != 0) &#123;</span><br><span class="line">            result *= 10;</span><br><span class="line">            result += x % 10;</span><br><span class="line">            x /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        return result &gt;= Integer.MAX_VALUE || result &lt;= Integer.MIN_VALUE ? 0 : (int) result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int reverseFaster(int x) &#123;</span><br><span class="line">        long res = 0;</span><br><span class="line">        while (x != 0) &#123;</span><br><span class="line">            res *= 10;</span><br><span class="line">            res += x % 10;</span><br><span class="line">            x /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        return res == (int) res ? (int) res : 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int reserveFastest(int x) &#123;</span><br><span class="line">        int res = 0;</span><br><span class="line">        while (x != 0) &#123;</span><br><span class="line">            int tail = x % 10;</span><br><span class="line">            int newRes =  (res * 10 + tail);</span><br><span class="line">            if (res != (newRes - tail) / 10) return 0;</span><br><span class="line">            res = newRes;</span><br><span class="line">            x /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object 类中toString()、equal()、hashCode()之间关系</title>
      <link href="/archives/bd43d2da.html"/>
      <url>/archives/bd43d2da.html</url>
      
        <content type="html"><![CDATA[<h4 id="未重写，从源码中区分"><a href="#未重写，从源码中区分" class="headerlink" title="未重写，从源码中区分"></a>未重写，从源码中区分</h4><ol><li><code>toString()</code></li></ol><ul><li>toString()方法返回的是一个对象的字符串,</li><li>这个字符串的组成格式由类名（对象是该类的一个实例）、at 标记符“@”和此对象哈希码的无符号十六进制表示组成(<code>getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode())</code>),源码如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public String toString() &#123;</span><br><span class="line">        return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><code>equals()</code></li></ol><ul><li><code>equals()</code>:针对两个非空引用值x和y，当前仅当x和y引用同一个对象时，两个对象才相等，即返回true。因为不是引用同一个对象，两个引用值在堆中创建了两个对象存储地址。</li></ul><ol start="3"><li><code>hashCode()</code></li></ol><ul><li><code>hashCode()</code>:由Object类定义的hashCode()方法确实会针对不同的对象返回不同的整数值，通过对象的内部地址转换来实现。主要通过区分返回的散列值不同，而区分每个对象。主要用于散列集合容器中，在往散列集合插入一个对象的时候，通过管理对象的散列值，检测每个对象的hashCode散列值，如果集合中已经存在该对象的散列值，则说明对象已经存在，反之。</li><li>而Object类只有<code>hashCode()</code>方法的定义，但是没有具体的实现，而具体的实现会针对不同的类中，分别有不同的实现。如：String的<code>hashCode()</code>源码实现如下： (至于String的hashCode实现机制中为什么要使用31？这个真能保证对象散列值的唯一性吗？这个问题尚未深究)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> public int hashCode() &#123;</span><br><span class="line"></span><br><span class="line">        int h = hash;</span><br><span class="line">        if (h == 0 &amp;&amp; value.length &gt; 0) &#123;</span><br><span class="line">            char val[] = value;</span><br><span class="line"></span><br><span class="line">            for (int i = 0; i &lt; value.length; i++) &#123;</span><br><span class="line">                h = 31 * h + val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line">        return h;</span><br><span class="line">    &#125;</span><br><span class="line">hash的定义：</span><br><span class="line"> /** Cache the hash code for the string */</span><br><span class="line">    private int hash; // Default to 0</span><br><span class="line"></span><br><span class="line">/** The value is used for character storage. */</span><br><span class="line">    private final char value[];</span><br></pre></td></tr></table></figure></li></ul><h4 id="重写之后，根据重写规则区分"><a href="#重写之后，根据重写规则区分" class="headerlink" title="重写之后，根据重写规则区分"></a>重写之后，根据重写规则区分</h4><ol><li><code>toString()</code>方法重写之后，一般返回更加直观的数据，返回对象的属性与相关值组成的字符串拼接</li><li><code>equal()</code>方法重写之后，一般只要自定义为两个对象的所有属性值相等就返回true</li><li><code>hashCode()</code>重写也可以根据自定义算法返回所需的整型值</li></ol><ul><li>所以对象相等，hashCode一定相等</li><li>hashCode返回值相等，则对象未必相等，而即使对象不相等，也有可能返回相等的哈希散列码，这个根据具体的重写规则决定</li></ul><h4 id="判断两个对象相等的条件："><a href="#判断两个对象相等的条件：" class="headerlink" title="判断两个对象相等的条件："></a>判断两个对象相等的条件：</h4><ol><li>如果没有重写，只要hashCode不相等，则两个对象一定不相等</li><li>如果重写了，首先判断hashCode，如果不相等，那么这两个对象不相等(针对上述hashCode方法重写规则)，如果hashCode一样，再比较equals，如果两个条件都相等，那么这两个对象相等。</li></ol><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><ul><li><code>finalize()</code>：当垃圾回收器确定该对象不存在更多的引用值的时候，由对象的垃圾回收器调用次方法，进行系统资源的重新配置与清除。可以在子类中重写<code>finalize</code>方法，进行手动垃圾回收。但是，一般情况下，不建议重写<code>finalize()</code>方法（并在其中实现任何功能逻辑），请相信<code>JVM</code>的<code>GC</code>。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常总结</title>
      <link href="/archives/7416d96f.html"/>
      <url>/archives/7416d96f.html</url>
      
        <content type="html"><![CDATA[<h4 id="Java异常类结构图"><a href="#Java异常类结构图" class="headerlink" title="Java异常类结构图"></a>Java异常类结构图</h4><ul><li>Java.lang.Throwable<ul><li>Java.lang.Error<ul><li>Java.lang.OutOfMemoryError</li><li>…</li></ul></li><li>Java.lang.Exception<ul><li>(<code>RuntimeException</code>):<ul><li>Java.lang.ArithmeticException</li><li>Java.lang.IndexOutOfBoundsException</li><li>Java.lang.NullPointerException</li><li>Java.lang.ArrayStoreExcetpion</li><li>Java.lang.ClassCastException</li><li>…</li></ul></li><li>(<code>checkedException</code>):<ul><li>Java.lang.IOException</li><li>Java.lang.ClassNotFoundException</li><li>Java.lang.SQLException</li><li>Java.lang.CloneNotSupportException</li><li>…</li></ul></li></ul></li></ul></li></ul><h4 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h4><ul><li>Throwable是所有异常和错误的根(超类)</li></ul><h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><ul><li>代表编译时间和系统错误，程序发生的不可控或者不可处理的错误</li><li>发送错误的时候，最好的做法是立刻终止程序的执行，而且Error以及子类的错误都不用捕获抛出</li><li>Error由Java虚拟机生成并抛出，包括动态链接失败，虚拟机错误等。程序对其不做处理。</li></ul><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><ul><li>一般将Exception异常分配两类：Checked异常和Runtime异常<h5 id="Checked异常"><a href="#Checked异常" class="headerlink" title="Checked异常"></a>Checked异常</h5></li><li>Checked异常是指可以被处理的异常，程序中需要手动显式处理Checked异常，否则会导致在编译期就发生异常而无法编译。</li><li>处理Checked类异常一般有两种方法：<ol><li>确定已知的异常之后，采用<code>try...catch</code>的方式捕获可能出现的异常</li><li>也可以在方法定义的时候，在后面加上<code>throws exceptionName</code>的方式来抛出异常<h5 id="Runtime异常"><a href="#Runtime异常" class="headerlink" title="Runtime异常"></a>Runtime异常</h5></li></ol></li><li>也指非检查异常，例如除数是0或者数组越界的异常，产生频繁，如果处理会降低效率，所以这类异常交由系统自动检测并将他们交给缺省的异常处理程序</li><li>注意：这类异常并非不可以捕获，如果必须，也可以捕获处理</li></ul><h4 id="Java-异常处理的误区和经验总结"><a href="#Java-异常处理的误区和经验总结" class="headerlink" title="Java 异常处理的误区和经验总结"></a>Java 异常处理的误区和经验总结</h4><ul><li>对于异常捕获的finally区域，应该尽量避免在 finally 块中抛异常或者包含 return 语句。否则会影响try或者catch部分程序的运行，因为在 finally 块中抛出的任何异常都会覆盖掉在其前面由 try 或者 catch 块抛出异常。包含 return 语句的情形相似,实例代码在gist中。<ol><li>try-catch 块与 finally 块同时抛异常–&gt; <a href="https://gist.github.com/liangqian/0bcaa6d3b775d24cf53e20ac651935df" target="_blank" rel="noopener">try-catch 块与 finally 块同时抛异常</a></li><li>try-catch 块与 finally 块同时包含 return 语句–&gt;<a href="https://gist.github.com/liangqian/b63f6a658a0ed04f81caf2ddd0cb7263" target="_blank" rel="noopener">try-catch 块与 finally 块同时包含 return 语句</a></li></ol></li><li>参考：<a href="https://www.ibm.com/developerworks/cn/java/j-lo-exception-misdirection/" target="_blank" rel="noopener">Java 异常处理的误区和经验总结</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己对Java堆和栈的理解</title>
      <link href="/archives/199ee4b3.html"/>
      <url>/archives/199ee4b3.html</url>
      
        <content type="html"><![CDATA[<h4 id="预备知识：线程和进程"><a href="#预备知识：线程和进程" class="headerlink" title="预备知识：线程和进程"></a>预备知识：线程和进程</h4><ul><li>进程：进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是进行资源分配和调度的一个独立单位</li><li>线程：线程是进程的一个实体，是CPU进行调度和分派的基本单位，是比进程更小的能独立运行的基本单位，但是线程不能独立运行，需要在应用程序中控制执行<ul><li>线程基本自己不拥有系统资源，只拥有一点在运行中必不可少的资源(程序计数器，一组寄存器和栈)，但是它可以和进程下的其他的线程共享该进程所有的资源</li><li>一个线程可以创建和撤销其他线程，同一个进程中可以并发执行多个线程(多线程)</li></ul></li></ul><h4 id="操作系统角度中的堆和栈"><a href="#操作系统角度中的堆和栈" class="headerlink" title="操作系统角度中的堆和栈"></a>操作系统角度中的堆和栈</h4><ul><li>堆是应用程序在运行的时候，请求操作系统分配的内存空间，运行过程中也可以向系统申请额外的空间，但是用完之后，需要进行回收，不然就会导致内存泄漏</li><li>栈是线程独有的内存空间，保存其运行状态和局部自动变量。栈在线程初始化的时候创建，每个栈都是相互独立，因此栈是线程安全。操作系统在切换线程的时候会自动切换栈。</li></ul><h4 id="Java中的堆和栈"><a href="#Java中的堆和栈" class="headerlink" title="Java中的堆和栈"></a>Java中的堆和栈</h4><ul><li>内存分配策略：程序运行的内存分配策略有三种，分别是静态的，栈式的，堆式的。<ol><li>静态存储分配：在编译期就能确定每个数据目标在运行时所需要的存储空间需求，因而在编译时就能给他们分配所需的内存空间。这种策略要求在程序代码中不允许有可变数据结构，不允许有嵌套和递归的结构出现，否则会导致编译程序无法准备计算存储空间需求</li><li>栈式存储分配(动态)：和静态分配策略相反，程序在对数据区的需求在编译期无法预知，而在运行时能够确定的内存分配使用栈式存储分配策略。但是规定在运行中进入一个程序模块时,必须知道该程序模块所需的数据区大小才能够为其分配内存。和数据结构的栈一样，按照先进后出的原则进行分配</li><li>堆式存储分配：堆式存储分配策略是以上两个分配策略的补充，静态存储分配要求在编译期就能知道所有变量的存储需求，栈式存储要求在运行进入程序入口时就必须知道变量的存储要求，而堆式则专门针对静态存储分配策略和栈式存储分配策略无法确定存储要求的数据结构进行内存分配，比如可变长度串，或者对象实例。堆由大片的可利用块或者空闲块组成，堆中的内存可以按照任意的顺序分配和释放</li></ol></li><li>Java中的堆和栈<ul><li>Java把内存划分为两类：栈内存、堆内存</li><li>栈内存：在函数中定义的一些基本类型的变量和对象的引用都由栈内存进行分配内存空间，当分配的空间超过了变量的作用域之后，java会释放该变量分配的内存空间。</li><li>堆内存：主要用于存储new创建的对象和数组。在堆中创建的数组或者对象还可以在栈中创建一个特性变量，让这个变量的取值指向堆中某个对象或者数组在堆中的内存首地址，栈中的这个变量就成了堆中对象或者数组 的引用变量。在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理。</li></ul></li><li>Java中堆和栈的对比<ol><li>Java的堆是一个运行时数据区，优势是可以动态分配内存大小，生存期也不必事先告诉编译器，因为是在运行时动态分配内存的，事后Java的垃圾回收机制也会回收那些不使用的内存数据，但缺点是，由于要在运行时动态分配内存，存取速度较慢。 </li><li>栈的优势是，存取速度比堆要快，仅次于寄存器，栈数据可以共享。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。栈中主要存放一些基本类型的变量(,int, short, long, byte, float, double, boolean, char)和对象句柄。<br>栈有一个很重要的特殊性，就是存在栈中的数据可以共享。假设我们同时定义：<br><center><code>int a = 2</code></center><br><center><code>int b = 2</code></center><br>编译器先处理<code>int a = 2</code>，首先在栈中创建一个变量为a的引用，然后在栈中查找是否有值为2的数据块，如果已经有值为2 的数据块，则直接将变量a的引用指向值为2 的数据块，否则将数据2存入新建的数据块，并将a指向2。同理，对处理<code>int b = 2</code>语句的时候，也会经过必要的检测，检测栈中是否已经存在值为2的数据块。这样就出现了变量a、b同时指向2的情况。而再令<code>a=4</code>，修改a的值的时候，会重新在栈中检查\创建值为4的数据块，再将a重新指向4.因此，在这种数据共享的前提下，一个变量数值改变，不会影响都另一个变量的数值。<br>注意：这种数据的共享和两个对象的引用同时指向一个对象的这种共享不同，因为一个对象的变量修改，则直接修改变对象的内部状态，会影响到另一个对象的引用变量。</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> TakeDown </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务管理</title>
      <link href="/archives/762945f0.html"/>
      <url>/archives/762945f0.html</url>
      
        <content type="html"><![CDATA[<h4 id="什么是事务："><a href="#什么是事务：" class="headerlink" title="什么是事务："></a>什么是事务：</h4><ul><li><p>事务是指逻辑上的一组操作，这组操作要么成功，要么失败</p></li><li><p>事务的四大特性：</p><ul><li>原子性：指的是事务中不可分割的工作单位，事务中的操作，要么都发生，要么都不发生</li><li>隔离性：多个用户并发访问数据库的时候，一个用户的事务不能被其他用户的事务干扰，多个并发事务之间的数据要互相隔离。</li><li>一致性：事务执行的前后数据的完整性必须一致</li><li>持久性：一个事务一旦被提交，它对数据库中的修改是永久的，即使数据库故障也不会产生影响</li></ul></li></ul><h4 id="Spring事务管理高层抽象的三个接口"><a href="#Spring事务管理高层抽象的三个接口" class="headerlink" title="Spring事务管理高层抽象的三个接口"></a>Spring事务管理高层抽象的三个接口</h4><ol><li>事务管理器(PlatformTransactionManager):主要进行事务管理，而后面的定义信息，运行状态是协助管理的字段或者方法. PlatformTransactionManager单纯是一个接口类，具体的实现类会细分到不同的事务管理实现类</li><li>事务定义信息(TransactionDefinition):隔离、传播、超时、只读</li><li>事务具体运行状态(TransactionStatus)</li></ol><ul><li><p>安全性问题</p><ul><li>脏读：一个事务读取了另一个事务改写但未提交的数据，如果这些数据被回滚，则读取到的数据无效</li><li>不可重复读：在同一个事务中，多次读取同一数据返回的结果有所不同</li><li>幻读：一个事务读取了几行数据之后，另一个事务插入几行，幻读就发生了。再后来的查询中，第一个事务就会发现一些原来没有的数据记录</li></ul></li><li><p><code>TransactionDefinition</code>事务隔离级别：</p><ol><li>READ_UNCOMITED:允许你读取还没提交的改变了的数据，可能会出现脏，幻，不可重复读</li><li>READ_COMITED:允许在并发事务已经提交后读取。可防止脏读，但是幻读和不可重复读还会发生</li><li>REPEATABLE_READ:对相同字段的多次读取是一致的，除非数据被事务本身改变。可防止脏读、不可重复读，但幻读仍然可能发生</li><li>SERIALIABLE:完全服从ACID的隔离级别，确保不发生脏读，幻读和不可重复读。它是在所有的隔离级别中最慢的，他是典型的通过完全锁定在事务中涉及的数据表来完成</li></ol></li><li><code>TransactionDefinition</code>事务的传播行为:主要是为了解决业务层之间的方法(本来就有独自的事务)调用的问题<ol><li>PROPAGATION_REQUIRED:支持当前的事务，如果不存在，则新建事务</li><li>PROPAGATION_SUPPORTS:支持当前事务，如果不存在，则不使用事务</li><li>PROPAGATION_MANATORY:支持当前事务，如果不存在，则抛出异常</li><li>PROPAGATION_REQUIRE_NEW:如果当前有事务，则挂起，创建一个新的事务</li><li>ROPAGATION_NOT_SUPPORTED:以非事务方式运行，如果有事务，则挂起当前事务</li><li>ROPAGATION_NEVER：以非事务的方式运行，如果有事务，则抛出异常</li><li>ROPAGATION_NESTED：如果当前事务存在，则使用嵌套事务执行</li><li>分类归纳：1<em>、2、3可以归为一类，保持互相调用的方法的事务一致；4</em>、5、6归为一类，保持两个方法操作不在一个事务中；7为嵌套事务，一个方法执行完成，设置保存点，如果后续方法出现异常，则返回到保存点或者起点等</li></ol></li></ul><h4 id="Spring-支持两种类型的事务管理"><a href="#Spring-支持两种类型的事务管理" class="headerlink" title="Spring 支持两种类型的事务管理"></a>Spring 支持两种类型的事务管理</h4><ul><li><p>编程试事务管理(代码中使用TransactionTemplate，具有灵活性却难以维护)</p><ol><li>在需要使用的service类中使用TransactionTemplate</li><li>TransactionTemplate依赖DataSourceTransactionManager</li><li>DataSourceTransactionManager依赖DataSource构造</li><li>在类中用代码进行事务管理：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void transfer(final String out,final String in,final Double money) &#123;</span><br><span class="line"></span><br><span class="line">       transactionTemplate.execute(new TransactionCallbackWithoutResult() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) &#123;</span><br><span class="line">               accountDao.outMoney(out,money);</span><br><span class="line">               int i = 1 / 0;    //throw execption then broken</span><br><span class="line">               accountDao.inMoney(in,money);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>声明式事务管理(基于AOP配置XML的方式实现，从业务代码中分离出事务管理)</p><ol><li><p>基于TransactionProxyFactory的方式：通过增强需要进行事务管理的目标类，将被代理过的service注入代替原来的目标接口，进行调用即可产生事务管理效果。但这种实现方式如果需要进行事务管理的类太多，则操作会繁琐。XML的bean类配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置业务层的代理--&gt;</span><br><span class="line">    &lt;bean id=&quot;accountProxyService&quot; class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--配置代理增强的目标对象--&gt;</span><br><span class="line">        &lt;property name=&quot;target&quot; ref=&quot;accountService&quot;/&gt;</span><br><span class="line">        &lt;!--注入事务管理器--&gt;</span><br><span class="line">        &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot;/&gt;</span><br><span class="line">        &lt;!--注入事务属性--&gt;</span><br><span class="line">        &lt;property name=&quot;transactionAttributes&quot;&gt;</span><br><span class="line">            &lt;props&gt;</span><br><span class="line">                &lt;!--</span><br><span class="line">                prop的格式:</span><br><span class="line">                    PROPAGATION :事务的传播属性</span><br><span class="line">                    ISOLATION    :事务的隔离级别</span><br><span class="line">                    readOnly     : 只读（不可以发生修改，插入，删除等操作）</span><br><span class="line">                    -Exception   :发生哪些异常回滚事务</span><br><span class="line">                    +Exception   :发生哪些异常不回滚</span><br><span class="line">                --&gt;</span><br><span class="line">                &lt;prop key=&quot;transfer&quot;&gt;PROPAGATION_REQUIRED,+java.lang.ArithmeticException&lt;/prop&gt;</span><br><span class="line">            &lt;/props&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>基于AspectJ的XML方式： 通过AOP进行切点上异常监控来进行事务管理。可以借助AOP的横向切入点的方式来进行所有的业务层代码的事务管理,而且业务层代码也不会出现设计事务管理的相关代码。配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--声明式事务管理的配置：配置事务通知(配置增强)--&gt;</span><br><span class="line">    &lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">            &lt;!--监控方法支持通配符配置--&gt;</span><br><span class="line">            &lt;!--</span><br><span class="line">                propagation      :事务传播行为</span><br><span class="line">                isolation        :事务隔离级别</span><br><span class="line">                read-only        :只读</span><br><span class="line">                rollback-for     :发生哪些异常回滚</span><br><span class="line">                no-rollback-for  :发生哪些异常不回滚</span><br><span class="line">                timeout          :超时信息</span><br><span class="line">            --&gt;</span><br><span class="line">            &lt;tx:method name=&quot;transfer*&quot; propagation=&quot;REQUIRED&quot;  /&gt;</span><br><span class="line">        &lt;/tx:attributes&gt;</span><br><span class="line">    &lt;/tx:advice&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置AOP切面--&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!--配置切入点--&gt;</span><br><span class="line">        &lt;aop:pointcut id=&quot;pointCut1&quot; expression=&quot;execution(* info.cloversoulmate.service.AccountService+.*(..))&quot;/&gt;</span><br><span class="line">        &lt;!--配置切面--&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;pointCut1&quot;/&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></li><li><p>基于注解形式的事务管理：在目标业务类中注解生效，实现事务管理。</p></li></ol><ul><li>配置文件中开启事务管理器的注解事务：</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--给事务管理器开启注解事务--&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br></pre></td></tr></table></figure><ul><li>在类的头部加上注解，并配置相关属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 注解中的属性根据需求情况配置在注解括号里面，如果不配置注解属性，会按照默认方式进行</span><br><span class="line"> * propagation  :事务传播行为</span><br><span class="line"> * isolation    ：事务隔离级别</span><br><span class="line"> * readOnly     ：只读</span><br><span class="line"> * rollbackFor  ：发生哪些异常回滚</span><br><span class="line"> * noRollbackFor：发生哪些异常不回滚</span><br><span class="line"> * */</span><br><span class="line">@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT,readOnly=false)</span><br><span class="line">public class AccountServiceImpl implements AccountService &#123;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类和接口的区别</title>
      <link href="/archives/3e6ff0a8.html"/>
      <url>/archives/3e6ff0a8.html</url>
      
        <content type="html"><![CDATA[<ul><li>一个实现类只能继承一个抽象类，但可以实现多个接口</li><li>抽象类可以有构造函数，接口没有构造函数</li><li>抽象类可以有普通的成员变量，接口没有普通的成员变量</li><li>抽象类中可以没有抽象方法，有带方法体的普通方法，接口中都是抽象方法(默认抽象，不用加abstract关键字)</li><li>抽象类可以有静态方法，静态代码块；但是接口中不能有静态方法\代码块</li><li>抽象类中方法的权限修饰符可以是public、protected、default；接口只能是public</li><li>抽象类和接口都可有静态成员变量,抽象类中静态成员变量访问类型任意，接口只能public static final(默认)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables防火墙及其命令</title>
      <link href="/archives/6c6825f6.html"/>
      <url>/archives/6c6825f6.html</url>
      
        <content type="html"><![CDATA[<h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><ul><li>iptables命令是Linux上常用的防火墙软件，是netfilter项目的一部分。可以直接配置，也可以通过许多前端和图形界面配置。 </li><li>iptables防火墙可以用于创建过滤(filter)与NAT规则。所有Linux发行版都能使用iptables，因此理解如何配置iptables将会帮助你更有效地管理Linux防火墙。</li></ul><h4 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h4><ul><li><p>语法</p><ul><li><code>iptables (选项) (参数)</code></li><li><code>iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d目标IP/目标子网&gt; --dport 目标端口 -j 动作</code></li></ul></li><li><p>选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-t&lt;表&gt;：指定要操纵的表； </span><br><span class="line">-A：向规则链中添加条目； </span><br><span class="line">-D：从规则链中删除条目； </span><br><span class="line">-i：向规则链中插入条目； </span><br><span class="line">-R：替换规则链中的条目； </span><br><span class="line">-L：显示规则链中已有的条目； </span><br><span class="line">-F：清楚规则链中已有的条目； </span><br><span class="line">-Z：清空规则链中的数据包计算器和字节计数器； </span><br><span class="line">-N：创建新的用户自定义规则链； </span><br><span class="line">-P：定义规则链中的默认目标； </span><br><span class="line">-h：显示帮助信息； </span><br><span class="line">-p：指定要匹配的数据包协议类型； </span><br><span class="line">-s：指定要匹配的数据包源ip地址；</span><br><span class="line">-j&lt;目标&gt;：指定要跳转的目标； </span><br><span class="line">-i&lt;网络接口&gt;：指定数据包进入本机的网络接口； </span><br><span class="line">-o&lt;网络接口&gt;：指定数据包要离开本机所使用的网络接口。</span><br></pre></td></tr></table></figure></li><li><p>表名(4个)：</p><ul><li>filter：包过滤，用于防火墙规则</li><li>mangle：数据表修改(Qos),用于实现服务质量</li><li>nat：用于NAT功能(端口映射，地址映射等)</li><li>raw：优先级最高，设置raw时一般是为了不再让iptables做数据包的链接跟踪处理，提高性能</li></ul></li><li>表在数据进入服务器到输出的流程<center><img src="http://qvm.lays3721.top/iptables%E8%A1%A8%E5%9C%A8%E6%95%B0%E6%8D%AE%E5%8C%85%E6%B5%81%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8.gif" alt="数据传输"><br></center></li><li>规则链(5个)：<ul><li><code>PREROUTING</code>链：数据包进入路由表之前</li><li><code>INPUT</code>链：处理输入数据包，通过路由表目的地为本机</li><li><code>FORWARD</code>链：通过路由表之后，目的地不是本机</li><li><code>OUTPUT</code>链：处理输出数据包，由本机产生，向外转发</li><li><code>POSTROUTING</code>链：发送到网卡接口之前</li></ul></li><li>表与规则链的对应关系<center><br><img src="http://qvm.lays3721.top/iptables%E8%A1%A8%E5%9C%A8%E6%95%B0%E6%8D%AE%E5%8C%85%E6%B5%81%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8.gif" alt="表与规则链的对应关系"><br></center></li><li>动作：<ul><li>ACCEPT：接收数据包</li><li>DROP：丢弃数据包</li><li>REDIRECT：重定向，映射，透明代理</li><li>SNAT：源地址转换</li><li>DNAT：目的地址转换</li><li>MASQUERADE：IP伪装</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 修饰符`#{}`和`${}`的区别</title>
      <link href="/archives/1db25542.html"/>
      <url>/archives/1db25542.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis-修饰符-和-的区别是什么"><a href="#Mybatis-修饰符-和-的区别是什么" class="headerlink" title="Mybatis 修饰符#{}和${}的区别是什么"></a>Mybatis 修饰符<code>#{}</code>和<code>${}</code>的区别是什么</h2><ul><li>mybatis 中使用 sqlMap 进行 sql 查询时，经常需要动态传递参数，mybatis提供了两种传输数据的修饰方式：<code>#{}</code>和<code>${}</code></li></ul><h4 id="方式"><a href="#方式" class="headerlink" title="#{}方式"></a>#{}方式</h4><ul><li><code>#{}</code>将传入的数据当作是一个字符串，对传入的数据加上双引号</li><li>如：<code>where id = #{userId}</code>，如果传入10，则解析sql的时候解析成 <code>wherer id = &#39;10&#39;</code></li></ul><h4 id="方式-1"><a href="#方式-1" class="headerlink" title="${}方式"></a>${}方式</h4><ul><li><code>${}</code>传入的数据会直接显示生成在sql中，没有任何修饰符，直接替换成变量的值</li><li>如：<code>where id = #{userId}</code>，如果传入10，则解析sql的时候解析成 <code>wherer id = 10</code></li></ul><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><ul><li>动态解析阶段的区别：mybatis在对sql语句进行预编译之前，会对sql进行动态解析，解析为一个Boundsql对象，也是在此对动态sql进行处理。对于sql语句(<code>select * from user where name = #{name}\${name};</code>)解析表现如下：<ol><li><code>#{}</code>解析为一个jdbc预编译语句(<code>prepared statement</code>)的参数标记符(<code>?</code>)；如：<code>select * from user where name = ?;</code></li><li><code>${}</code>在解析的时候，仅仅为一个存粹的字符串替换，在动态sql解析阶段会进行变量替换；当上面例子中的sql传入参数(<code>qscom</code>)的时候，sql被解析为：<code>select * from user where name = qscom;</code></li></ol></li><li>安全性：根据sql注入的原理，<code>#{}</code>在传入数据中加上双引号修饰符，能一定程度上降低sql注入的风险，而<code>${}</code>对传入的数据没有任何的修饰隔离，完全无法避免sql注入</li><li>使用习惯：<code>${}</code>方式一般用户传入动态的数据库名，表名称、列名称等；<code>#{}</code>一般用于具体数据筛选匹配</li><li>实际生产中，除了安全性原因，能避免使用<code>${}</code>方式传数据就避免之外，从性能上，<code>#{}</code>解析的相同的预编译sql可以重复利用</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC SQL预编译</title>
      <link href="/archives/8bdd2473.html"/>
      <url>/archives/8bdd2473.html</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC-SQL预编译"><a href="#JDBC-SQL预编译" class="headerlink" title="JDBC SQL预编译"></a>JDBC SQL预编译</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>SQL预编译是指数据库驱动在发送sql语句和参数给DBMS之前对SQL语句进行编译，这样DBMS在执行SQL时，就不需要重新编译。<h4 id="为什么要预编译？"><a href="#为什么要预编译？" class="headerlink" title="为什么要预编译？"></a>为什么要预编译？</h4></li><li>JDBC使用<code>PreparedStatement</code>对象来进行预编译语句<ol><li>预编译可以优化sql的执行：预编译之后的sql多数情况下可以直接执行，DBMS不需要再次编译；对于越复杂的SQL，编译的成本和复杂度就越高，而预编译可以将多次重复操作，合并多次操作为一次操作</li><li>预编译语句可以重复利用：把SQL预编译之后的对象(PreparedStatement )缓存下来，下次对于同一个sql，直接可以使用这个缓存的对象执行，不需要重复</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 如何获取保存对象之后生成的自增主键?</title>
      <link href="/archives/efb286cc.html"/>
      <url>/archives/efb286cc.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis-使用Insert保存对象，如何获取保存对象之后生成的自增主键"><a href="#Mybatis-使用Insert保存对象，如何获取保存对象之后生成的自增主键" class="headerlink" title="Mybatis 使用Insert保存对象，如何获取保存对象之后生成的自增主键?"></a>Mybatis 使用Insert保存对象，如何获取保存对象之后生成的自增主键?</h2><ol><li><p>配置sqlmap：在insert的sqlmap中配置生成自动生成主键参数，并配置对应的主键字段名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=”insertname” usegeneratedkeys=”true” keyproperty=”id”&gt; </span><br><span class="line">     insert into names (name) values (#&#123;name&#125;) </span><br><span class="line">    &lt;/insert&gt;</span><br></pre></td></tr></table></figure></li><li><p>在Java代码中调用Mapper方法保存了目标对象，主键数值会映射到对象中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name name = new name(); </span><br><span class="line">name.setname(“qscom”); </span><br><span class="line">int rows = mapper.insertname(name); </span><br><span class="line">system.out.println(&quot;rows inserted = &quot; + rows); //返回执行操作的行数</span><br><span class="line">system.out.println(&quot;generated key value = &quot; + name.getid());//打印生产的自增ID数值</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程基本概念</title>
      <link href="/archives/7ccdc859.html"/>
      <url>/archives/7ccdc859.html</url>
      
        <content type="html"><![CDATA[<h4 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h4><ul><li>多个进程的内部数据和状态都是完全独立的，而多线程是共享一块内存空间和一组系统资源，有可能会互相产生影响。</li><li>线程本身的数据通常只有寄存器数据，而程序执行时使用堆栈，所以线程的切换比进程的切换负担成本要小。</li><li>线程的目的是“最大限度地利用CPU资源”，当某个线程的处理不需要占用CPU而只需要和IO打交道的时候，让需要占用CPU资源的其他线程有机会获得CPU资源。</li></ul><h4 id="多线程实现"><a href="#多线程实现" class="headerlink" title="多线程实现"></a>多线程实现</h4><ul><li>实现方式有两种，一种是继承Thread类来实现run()方法，在run()方法中实现需要进行的多线程任务，第二种是实现Runable接口，重写run()方法处理多线程任务。这两种方法都是需要通过start()方法启动线程，然后让start()方法准备好系统资源，再去调用并执行run()方法完成线程任务。</li><li>源码上，Thread也是在实现了Runable接口的基础上实现了Runable的run()方法</li><li>两种实现方法根据实际情况选择，如果该类已经继承了其他方法(单继承性)，只能通过实现Runable接口来进程多线程任务处理。</li></ul><h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><ul><li>如图：<center><br><img src="http://qvm.lays3721.top/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="线程的生命周期"><br></center></li><li>线程的生命周期分为五个阶段：创建状态、就绪状态、运行状态、阻塞状态、消亡状态。系统需要将多个线程在这五个状态之间切换来实现最大限度的运用系统资源<br><center><br><img src="http://qvm.lays3721.top/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png" alt="线程状态转换图"><br></center><ol><li>新建状态：当程序使用<code>new</code>关键字创建一个线程之后，该线程就处于新建状态，此时仅由JVM分配内存，并初始化其成员变量的值</li><li>就绪状态：当线程对象调用<code>start()</code>方法之后，该线程就处于就绪状态。Java虚拟机会为其创建方法，调用栈和程序计数器，等待线程调度器调度运行</li><li>运行状态：如果处于就绪状态的线程获得了CPU资源，开始执行<code>run()</code>方法的线程执行体，则该线程处于运行状态</li><li>阻塞状态：当运行中的线程失去了CPU资源之后，便进入了阻塞状态。如果需要从阻塞状态进入就绪状态，需要等待线程调度器调度分配才能返回到就绪状态<ul><li>线程进入阻塞状态的条件<ul><li>线程调用<code>sleep()</code>方法主动放弃CPU资源</li><li>线程调用了阻塞式的IO方法，在该方法返回之前，该线程处于被阻塞状态</li><li>线程在等待通知(<code>notify()</code>)</li><li>线程被调用<code>suspend()</code>方法进行挂起</li><li>线程试图获得同步监视器，但是监视器正在被其他线程使用中</li></ul></li><li>解除阻塞状态线程：与导致阻塞的条件相反即可解除阻塞状态</li></ul></li><li>消亡状态：当线程对象的<code>run()</code>和<code>call()</code>方法执行完成，线程正常结束；如果线程抛出一个未捕获的<code>Execption</code>或者<code>Error</code>、直接调用该线程的<code>stop()</code>方法强行终止线程的时候，线程也会进入消亡状态，只不过这属于非正常方式结束。注意，强行执行<code>stop()</code>的方式来结束线程容易导致死锁，不推荐使用</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程关键字volatile和synchronized区别</title>
      <link href="/archives/bd778d6e.html"/>
      <url>/archives/bd778d6e.html</url>
      
        <content type="html"><![CDATA[<h4 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a><code>volatile</code>关键字</h4><ul><li>在JVM内存模型中，有主内存一说(main memory)，每个线程都有自己的memory(如寄存器)。为了性能，一个性能需要在自己的memory中保持要访问的变量副本。这样就会出现某个瞬间，线程memory数据尚未同步的时候，可能会出现每个线程内的变量副本数据不一致，或者与main memory不一致的问题。</li><li>用于多线程，同步变量。线程为了提高效率，将成员变量(A)拷贝了一份(B)，某些线程中对A的访问其实就是对B这个copy体的访问。在JVM管理下某个动作才会同步A与B，这就存在A与B的不一致的情况。<code>volatile</code>就是用来避免这情况。在JVM管理中，<code>volatile</code>所修饰的变量不保留拷贝，直接访问主内存(A)</li></ul><h4 id="synchronized关键字-加锁"><a href="#synchronized关键字-加锁" class="headerlink" title="synchronized关键字(加锁)"></a><code>synchronized</code>关键字(加锁)</h4><ul><li>多线程在共享同一片存储空间的同时，带来了方便，也带来了范围内的冲突的可能性，出现同一个数据同时被多个线程访问的情况。<code>synchronized</code>关键字可以解决这个问题，被<code>synchronized</code>修饰的方法或者代码块或者类，在同一个时间片内只能有一个访问者获得访问权限</li><li>之前也有一个笔记是写关于<code>synchronized</code>锁的描述：<a href="http://royleo.xyz/2016/10/14/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E5%9F%BA%E7%A1%80%E4%B9%8Bsynchronized%E5%90%8C%E6%AD%A5/" target="_blank" rel="noopener">synchronized</a></li><li><code>synchronized</code>修饰的方法、代码块、类具有原子性</li><li>Java的每个对象都有一个锁(Lock)或者叫做监视器，当访问某个对象的<code>synchronized</code>方法或者是代码块，都意味着将该对象上说，此时其他线程无法访问，直至到锁被释放。如果一个对象有多个带<code>synchronized</code>锁的方法，在其中一个锁未被释放之前，其他线程也无法访问改对象的任何带<code>synchronized</code>的方法。</li></ul><h4 id="synchronized和volatile都具有同步线程间数据的能力"><a href="#synchronized和volatile都具有同步线程间数据的能力" class="headerlink" title="synchronized和volatile都具有同步线程间数据的能力"></a><code>synchronized</code>和<code>volatile</code>都具有同步线程间数据的能力</h4><ul><li><code>volatile</code>同步主内存和各个副本内存里面被<code>volatile</code>所修饰的变量的数据，保证被修饰的变量在所有线程中必须是同步的，不会出现数据冲突的情况，任何线程改变了数值，其他线程马上能获得最新的数据</li><li><code>synchronized</code>同样具备同步线程间数据的能力，先看<code>synchronized</code>同步数据的步骤：<ol><li>线程获得请求监控对象的对象锁(如果被锁，则等待锁被释放)</li><li>线程内的旧数据被消除，从主内存中读取当前最新的数据</li><li>执行<code>synchronized</code>内的代码</li><li>将数据改变情况写入到主内存区域中</li><li>释放监控对象的对象锁</li></ol></li><li>被<code>synchronized</code>修饰的代码块或者方法都会等待执行完成才会释放锁权限，保证了其原子性</li></ul><h4 id="synchronized和volatile比较"><a href="#synchronized和volatile比较" class="headerlink" title="synchronized和volatile比较"></a><code>synchronized</code>和<code>volatile</code>比较</h4><ul><li><code>volatile</code>主要用于多个线程感知实例变量被更改的场合，从而使得各个线程获得最新数据。它强制线程每次从主内存中读取变量，保证了数据的可见性</li><li><code>volatile</code>只是轻量级，只能修饰变量；<code>synchronized</code>还可以修饰方法、代码块或者类对象</li><li><code>volatile</code>只能保证数据的可见性，不能用来同步，因为多个线程并发访问<code>volatile</code>修饰的变量不会阻塞</li><li><code>synchronized</code>不仅保证了可见性，还保证了数据的原子性</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql连接查询</title>
      <link href="/archives/466fafff.html"/>
      <url>/archives/466fafff.html</url>
      
        <content type="html"><![CDATA[<h3 id="连接的分类-功能性分类"><a href="#连接的分类-功能性分类" class="headerlink" title="连接的分类(功能性分类)"></a>连接的分类(功能性分类)</h3><ul><li>左连接：获取左表所有记录，如果右表没有匹配的数据，用null填充至与左表记录数持平；</li><li>右连接：获取右表所有记录，数据量以右表为主，填充方法与左连接相同；</li><li>内连接：获取两表中满足匹配关系的关联记录，不包括不存在的数据</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><code>select * from tableA left(right/inner) join tableB on tableA.ID compopr tableB.ID;</code></li><li>说明：tableA/B 是两联合查询的表；compopr 是比较运算符(=,&gt;,&lt;,&gt;=,&lt;=,&lt;&gt;)</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h5 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h5><ul><li>两个数据表，表中有能管理数据的字段值，并且两表数据量不一致。</li><li><p>创建表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE a (aID int( 1 ) AUTO_INCREMENT PRIMARY KEY , aNum char( 20 ))</span><br><span class="line">CREATE TABLE b(bID int( 1 ) NOT NULL AUTO_INCREMENT PRIMARY KEY ,bName char( 20 ))</span><br></pre></td></tr></table></figure></li><li><p>数据准备：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO a VALUES ( 1, &apos;a20050111&apos; ) , ( 2, &apos;a20050112&apos; ) , ( 3, &apos;a20050113&apos; ) , ( 4, &apos;a20050114&apos; ) , ( 5, &apos;a20050115&apos; ) ;</span><br><span class="line">INSERT INTO b VALUES ( 1, &apos; 2006032401&apos; ) , ( 2, &apos;2006032402&apos; ) , ( 3, &apos;2006032403&apos; ) , ( 4, &apos;2006032404&apos; ) , ( 8, &apos;2006032408&apos; )</span><br></pre></td></tr></table></figure></li></ul><h5 id="查询实验"><a href="#查询实验" class="headerlink" title="查询实验"></a>查询实验</h5><ol start="5"><li>左连接：<code>select * from a  left join b on a.aID=b.bID;</code>,查询结果如下；left join是以A表的记录为基础的,A可以看成左表,B可以看成右表,left join是以左表为准的.<center><img src="http://qvm.lays3721.top/l.png" alt="左连接查询结果"></center></li><li>右连接：<code>select * from a right join b on a.aID=b.bID;</code>,查询结果如下；和left join的结果刚好相反,这次是以右表(B)为基础的,A表不足的地方用NULL填充.<center><img src="http://qvm.lays3721.top/r.png" alt="右连接查询结果"><br></center></li><li>内连接(相等连接)：<code>select * from a inner join b on a.aID=b.bID;</code>；从查询结果可以看出，检索见过中只有满足匹配条件的数据，不满足的数据不会出现在结果中<center><img src="http://qvm.lays3721.top/i.png" alt="内连接查询结果"></center></li></ol><h3 id="用法拓展"><a href="#用法拓展" class="headerlink" title="用法拓展"></a>用法拓展</h3><ul><li>联合连接查询的时候，还可以增加where条件筛选语句，帮助更加精确查询定位数据</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring Bean学习Review</title>
      <link href="/archives/70e4edda.html"/>
      <url>/archives/70e4edda.html</url>
      
        <content type="html"><![CDATA[<h2 id="spring-Bean学习-amp-Review"><a href="#spring-Bean学习-amp-Review" class="headerlink" title="spring Bean学习&amp;Review"></a>spring Bean学习&amp;Review</h2><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><ul><li>公司重构项目主要基于SpringBoot，发现用了这么久的Spring，却还没有认真的总结过Bean的使用以及一些需要注意的东西，这里回头总结一下下<h4 id="关于Bean"><a href="#关于Bean" class="headerlink" title="关于Bean"></a>关于Bean</h4></li><li>Bean 是一个被实例化，组装，并通过 Spring IoC 容器所管理的对象</li><li>配置元数据<ul><li>基于XML的配置文件</li><li>基于注释的配置</li><li>基于Java的配置</li></ul></li><li>bean定义的下列属性：<ul><li>class :  强制性，指定用来创建的Bean类</li><li>name : s 指定特定的bean 标识符</li><li>scope :  指定由特定的 bean 定义创建的对象的作用域</li><li>properties :  注入依赖关系</li><li>initialization 方法 :  在 bean 的所有必需的属性被容器设置之后，调用回调方法。</li><li>destruction 方法 :  当包含该 bean 的容器被销毁时，使用回调方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- A simple bean definition --&gt;</span><br><span class="line">   &lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;</span><br><span class="line">       &lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- A bean definition with lazy init set on --&gt;</span><br><span class="line">   &lt;bean id=&quot;...&quot; class=&quot;...&quot; lazy-init=&quot;true&quot;&gt;</span><br><span class="line">       &lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- A bean definition with initialization method --&gt;</span><br><span class="line">   &lt;bean id=&quot;...&quot; class=&quot;...&quot; init-method=&quot;...&quot;&gt;</span><br><span class="line">       &lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- A bean definition with destruction method --&gt;</span><br><span class="line">   &lt;bean id=&quot;...&quot; class=&quot;...&quot; destroy-method=&quot;...&quot;&gt;</span><br><span class="line">       &lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- more bean definitions go here --&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="scope-作用域"><a href="#scope-作用域" class="headerlink" title="scope 作用域"></a>scope 作用域</h4><ul><li>singleton ： 该作用域将 bean 的定义的限制在每一个 Spring IoC 容器中的一个单一实例(默认)。</li><li>prototype ：该作用域将单一 bean 的定义限制在任意数量的对象实例。</li><li>request ： 该作用域将 bean 的定义限制为 HTTP 请求。只在 web-aware Spring ApplicationContext 的上下文中有效。</li><li>session ： 该作用域将 bean 的定义限制为 HTTP 会话。 只在web-aware Spring ApplicationContext的上下文中有效。</li><li>global-session ： 该作用域将 bean 的定义限制为全局 HTTP 会话。只在 web-aware Spring ApplicationContext 的上下文中有效。</li></ul><hr><h4 id="Bean-后置处理器"><a href="#Bean-后置处理器" class="headerlink" title="Bean 后置处理器"></a>Bean 后置处理器</h4><ul><li>重写BeanPostProcessor接口</li><li>BeanPostProcessor ：初始化 bean 的之前的处理逻辑</li><li>BeanPostProcessor ：初始化 bean 之后实现更复杂的逻辑<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.tutorialspoint;</span><br><span class="line">import org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line">import org.springframework.beans.BeansException;</span><br><span class="line">public class InitHelloWorld implements BeanPostProcessor &#123;</span><br><span class="line">   public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">      System.out.println(&quot;BeforeInitialization : &quot; + beanName);</span><br><span class="line">      return bean;  // you can return any other object as well</span><br><span class="line">   &#125;</span><br><span class="line">   public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">      System.out.println(&quot;AfterInitialization : &quot; + beanName);</span><br><span class="line">      return bean;  // you can return any other object as well</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;beanTeamplate&quot; abstract=&quot;true&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;message1&quot; value=&quot;Hello World!&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;message2&quot; value=&quot;Hello Second World!&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;message3&quot; value=&quot;Namaste India!&quot;/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;helloIndia&quot; class=&quot;com.tutorialspoint.HelloIndia&quot; parent=&quot;beanTeamplate&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;message1&quot; value=&quot;Hello India!&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;message3&quot; value=&quot;Namaste India!&quot;/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ul><li>父 bean 自身不能被实例化，因为它是不完整的，而且它也被明确地标记为抽象的。当一个定义是抽象的，它仅仅作为一个纯粹的模板 bean 定义来使用的，充当子定义的父定义使用</li></ul><hr><h4 id="注入内部Beans"><a href="#注入内部Beans" class="headerlink" title="注入内部Beans"></a>注入内部Beans</h4><ul><li>Inner beans 是在其他 bean 的范围内定义的 bean</li><li>在XML配置文件中将各个类之间的关系描述清楚<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line">   &lt;bean id=&quot;outerBean&quot; class=&quot;...&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;target&quot;&gt;</span><br><span class="line">         &lt;bean id=&quot;innerBean&quot; class=&quot;...&quot;/&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="注入集合"><a href="#注入集合" class="headerlink" title="注入集合"></a>注入集合</h4><ul><li>有时候需要引入多个值</li><li>Spring 提供四种集合类型的配置元素：List、set、map、props<br>|元素|描述|<br>|—|—|<br>|<code>&lt;List&gt;</code>|有助于连线，如 注入一列值，允许重复|<br>|<code>&lt;set&gt;</code>|有助于连线一组值，但不允许重复|<br>|<code>&lt;map&gt;</code>|可以用来注入键值对集合，其中，键，值可以是任何类型|<br>|<code>&lt;props&gt;</code>|可以用来注入键值对集合，其中，键，值都是字符串类型|</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis延迟加载</title>
      <link href="/archives/3170f59.html"/>
      <url>/archives/3170f59.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis延迟加载"><a href="#Mybatis延迟加载" class="headerlink" title="Mybatis延迟加载"></a>Mybatis延迟加载</h2><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><ul><li>resultMap可以实现高级映射（使用association、collection实现一对一及一对多映射），association、collection具备延迟加载功能</li><li>先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快</li></ul><h4 id="延迟加载配置"><a href="#延迟加载配置" class="headerlink" title="延迟加载配置"></a>延迟加载配置</h4><ul><li>mybatis默认没有开启延迟加载，需要在SqlMapConfig.xml中setting配置</li><li>在mybatis核心配置文件中配置：</li></ul><table><thead><tr><th>设置项</th><th>描述</th><th>允许值</th><th>默认值</th></tr></thead><tbody><tr><td><code>lazyLoadingEnabled</code></td><td>全局性设置懒加载</td><td><code>true</code>or<code>false</code></td><td><code>false</code></td></tr><tr><td><code>aggressiveLazyLoading</code></td><td>当设置为<code>true</code>时，懒加载的对象可能会被人任何懒加载属性全部加载,否则每个属性都按需加载</td><td><code>true</code>or<code>false</code></td><td><code>true</code></td></tr></tbody></table><ul><li>在配置文件中配置:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--全局配置参数，需要时再配置--&gt;</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;!--打开延迟加载的开关--&gt;</span><br><span class="line">    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;!--将积极加载改为消极加载即按需要加载--&gt;</span><br><span class="line">    &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="情景设定"><a href="#情景设定" class="headerlink" title="情景设定"></a>情景设定</h4><ul><li>如果查询订单并且关联查询用户信息。如果先查询订单信息即可满足要求，当我们需要查询用户信息时再查询用户信息。把对用户信息的按需去查询就是延迟加载</li><li><p>定义两个Mapper的方法对应的statement</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&apos;findOrderUserLazyLoading&apos; resultMap=&apos;OrdersUserLazyLoadingResultMap&apos;&gt;</span><br><span class="line">    select * from orders;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&apos;findUserById&apos; parameterType=&apos;int&apos; resultMap=&apos;User&apos;&gt;</span><br><span class="line">    select * from user where id = #&#123;value&#125;;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过resultMap的定义将延迟加载执行配置起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 延迟加载的resultMap --&gt;</span><br><span class="line">&lt;resultMap type=&quot;cn.itcast.mybatis.po.Orders&quot; id=&quot;OrdersUserLazyLoadingResultMap&quot;&gt;</span><br><span class="line">&lt;!--对订单信息进行映射配置 --&gt;</span><br><span class="line">&lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;user_id&quot; property=&quot;userId&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;number&quot; property=&quot;number&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;createtime&quot; property=&quot;createtime&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;note&quot; property=&quot;note&quot;/&gt;</span><br><span class="line">&lt;!-- 实现对用户信息进行延迟加载</span><br><span class="line">SELECT orders.*,</span><br><span class="line">(SELECT username FROM USER WHERE orders.user_id = user.id)username,</span><br><span class="line">(SELECT sex FROM USER WHERE orders.user_id = user.id)sex</span><br><span class="line">FROM orders</span><br><span class="line">--&gt;</span><br><span class="line">&lt;association property=&quot;user&quot; javaType=&quot;xyz.royleo.User&quot;</span><br><span class="line">select=&quot;xyz.royleo.mapper.UserMapper.findUserById&quot; column=&quot;user_id&quot;&gt;</span><br><span class="line">&lt;!-- 实现对用户信息进行延迟加载 --&gt;</span><br><span class="line">&lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></li><li><p>测试思路</p></li></ul><ol><li>执行上边mapper方法()findOrdersUserLazyLoading),内部去调用cn.itcast.mybatis.mapper.OrdersMapperCustom中的findOrdersUserLazyLoading只查询orders信息(单表)</li><li>在程序中去遍历上一步骤查询出的List<orders>，当我们调用Orders中的getUser方法时，开始进行延迟加载</orders></li><li>延迟加载，去调用UserMapper.xml中findUserbyId这个方法获取用户信息</li></ol><ul><li>如果不使用延迟加载呢？<ul><li>不使用mybatis提供的association及collection中的延迟加载功能，如何实现延迟加载？</li><li>方法如下：<ul><li>定义两个mapper方法</li></ul><ol><li>查询订单列表</li><li>根据id查询用户信息</li></ol><ul><li>实现思路：<ul><li>先去查询第一个mapper方法，获取订单列表</li><li>在程序中（service），按需去调用第二个mapper方法去查询用户信息</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java关键字与总结</title>
      <link href="/archives/fc53cc9d.html"/>
      <url>/archives/fc53cc9d.html</url>
      
        <content type="html"><![CDATA[<h2 id="关键字final与static总结"><a href="#关键字final与static总结" class="headerlink" title="关键字final与static总结"></a>关键字<code>final</code>与<code>static</code>总结</h2><h4 id="final"><a href="#final" class="headerlink" title="final"></a><code>final</code></h4><ul><li>概述：<code>final</code>有‘终态’，‘不可改变’之意，可以修饰非抽象类，非抽象成员方法和变量。但是有时候出于设计、效率和资源等方面的因素需要考虑阻止某些变量或者方法做出改变.</li><li><code>final</code>关键字主要用于修饰类，方法，变量或者参数上<ol><li><code>final</code>类：<ol start="2"><li>被<code>final</code>修饰的类，不能被继承，其中的成员方法不能被覆盖，默认都是<code>final</code>.</li><li>所以，在设计一个类的时候，如果该类在后来不会再进行扩展，那可以使用<code>final</code>关键字来定义</li></ol></li><li><code>final</code>方法<ol start="5"><li>能把方法锁定，防止任何继承类修改它的意义和实现</li><li>高效，编译器遇到调用<code>final</code>方法的时候会将其直接转入内嵌机制，提高执行效率</li></ol></li><li><code>final</code>参数：当<code>final</code>修饰函数的参数的时候，被修饰的参数可以被读取使用，但是不能改变参数的值</li><li><code>final</code>变量(常量)<ol start="8"><li>用<code>final</code>修饰的变量标识常量，一旦复制，就无法改变</li><li>在定义<code>final</code>变量的时候，什么的时候可以不赋值，但是在<code>final</code>变量被使用之前，必须要为其赋值才能被使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class Test3 &#123; </span><br><span class="line">        private final String S = &quot;final实例变量S&quot;; </span><br><span class="line">        private final int A = 100; </span><br><span class="line">        public final int B = 90; </span><br><span class="line">        public static final int C = 80; </span><br><span class="line">        private static final int D = 70; </span><br><span class="line">        public final int E; //final空白,必须在初始化对象的时候赋初值 </span><br><span class="line">        public Test3(int x) &#123; </span><br><span class="line">                E = x; </span><br><span class="line">        &#125; </span><br><span class="line">        public static void main(String[] args) &#123; </span><br><span class="line">                Test3 t = new Test3(2); </span><br><span class="line">                //t.A=101;    //出错,final变量的值一旦给定就无法改变 </span><br><span class="line">                //t.B=91; //出错,final变量的值一旦给定就无法改变 </span><br><span class="line">                //t.C=81; //出错,final变量的值一旦给定就无法改变 </span><br><span class="line">                //t.D=71; //出错,final变量的值一旦给定就无法改变 </span><br><span class="line">                System.out.println(t.A); </span><br><span class="line">                System.out.println(t.B); </span><br><span class="line">                System.out.println(t.C); //不推荐用对象方式访问静态字段 </span><br><span class="line">                System.out.println(t.D); //不推荐用对象方式访问静态字段 </span><br><span class="line">                System.out.println(Test3.C); </span><br><span class="line">                System.out.println(Test3.D); </span><br><span class="line">                //System.out.println(Test3.E); //出错,因为E为final空白,依据不同对象值有所不同. </span><br><span class="line">                System.out.println(t.E); </span><br><span class="line">                Test3 t1 = new Test3(3); </span><br><span class="line">                System.out.println(t1.E); //final空白变量E依据对象的不同而不同 </span><br><span class="line">        &#125; </span><br><span class="line">        private void test() &#123; </span><br><span class="line">                System.out.println(new Test3(1).A); </span><br><span class="line">                System.out.println(Test3.C); </span><br><span class="line">                System.out.println(Test3.D); </span><br><span class="line">        &#125; </span><br><span class="line">        public void test2() &#123; </span><br><span class="line">                final int a;     //final空白,在需要的时候才赋值 </span><br><span class="line">                final int b = 4;    //局部常量--final用于局部变量的情形 </span><br><span class="line">                final int c;    //final空白,一直没有给赋值.    </span><br><span class="line">                a = 3; </span><br><span class="line">                //a=4;    出错,已经给赋过值了. </span><br><span class="line">                //b=2; 出错,已经给赋过值了. </span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul><h4 id="static"><a href="#static" class="headerlink" title="static"></a><code>static</code></h4><ul><li>概述：<code>static</code>表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态<code>static</code>代码块，但是Java语言中没有全局变量的概念<ul><li>被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象</li><li>用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象市，不生成static变量的副本，而是类的所有实例共享同一个static变量</li></ul></li><li><code>static</code>主要用于修饰静态内部类，静态变量，静态方法，静态代码块<ol><li>静态内部类：它不能访问外部类的非静态成员</li><li><code>static</code>变量：<ol start="2"><li>变量分类：根据是否被<code>static</code>修饰，可将变量分类：静态变量和实例变量<ol start="3"><li>静态变量：在内存中只有一个拷贝，JVM只为其分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问，也可以通过实例对象访问(不推荐了)</li><li>实例变量：每创建一个实例，就会为实例变量分配一次内存，而且可以在内存中存在多个实例变量，互不影响</li></ol></li></ol></li><li><code>static</code>方法<ol start="6"><li>静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！</li></ol></li><li><code>static</code>代码块<ol start="8"><li>用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块</li><li>如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次</li></ol></li></ol></li></ul><h4 id="final与static配合使用"><a href="#final与static配合使用" class="headerlink" title="final与static配合使用"></a><code>final</code>与<code>static</code>配合使用</h4><ul><li>用<code>final</code>与<code>static</code>修饰的方法和变量具有<code>final</code>和<code>static</code>并集的效果，也可以理解为’全局变量’</li><li>被<code>final</code>与<code>static</code>修饰的变量，实例化之后不能再改变，但是对于容器类(ArrayList、HashMap)的实例变量，不可以改变容器变量的本身，但是容器中的对象可以修改。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class TestStaticFinal &#123; </span><br><span class="line">        private static final String strStaticFinalVar = &quot;aaa&quot;; </span><br><span class="line">        private static String strStaticVar = null; </span><br><span class="line">        private final String strFinalVar = null; </span><br><span class="line">        private static final int intStaticFinalVar = 0; </span><br><span class="line">        private static final Integer integerStaticFinalVar = new Integer(8); </span><br><span class="line">        private static final ArrayList&lt;String&gt; alStaticFinalVar = new ArrayList&lt;String&gt;(); </span><br><span class="line">        private void test() &#123; </span><br><span class="line">                System.out.println(&quot;-------------值处理前----------\r\n&quot;); </span><br><span class="line">                System.out.println(&quot;strStaticFinalVar=&quot; + strStaticFinalVar + &quot;\r\n&quot;); </span><br><span class="line">                System.out.println(&quot;strStaticVar=&quot; + strStaticVar + &quot;\r\n&quot;); </span><br><span class="line">                System.out.println(&quot;strFinalVar=&quot; + strFinalVar + &quot;\r\n&quot;); </span><br><span class="line">                System.out.println(&quot;intStaticFinalVar=&quot; + intStaticFinalVar + &quot;\r\n&quot;); </span><br><span class="line">                System.out.println(&quot;integerStaticFinalVar=&quot; + integerStaticFinalVar + &quot;\r\n&quot;); </span><br><span class="line">                System.out.println(&quot;alStaticFinalVar=&quot; + alStaticFinalVar + &quot;\r\n&quot;); </span><br><span class="line">                //strStaticFinalVar=&quot;不可改变&quot;;        //错误，final表示终态,不可以改变变量本身. </span><br><span class="line">                strStaticVar = &quot;可改变&quot;;                //正确，static表示类变量,值可以改变. </span><br><span class="line">                //strFinalVar=&quot;不可改变&quot;;                    //错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。 </span><br><span class="line">                //intStaticFinalVar=2;                        //错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。 </span><br><span class="line">                //integerStaticFinalVar=new Integer(8);            //错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。 </span><br><span class="line">                alStaticFinalVar.add(&quot;aaa&quot;);        //正确，容器变量本身没有变化，但存放内容发生了变化。这个规则是非常常用的，有很多用途。 </span><br><span class="line">                alStaticFinalVar.add(&quot;bbb&quot;);        //正确，容器变量本身没有变化，但存放内容发生了变化。这个规则是非常常用的，有很多用途。 </span><br><span class="line">                System.out.println(&quot;-------------值处理后----------\r\n&quot;); </span><br><span class="line">                System.out.println(&quot;strStaticFinalVar=&quot; + strStaticFinalVar + &quot;\r\n&quot;); </span><br><span class="line">                System.out.println(&quot;strStaticVar=&quot; + strStaticVar + &quot;\r\n&quot;); </span><br><span class="line">                System.out.println(&quot;strFinalVar=&quot; + strFinalVar + &quot;\r\n&quot;); </span><br><span class="line">                System.out.println(&quot;intStaticFinalVar=&quot; + intStaticFinalVar + &quot;\r\n&quot;); </span><br><span class="line">                System.out.println(&quot;integerStaticFinalVar=&quot; + integerStaticFinalVar + &quot;\r\n&quot;); </span><br><span class="line">                System.out.println(&quot;alStaticFinalVar=&quot; + alStaticFinalVar + &quot;\r\n&quot;); </span><br><span class="line">        &#125; </span><br><span class="line">        public static void main(String args[]) &#123; </span><br><span class="line">                new TestStaticFinal().test(); </span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map的排序(key排序/value排序)</title>
      <link href="/archives/a5b55d42.html"/>
      <url>/archives/a5b55d42.html</url>
      
        <content type="html"><![CDATA[<h2 id="Map的排序-key排序-value排序"><a href="#Map的排序-key排序-value排序" class="headerlink" title="Map的排序(key排序/value排序)"></a>Map的排序(key排序/value排序)</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>Map是键值对的集合接口，它的实现类主要包括：HashMap,TreeMap,Hashtable以及LinkedHashMap等</li><li>Map的key默认排列方式是增序排列，区分大小写</li><li>我们可以借助<code>Collections.sort()</code>重载来实现排序</li><li><h4 id="按照key排序"><a href="#按照key排序" class="headerlink" title="按照key排序"></a>按照key排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void sortByKey(List&lt;Map.Entry&lt;String,Integer&gt;&gt; list)&#123;</span><br><span class="line">        Collections.sort(list, new Comparator&lt;Map.Entry&lt;String,Integer&gt;&gt;() &#123;</span><br><span class="line">            public int compare(Map.Entry&lt;String, Integer&gt; o1, Map.Entry&lt;String, Integer&gt; o2) &#123;</span><br><span class="line">                return o2.getKey().toString().compareTo(o1.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="按照value排序"><a href="#按照value排序" class="headerlink" title="按照value排序"></a>按照value排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void sortByValue(List&lt;Map.Entry&lt;String,Integer&gt;&gt; listInfo)&#123;</span><br><span class="line">        Collections.sort(listInfo, new Comparator&lt;Map.Entry&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">            public int compare(Map.Entry&lt;String, Integer&gt; o1, Map.Entry&lt;String, Integer&gt; o2) &#123;</span><br><span class="line">                return o2.getValue().compareTo(o1.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="完整Demo"><a href="#完整Demo" class="headerlink" title="完整Demo"></a>完整Demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class CollectionSort &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashMap&lt;String ,Integer&gt; hashMap = new HashMap&lt;String, Integer&gt;();</span><br><span class="line">        hashMap.put(&quot;a&quot;,105);</span><br><span class="line">        hashMap.put(&quot;M&quot;,110);</span><br><span class="line">        hashMap.put(&quot;f&quot;,100);</span><br><span class="line">        hashMap.put(&quot;l&quot;,150);</span><br><span class="line">        hashMap.put(&quot;e&quot;,90);</span><br><span class="line">        System.out.println(&quot;-------排序前-------&quot;);</span><br><span class="line">        //这里将map.entrySet()转换成list</span><br><span class="line">        List&lt;Map.Entry&lt;String,Integer&gt;&gt; listInfo = new ArrayList&lt;Map.Entry&lt;String,Integer&gt;&gt;(hashMap.entrySet());</span><br><span class="line">        for (Map.Entry&lt;String,Integer&gt; map : listInfo)&#123;</span><br><span class="line">            System.out.println(map.getKey()+&quot;----&quot;+map.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        sortByValue(listInfo);</span><br><span class="line">        System.out.println(&quot;-------排序后-------&quot;);</span><br><span class="line">        for (Map.Entry&lt;String,Integer&gt; map : listInfo)&#123;</span><br><span class="line">            System.out.println(map.getKey()+&quot;----&quot;+map.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void sortByKey(List&lt;Map.Entry&lt;String,Integer&gt;&gt; list)&#123;</span><br><span class="line">        //然后通过比较器来实现排序</span><br><span class="line">        Collections.sort(list, new Comparator&lt;Map.Entry&lt;String,Integer&gt;&gt;() &#123;</span><br><span class="line">            public int compare(Map.Entry&lt;String, Integer&gt; o1, Map.Entry&lt;String, Integer&gt; o2) &#123;</span><br><span class="line">                //降序排序</span><br><span class="line">                return o2.getKey().toString().compareTo(o1.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void sortByValue(List&lt;Map.Entry&lt;String,Integer&gt;&gt; listInfo)&#123;</span><br><span class="line">        Collections.sort(listInfo, new Comparator&lt;Map.Entry&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">            public int compare(Map.Entry&lt;String, Integer&gt; o1, Map.Entry&lt;String, Integer&gt; o2) &#123;</span><br><span class="line">                return o2.getValue().compareTo(o1.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git操作快速上手(日常指令)</title>
      <link href="/archives/89baa56d.html"/>
      <url>/archives/89baa56d.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git快速上手使用"><a href="#Git快速上手使用" class="headerlink" title="Git快速上手使用"></a>Git快速上手使用</h2><h4 id="本文目的："><a href="#本文目的：" class="headerlink" title="本文目的："></a>本文目的：</h4><ul><li>由于最近给公司搭建了一个基于GitLab的版本管理工具，而之前公司都是使用SVN管理代码，而且不少同事尚未有使用Git的经历，所以写了这个文档，一方面旨在让同事们能快速在Git上手工作，不需要在Git的学习曲线上爬坡，另一方面，学会了本文档的基本操作之后，文末还有详细学习Git操作以及原理的传送门。这些基本操作能满足一个开发者基本的需求，但是如果遇到分支冲突等错误，传送门里面也有详细解答</li></ul><h4 id="上手步骤"><a href="#上手步骤" class="headerlink" title="上手步骤"></a>上手步骤</h4><ul><li>先安装<code>Git</code>客户端：<a href="https://git-scm.com/" target="_blank" rel="noopener">下载链接</a></li><li>打开Git Bash环境(一般安装了Git之后，Git会配置好全局环境)</li><li>生成ssh-key(生成两个文件，在${user}/.ssh/  目录下面，没有pub结尾的是私钥，以pub结尾的是私钥):作为加密使用<ul><li>先添加个人信息(需要作为更改的标识)：<ul><li>添加用户名：<code>git config --global user.name &quot;Your Name&quot;</code></li><li>添加邮箱：<code>git config --global user.email you@example.com</code></li></ul></li></ul></li></ul><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ol><li>克隆：<code>git clone url</code> </li><li>添加更改：<code>git add filename</code></li><li>为提交添加注释：<code>git commit -m &quot;注释的内容&quot;</code></li><li>提交到主分支：<code>git push origin master</code></li><li>将别人提交的代码从远程主分支同步到本地：<code>git pull origin master</code></li><li>创建本地分支(创建完之后自动切换到到新建的分支上)：<code>git checlout -b &quot;分支的名称&quot;</code></li><li>在新的分支提交更改，注释（同2，3步操作）</li><li>如果要将自己创建的分支提交到远程仓库，创建自己的分支，执行：<code>git push origin 分支的名称</code>,这样，远程分支也有了你的分支，别人也就可以拉去你的分支进行查看，或者更改你发分支，合并你的分支等….</li><li>同样，也可以在本地合并你创建的分支的到主分支：<ol start="10"><li>撤换回到本地主分支：<code>git checkout master</code></li><li>在主分支合并本地分支: <code>git merge 分支的名称</code></li><li>合并之后再将结果提交到远程主仓库</li></ol></li></ol><hr><p>参考：<br><a href="https://git-scm.com/book/zh/" target="_blank" rel="noopener">Git中文文档</a><br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="noopener">Git教程</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向切面编程(AOP)实例解释</title>
      <link href="/archives/4c8b706f.html"/>
      <url>/archives/4c8b706f.html</url>
      
        <content type="html"><![CDATA[<h2 id="面向切面编程-AOP-实例解释"><a href="#面向切面编程-AOP-实例解释" class="headerlink" title="面向切面编程(AOP)实例解释"></a>面向切面编程(AOP)实例解释</h2><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><ul><li>闲暇之余，回头回顾了一下AOP的知识，下面是两个例子，一个是基于XML配置形式来定义AOP方面的，另一个例子是基于@Aspect注解来定义方面的，第二个实例是在第一个实例的基础上改动而实现的，所以为了避免代码，我将每个实例的重点代码push了出来，这两部分组合起来就是一个完整的Project 代码，而且，能够明白地将这两种什么方式区分并将两部分代码联系起来，那就理解了AOP的用法了。<h4 id="AOP实例-基于AOP的XML结构"><a href="#AOP实例-基于AOP的XML结构" class="headerlink" title="AOP实例(基于AOP的XML结构)"></a>AOP实例(基于AOP的XML结构)</h4></li><li>导入jar包(通过Maven导入)：其他需要用到的自行导入<ul><li><code>org.springframework</code>—&gt;<code>spring-aop</code></li><li><code>org.springframework</code>—&gt;<code>spring-core</code></li><li><code>org.springframework</code>—&gt;<code>spring-context</code></li><li><code>org.aspectj</code>—&gt;<code>aspectjrt</code></li><li><code>aopalliance</code>—&gt;<code>aopalliance</code></li><li><code>cglib</code>—&gt;<code>cglib-nodep</code></li></ul></li><li>配置XML文件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:config&gt;</span><br><span class="line">  &lt;aop:aspect id=&quot;log&quot; ref=&quot;logging&quot;&gt; &lt;!--声明切面--&gt;</span><br><span class="line">     &lt;aop:pointcut id=&quot;selectAll&quot; expression=&quot;execution(* xyz.royleo.*.*(..))&quot;/&gt;&lt;!--声明切点--&gt;</span><br><span class="line">     &lt;aop:before method=&quot;beforeAdvice&quot; pointcut-ref=&quot;selectAll&quot;/&gt;&lt;!--声明通知--&gt;</span><br><span class="line">     &lt;aop:after method=&quot;afterAdvice&quot; pointcut-ref=&quot;selectAll&quot;/&gt;</span><br><span class="line">     &lt;aop:after-returning method=&quot;afterReturningAdvice&quot; returning=&quot;retVal&quot; pointcut-ref=&quot;selectAll&quot;/&gt;</span><br><span class="line">     &lt;aop:after-throwing method=&quot;AfterThrowingAdvice&quot; throwing=&quot;ex&quot; pointcut-ref=&quot;selectAll&quot;/&gt;</span><br><span class="line">  &lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br><span class="line">   &lt;bean id=&quot;student&quot; class=&quot;xyz.royleo.Student&quot;&gt;</span><br><span class="line">          &lt;property name=&quot;name&quot; value=&quot;royleo&quot;/&gt;</span><br><span class="line">          &lt;property name=&quot;age&quot; value=&quot;23&quot;/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line">   &lt;bean id=&quot;logging&quot; class=&quot;xyz.royleo.Logging&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="AOP实例-基于AOP的-Aspect"><a href="#AOP实例-基于AOP的-Aspect" class="headerlink" title="AOP实例(基于AOP的@Aspect)"></a>AOP实例(基于AOP的@Aspect)</h4><ul><li>说明，由于这两个说明是使用一个实例，所以基于XML配置部分就不放出POJO的代码，将POJO代码放在基于@Aspect注解示例部分</li><li>导入的jra包跟XML实例相同</li><li>配置：<ul><li>在XML配置文件中启用注解：<code>&lt;aop:aspectj-autoproxy/&gt;</code></li></ul></li><li><p>在Logging中声明切面，切点，通知</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">public class Logging &#123;</span><br><span class="line">    @Pointcut(&quot;execution(* xyz.royleo.*.*(..))&quot;)</span><br><span class="line">    private void selectAll()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    @Before(&quot;selectAll()&quot;)</span><br><span class="line">    public void beforeAdvice()&#123;</span><br><span class="line">        System.out.println(&quot;Going to setup student profile.**方法被调用之前通知**&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @After(&quot;selectAll()&quot;)</span><br><span class="line">    public void afterAdvice()&#123;</span><br><span class="line">        System.out.println(&quot;xyz.royleo.Student profile has been setup.**方法被调用之后通知**&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @AfterReturning(pointcut = &quot;selectAll()&quot;,returning = &quot;retVal&quot;)</span><br><span class="line">    public void afterReturningAdvice(Object retVal)&#123;</span><br><span class="line">        System.out.println(&quot;Returning:&quot; + retVal.toString() + &quot; **方法返回值时触发通知**&quot; );</span><br><span class="line">    &#125;</span><br><span class="line">    @AfterThrowing(pointcut = &quot;selectAll()&quot;,throwing = &quot;ex&quot;)</span><br><span class="line">    public void AfterThrowingAdvice(IllegalArgumentException ex)&#123;</span><br><span class="line">        System.out.println(&quot;There has been an exception: &quot; + ex.toString() + &quot; **抛异常时触发通知(捕捉到指定异常)**&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>bean.xml配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:aspectj-autoproxy/&gt;</span><br><span class="line">&lt;!-- Definition for student bean --&gt;</span><br><span class="line">&lt;bean id=&quot;student&quot; class=&quot;com.tutorialspoint.Student&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;name&quot;  value=&quot;Zara&quot; /&gt;</span><br><span class="line">  &lt;property name=&quot;age&quot;  value=&quot;11&quot;/&gt;      </span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Definition for logging aspect --&gt;</span><br><span class="line">&lt;bean id=&quot;logging&quot; class=&quot;com.tutorialspoint.Logging&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>入口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class MainApp &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      ApplicationContext context = </span><br><span class="line">             new ClassPathXmlApplicationContext(&quot;Beans.xml&quot;);</span><br><span class="line">      Student student = (Student) context.getBean(&quot;student&quot;);</span><br><span class="line">      student.getName();</span><br><span class="line">      student.getAge();     </span><br><span class="line">      student.printThrowException();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程同步基础之使用锁实现同步</title>
      <link href="/archives/86946e12.html"/>
      <url>/archives/86946e12.html</url>
      
        <content type="html"><![CDATA[<h2 id="线程同步基础之使用锁实现同步"><a href="#线程同步基础之使用锁实现同步" class="headerlink" title="线程同步基础之使用锁实现同步"></a>线程同步基础之使用锁实现同步</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>使用锁实现同步是通过重写Lock接口来实现，与synchronized相比，Lock接口允许实现更复杂的临界区结构(控制的获取和释放不在同一个块结构中)</li></ul><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><ul><li>定义：当两个或者多个线程被阻塞并且他们等待释放的锁永远都不会是释放，就会发生死锁</li></ul><h4 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h4><ul><li>Lock接口引入<code>tryLock()</code>方法获取锁，如果锁已经被其他线程获取，那就返回false，并继续往下执行代码(不是执行临界区代码，而且相当于事物回滚的机制)</li><li>使用<code>lock()</code>方法获取对锁的控制，必须也用<code>unlock()</code>释放对锁的控制<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void printJob(Object doc)&#123;</span><br><span class="line">        queueLock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            long duration = (long) (Math.random()*10000);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+&quot; OrintQueue Printing a job during &quot;+(duration/1000)+&quot;second&quot;);</span><br><span class="line">            Thread.sleep(duration);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            queueLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用读写锁实现同步数据的访问"><a href="#使用读写锁实现同步数据的访问" class="headerlink" title="使用读写锁实现同步数据的访问"></a>使用读写锁实现同步数据的访问</h4><ul><li><code>ReadWriteLock</code>接口和他的实现类<code>ReenteantReadWriteLock</code>。这两个类有两个锁，一个是读操作锁(可同时允许多个人访问)，一个是写操作锁(同一时段只能一个线程操作)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public double getPrice2()&#123;</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        double value = price2;</span><br><span class="line">        lock.readLock().unlock();</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice1(double price1,double price2)&#123;</span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        this.price2=price2;</span><br><span class="line">        this.price1=price1;</span><br><span class="line">        lock.writeLock().unlock();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程同步基础之synchronized同步</title>
      <link href="/archives/65a2a3a3.html"/>
      <url>/archives/65a2a3a3.html</url>
      
        <content type="html"><![CDATA[<h2 id="线程同步基础之synchronized同步"><a href="#线程同步基础之synchronized同步" class="headerlink" title="线程同步基础之synchronized同步"></a>线程同步基础之synchronized同步</h2><h4 id="Java-API提供的两种基本的同步机制"><a href="#Java-API提供的两种基本的同步机制" class="headerlink" title="Java API提供的两种基本的同步机制"></a>Java API提供的两种基本的同步机制</h4><ol><li>synchronized关键字机制</li><li>Lock接口及其实现机制</li></ol><h4 id="synchronized关键字概述"><a href="#synchronized关键字概述" class="headerlink" title="synchronized关键字概述"></a>synchronized关键字概述</h4><ol><li>对方法的声明定义<ul><li>对于非静态方法，每个用synchronized关键字声明的方法都是一个临界区，对于同一个对象的临界区，再同一时间只有一个允许被访问</li><li>对于静态方法，</li></ul></li><li>synchronized同步块</li><li>synchronized修饰一个类</li></ol><h4 id="使用synchronized实现同步非静态方法"><a href="#使用synchronized实现同步非静态方法" class="headerlink" title="使用synchronized实现同步非静态方法"></a>使用synchronized实现同步非静态方法</h4><ul><li>使用synchronized修饰一个非静态方法是时候，修饰的是本方法，同一时间只能允许一个访问权限<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void addAccount(double amount)&#123;</span><br><span class="line">    double tmp = balance;</span><br><span class="line">    try &#123;</span><br><span class="line">        Thread.sleep(10);</span><br><span class="line">    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    tmp += amount;</span><br><span class="line">    balance = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用synchronized实现同步静态方法"><a href="#使用synchronized实现同步静态方法" class="headerlink" title="使用synchronized实现同步静态方法"></a>使用synchronized实现同步静态方法</h4><ul><li>我们知道静态方法是属于类的而不属于对象的。同样的，synchronized修饰的静态方法锁定的是这个类的所有对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public synchronized static void method() &#123;</span><br><span class="line">   // todo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="synchronized修饰代码块"><a href="#synchronized修饰代码块" class="headerlink" title="synchronized修饰代码块"></a>synchronized修饰代码块</h4><ul><li>当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块</li><li>当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块</li><li><p>当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void method()  </span><br><span class="line">&#123;</span><br><span class="line">    synchronized(表达式)  </span><br><span class="line">     &#123;  </span><br><span class="line">     &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果同步快里面的表达式是<code>this</code>关键字或者是<code>CLassName.class</code>关键字的话，作用的对象是这个类的所有对象</p></li></ul><h4 id="使用非依赖属性实现同步"><a href="#使用非依赖属性实现同步" class="headerlink" title="使用非依赖属性实现同步"></a>使用非依赖属性实现同步</h4><ul><li>线程同步控制过程中，创建一个无关属性，被多个线程共享使用，在同步操作中，同步对这个非依赖属性的访问</li></ul><h4 id="在同步代码中使用条件"><a href="#在同步代码中使用条件" class="headerlink" title="在同步代码中使用条件"></a>在同步代码中使用条件</h4><ul><li><code>wait()</code>:当一个线程调用<code>wait()</code>方法的时候，JVM将这个线程置入休眠，并且释放这个同步代码块的对象</li><li><code>notify()</code>与<code>notifyAll()</code>：唤醒之前因为调用<code>wait()</code>方法的线程</li><li>下面是生产者消费者模式里面的一个同步方法:当库存为零的时候，休眠次线程，不断的监听，库存是否继续为零<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void get()&#123;</span><br><span class="line">        while (storage.size()==0)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;Get : &quot;+storage.size()+&quot; &quot;+((LinkedList&lt;?&gt;)storage).poll());</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射机制之动态代理</title>
      <link href="/archives/faa9c2f.html"/>
      <url>/archives/faa9c2f.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java反射机制之动态代理"><a href="#Java反射机制之动态代理" class="headerlink" title="Java反射机制之动态代理"></a>Java反射机制之动态代理</h2><h4 id="代理模式概述"><a href="#代理模式概述" class="headerlink" title="代理模式概述"></a>代理模式概述</h4><ul><li>定义：给某个对象提供一个代理对象，并由代理对象控制对于原对象的访问，即客户不直接操控原对象，而是通过代理对象间接地操控原对象，如图：<br><a href="http://qvm.lays3721.top/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.gif" target="_blank" rel="noopener">代理模式(以静态代理为例)</a></li><li>上图中：<ul><li>RealSubject是原对象</li><li>Subject是委托对象与代理对象都要实现的接口</li><li><code>request()</code> 是代理对象与委托对象都拥有的方法</li></ul></li><li>代理模式分类：<ul><li>静态代理：代理类是在编译时就实现好的.也就是说 Java 编译完成后代理类是一个实际的 class 文件</li><li>动态代理：代理类是在运行时生成的。也就是说 Java 编译完之后并没有实际的 class 文件，而是在运行时动态生成的类字节码，并加载到JVM中</li></ul></li></ul><h4 id="动态代理概述"><a href="#动态代理概述" class="headerlink" title="动态代理概述"></a>动态代理概述</h4><ul><li>Java反射机制你可以在运行期动态的创建接口的实现</li><li>动态的代理的用途十分广泛，比如数据库连接和事物管理（transaction management）还有单元测试时用到的动态 mock 对象以及 AOP 中的方法拦截功能等等都使用到了动态代理</li></ul><h5 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h5><ul><li>定义一个委托类和公共接口</li><li>自己定义一个类(调用处理器,即是实现<code>InvacationHandler</code>接口)，指定运行时将生成的代理类需要完成的具体任务</li><li>动态生成代理对象，指定委托对象实现的一系列接口调用处理器的实例</li><li>通过代理对象调用方法</li></ul><h5 id="Java-API提供实现动态代理的类或接口"><a href="#Java-API提供实现动态代理的类或接口" class="headerlink" title="Java API提供实现动态代理的类或接口"></a>Java API提供实现动态代理的类或接口</h5><ol><li><p>Proxy(java.lang.reflect.Proxy):这是生成代理类的主类，通过 Proxy 类生成的代理类都继承了 Proxy 类(<code>DynamicProxyClass extends Proxy</code>)</p><ol start="2"><li>创建代理对象的方法：<code>static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code>,其中，以一个参数是类加载器，第二个参数是需要代理类实现的接口，第三个参数是调用处理器类实例</li><li><code>InvocationHandler getInvocationHandler(Object proxy)</code>: 获得代理对象对应的调用处理器对象</li><li><code>Class getProxyClass(ClassLoader loader, Class[] interfaces)</code>: 根据类加载器和实现的接口获得代理类</li></ol></li><li><p>InvocationHandler(<code>java.lang.reflect.InvocationHandler</code>):动态生成的代理类需要完成的具体内容需要自己定义一个类，而这个类必须实现 InvocationHandler 接口</p></li></ol><h4 id="动态代理Demo-Codes-Showed"><a href="#动态代理Demo-Codes-Showed" class="headerlink" title="动态代理Demo Codes Showed"></a>动态代理Demo Codes Showed</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package xyz.royleo.Proxy;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by RoyLeo on 2016/10/14.</span><br><span class="line"> */</span><br><span class="line">public class DynamicProxyDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        RealSub realSub = new RealSub();</span><br><span class="line">        ProxySub handler = new ProxySub(realSub);</span><br><span class="line">        Sub proxySubject = (Sub) java.lang.reflect.Proxy.newProxyInstance(RealSub.class.getClassLoader(),RealSub.class.getInterfaces(),handler);</span><br><span class="line">        proxySubject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Sub&#123;</span><br><span class="line">    void request();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class RealSub implements Sub&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void request() &#123;</span><br><span class="line">        System.out.println(&quot;RealSub-----Request&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ProxySub implements InvocationHandler&#123;</span><br><span class="line">    private Sub sub;</span><br><span class="line">    public ProxySub(Sub sub) &#123;</span><br><span class="line">        this.sub = sub;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;=====Before======&quot;);</span><br><span class="line">        Object result = method.invoke(sub, args);</span><br><span class="line">        System.out.println(&quot;=====After=======&quot;);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射机制之方法操作</title>
      <link href="/archives/affd1e49.html"/>
      <url>/archives/affd1e49.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java反射机制之方法操作"><a href="#Java反射机制之方法操作" class="headerlink" title="Java反射机制之方法操作"></a>Java反射机制之方法操作</h2><h4 id="获取方法对象"><a href="#获取方法对象" class="headerlink" title="获取方法对象"></a>获取方法对象</h4><ul><li><code>Method[] methods = aClass.getMethods();</code>返回的 Method 对象数组包含了指定类中声明为公有的(public)的所有变量集合</li><li><code>Method method = aClass.getMethod(&quot;doSomething&quot;, new Class[]{String.class});</code>返回方法名为doSomeThing，参数为String的方法对象</li><li><code>Method method = aClass.getMethod(&quot;doSomething&quot;, null);</code>返回无参方法</li><li>`Method privateStringMethod = PrivateObject.class.<pre><code>getDeclaredMethod(&quot;getPrivateString&quot;, null);`返回私有</code></pre></li></ul><h4 id="方法参数以及返回类型"><a href="#方法参数以及返回类型" class="headerlink" title="方法参数以及返回类型"></a>方法参数以及返回类型</h4><ul><li><code>Class[] parameterTypes = method.getParameterTypes();</code>获取指定方法的方法参数</li><li><code>Class returnType = method.getReturnType();</code>获取指定方法的返回类型</li></ul><h4 id="通过Method对象调用方法"><a href="#通过Method对象调用方法" class="headerlink" title="通过Method对象调用方法"></a>通过Method对象调用方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class myClass = Result.class;</span><br><span class="line">        Result result = new Result();</span><br><span class="line">        Method method = myClass.getMethod(&quot;getName&quot;);</span><br><span class="line">        Method method1set = myClass.getMethod(&quot;setName&quot;,String.class);</span><br><span class="line">        method1set.invoke(result,&quot;TENYUAN&quot;);</span><br><span class="line">        System.out.println(method.invoke(result));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射机制之变量操作</title>
      <link href="/archives/b0d70fcf.html"/>
      <url>/archives/b0d70fcf.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java反射机制之变量操作"><a href="#Java反射机制之变量操作" class="headerlink" title="Java反射机制之变量操作"></a>Java反射机制之变量操作</h2><h4 id="获取Field对象"><a href="#获取Field对象" class="headerlink" title="获取Field对象"></a>获取Field对象</h4><ul><li><code>Field[] methods = aClass.getFields();</code>返回Field 对象数组包含了指定类中声明为公有的(public)的所有变量集合</li><li><code>Field field = aClass.getField(&quot;someField&quot;);</code>获得指定变量,如果没匹配到对应的变量，抛异常<code>NoSuchFieldException</code></li><li><code>Field[] fields = myClass.getDeclaredFields();</code>获取私有成员变量</li></ul><h4 id="获取变量名称"><a href="#获取变量名称" class="headerlink" title="获取变量名称"></a>获取变量名称</h4><ul><li><code>String fieldName = field.getName();</code></li></ul><h4 id="获取变量类型"><a href="#获取变量类型" class="headerlink" title="获取变量类型"></a>获取变量类型</h4><ul><li><code>Object fieldType = field.getType();</code></li></ul><h4 id="获取或设置-get-set-变量值"><a href="#获取或设置-get-set-变量值" class="headerlink" title="获取或设置{get/set}变量值"></a>获取或设置{get/set}变量值</h4><ul><li>一旦获得了一个 Field 的引用，你就可以通过调用 Field.get()或 Field.set()方法，获取或者设置变量的值</li><li><p>获取\设置普通成员变量的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class myClass = Result.class;</span><br><span class="line">       Result result = new Result();</span><br><span class="line">       Field f = myClass.getField(&quot;omg&quot;);</span><br><span class="line">       f.set(result,&quot;appAPP&quot;);</span><br><span class="line">       System.out.println(f.get(result));</span><br></pre></td></tr></table></figure></li><li><p>获取\设置私有变量的值：需要设置私有变量的访问权限<code>field.setAccessible(true)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class myClass = Result.class;</span><br><span class="line">       Result result = new Result();</span><br><span class="line">       Field f = myClass.getDeclaredField(&quot;name&quot;);</span><br><span class="line">       f.setAccessible(true);</span><br><span class="line">       f.set(result,&quot;appAPP&quot;);</span><br><span class="line">       System.out.println(f.get(result));</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射机制之构造器操作</title>
      <link href="/archives/41e0f7bf.html"/>
      <url>/archives/41e0f7bf.html</url>
      
        <content type="html"><![CDATA[<h2 id="构造器反射"><a href="#构造器反射" class="headerlink" title="构造器反射"></a>构造器反射</h2><h4 id="获取Constructor对象"><a href="#获取Constructor对象" class="headerlink" title="获取Constructor对象"></a>获取Constructor对象</h4><ol><li><code>Constructor[] constructors = aClass.getConstructors();</code>获取构造器数组</li><li><code>Constructor constructor =aClass.getConstructor(new Class[]{String.class});</code> 根据具体的构造器参数获取指定的构造器，如果没有匹配的方法，则抛异常<code>NoSuchMethodException</code></li></ol><h4 id="构造器参数"><a href="#构造器参数" class="headerlink" title="构造器参数"></a>构造器参数</h4><ol><li><code>Class[] parameterTypes = constructor.getParameterTypes();</code>获取构造器的方法参数信息</li></ol><h4 id="利用构造器对象实例化一个类"><a href="#利用构造器对象实例化一个类" class="headerlink" title="利用构造器对象实例化一个类"></a>利用构造器对象实例化一个类</h4><ul><li>constructor.newInstance()方法的方法参数是一个可变参数列表，但是当你调用构造方法的时候你必须提供精确的参数，即形参与实参必须一一对应<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Constructor constructor = Result.class.getConstructor(new Class[]&#123;String.class&#125;);</span><br><span class="line">        Result result = (Result) constructor.newInstance(&quot;tettt&quot;);</span><br><span class="line">        System.out.println(result.getName());</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程管理</title>
      <link href="/archives/b7f7cee0.html"/>
      <url>/archives/b7f7cee0.html</url>
      
        <content type="html"><![CDATA[<h2 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h2><h4 id="线程的创建与运行"><a href="#线程的创建与运行" class="headerlink" title="线程的创建与运行"></a>线程的创建与运行</h4><ol><li>线程创建：<ol start="2"><li>继承Thread类，并且覆盖run()方法</li><li>创建一个实现<code>Runnable</code>接口的类，并且覆盖<code>run()</code>方法，使用带参数的<code>Thread</code>构造器来创建<code>Thread</code>对象，这个参数就是实现<code>Runnable</code>接口的类的一个对象</li></ol></li><li>线程的运行：<ol start="5"><li>线程对象调用<code>start()</code>方法，才会创建运行这个线程(线程创建，运行的时间点).</li></ol></li></ol><h4 id="线程信息的获取和设置"><a href="#线程信息的获取和设置" class="headerlink" title="线程信息的获取和设置"></a>线程信息的获取和设置</h4><ol><li>线程的状态(status):<code>Thread.getStatus()</code></li><li>线程的唯一标识符(Id):<code>Thread.getId()</code></li><li>线程的名称(Name):<code>Thread.getName()</code></li><li>线程的优先级(Property):<code>Thread.getPrioity()</code></li></ol><h4 id="线程的中断"><a href="#线程的中断" class="headerlink" title="线程的中断"></a>线程的中断</h4><ol><li>线程中断方法：<code>Thread.interrupt()</code>调用时，Thread类里面标记线程是否中断的属性(interrupted)被标记为true</li><li>检查线程是否中断：返回interrupted的属性值<ol start="3"><li><code>Thread.interrupted()</code></li><li><code>Thread.isInterrupted()</code>(能设置interrupt的属性为false)</li></ol></li></ol><h4 id="线程的休眠与恢复"><a href="#线程的休眠与恢复" class="headerlink" title="线程的休眠与恢复"></a>线程的休眠与恢复</h4><ul><li><code>sleep(long timeouts)</code>:线程休眠指定时间，休眠期间，线程会释放CPU并且不在继续执行任务</li></ul><h4 id="等待线程的终止"><a href="#等待线程的终止" class="headerlink" title="等待线程的终止"></a>等待线程的终止</h4><ul><li><code>Thread1.join()</code>:等待Thread1线程执行完之后才运行其他线程或者任务(适用于一些初始化任务等…)</li></ul><h4 id="守护线程的创建与运行"><a href="#守护线程的创建与运行" class="headerlink" title="守护线程的创建与运行"></a>守护线程的创建与运行</h4><ol><li>守护线程：优先级很低，当程序中没有其他的线程运行的时候，才运行守护线程，然后JVM就结束程序</li><li>创建：<code>setDaemon(true)</code>创建守护线程(守护线程必须先在<code>start()</code>方法被调用之前设置)</li></ol><h4 id="线程中不可控异常处理"><a href="#线程中不可控异常处理" class="headerlink" title="线程中不可控异常处理"></a>线程中不可控异常处理</h4><ol><li>非运行时异常(Checked Exception)：这种异常必须在方法声明用throws语句来指定，或者在方法内捕获(例如：IOException,ClassNotFoundException..)</li><li>运行时异常(Unchecked Exception)：不必在方法声明指定，也不必捕获(例如：NumberFormatException)</li><li><code>run()</code>方法不支持throws语句</li></ol><h4 id="线程局部变量"><a href="#线程局部变量" class="headerlink" title="线程局部变量"></a>线程局部变量</h4><ul><li>避免一个线程中改变了一个属性，所有线程都会被这个改变而影响</li><li>用法：通过声明一个<code>ThreadLocal&lt;T&gt;</code>对象，这个对象是在<code>initialValue()</code>方法中隐式实现的.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private static ThreadLocal&lt;Date&gt; startDate = new ThreadLocal&lt;Date&gt;()&#123;</span><br><span class="line">       @Override</span><br><span class="line">       protected Date initialValue() &#123;</span><br><span class="line">           return new Date();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="线程的分组"><a href="#线程的分组" class="headerlink" title="线程的分组"></a>线程的分组</h4><ul><li>把一个组的线程当作一个单一的单元，对组内线程对象进行访问并操作它们</li><li>创建：通过创建线程数组，创建线程组，<code>ThreadGroup.enumerate(Thread[] threads)</code>获取线程组包含的线程列表</li></ul><h4 id="通过工厂类创建线程"><a href="#通过工厂类创建线程" class="headerlink" title="通过工厂类创建线程"></a>通过工厂类创建线程</h4><ul><li>创建：实现<code>ThreadFactory</code>接口，<code>@override newThread(Runnable r)</code>创建线程对象</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;Mysql多表操作以及其实例&#39;</title>
      <link href="/archives/971c3dff.html"/>
      <url>/archives/971c3dff.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql多表操作及其实例"><a href="#Mysql多表操作及其实例" class="headerlink" title="Mysql多表操作及其实例"></a>Mysql多表操作及其实例</h2><h4 id="数据表："><a href="#数据表：" class="headerlink" title="数据表："></a>数据表：</h4><ul><li><p>学生表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field   | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+---------+-------------+------+-----+---------+----------------+</span><br><span class="line">| stuId   | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| classId | int(11)     | YES  |     | NULL    |                |</span><br><span class="line">| stuName | varchar(10) | YES  |     | NULL    |                |</span><br><span class="line">+---------+-------------+------+-----+---------+----------------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></li><li><p>成绩表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc score;</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field   | Type        | Null | Key | Default | Extra |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| classId | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| stuId   | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| course  | varchar(10) | YES  |     | NULL    |       |</span><br><span class="line">| score   | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>班级表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc class;</span><br><span class="line">+-----------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field     | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-----------+-------------+------+-----+---------+----------------+</span><br><span class="line">| classId   | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| className | varchar(20) | YES  |     | NULL    |                |</span><br><span class="line">+-----------+-------------+------+-----+---------+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据库操作用例"><a href="#数据库操作用例" class="headerlink" title="数据库操作用例"></a>数据库操作用例</h4><ol><li><p>查询“语文”课程比“数学”课程成绩高的所有学生的学号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from (select stuId,score from score where course=&apos;语文&apos; ) a,</span><br><span class="line">(select stuId,score from score where course=&apos;数学&apos;) b,(select * from student) c</span><br><span class="line"> where a.stuId=b.stuId and a.score&gt;b.score and a.stuId=c.stuId;</span><br></pre></td></tr></table></figure></li><li><p>查询平均成绩大于60分的同学的学号和平均成绩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select stuId,avg(score) from score group by stuId having avg(score)&gt;60;</span><br></pre></td></tr></table></figure></li><li><p>查询所有同学的学号、姓名、选课数和平均成绩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select student.stuId,student.stuName as &apos;姓名&apos;,count(score.classId),sum(score.score) as &apos;所选课程总分&apos;</span><br><span class="line">from student left join score on student.stuId=score.stuId group by student.stuId</span><br></pre></td></tr></table></figure></li><li><p>查询所有姓’雷’的学生个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(student.stuName) from student where stuName like &apos;雷%&apos;</span><br></pre></td></tr></table></figure></li><li><p>查询所有课程成绩小于60分的同学的学号，姓名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select student.stuId,student.stuName from student where stuId not in</span><br><span class="line"> (select score.stuId from score where score.score&gt;85)</span><br></pre></td></tr></table></figure></li><li><p>查询各科的最高分的学生的学号，姓名等信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT *,max(score) as max FROM info.score,info.student</span><br><span class="line">where student.stuId=score.stuId group by score.course;</span><br></pre></td></tr></table></figure></li><li><p>查询各班的第一名学生的信息，按照班级排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT *,max(score) as max FROM info.score,info.student ,info.class</span><br><span class="line">where student.stuId=score.stuId and student.classId=class.classId group by class.classId order by class.className;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>epuals与&#39;==&#39;区别</title>
      <link href="/archives/d2cfd72b.html"/>
      <url>/archives/d2cfd72b.html</url>
      
        <content type="html"><![CDATA[<h3 id="Java数据类型分类"><a href="#Java数据类型分类" class="headerlink" title="Java数据类型分类"></a>Java数据类型分类</h3><ul><li>基本数据类型(原始类型)：byte short char int long float double boolean<ul><li>他们的比较，使用<code>==</code>,比较的是他们的值</li></ul></li><li>复合数据类型(类定义)<ul><li>他们通过<code>==</code>比较的时候，比较的是他们存放的内存地址，所以，除非是同一个new出来的对象，他们的比较结果是true，否则，比较结果是false</li><li>Java所有的对象都是继承自IObject这个基类，在Object基类中定义了一个<code>equals()</code>的方法,这个对象的初始行为是比较对象的内存地址，但是有一些类库中，将这个方法覆盖掉了，如String，Integer，Date在这些类中equals()有着自身的实现，不再是比较类在堆内存中的存放地址。</li><li>而对于，那些木有覆盖<code>equals();</code>方法的的复合数据类型，他们之间的比较还是比较存放在内存中的地址值，与使用<code>==</code>比较结果相同</li></ul></li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="==操作"></a><code>==</code>操作</h3><ul><li>“==”或等号操作在Java编程语言中是一个二元操作符，用于比较原生类型和对象。</li><li>就原生类型如boolean、int、float来说，使用“==”来比较两者，这个很好掌握。但是在比较对象的时候，就会与equals()造成困惑。“==”对比两个对象基于内存引用，如果两个对象的引用完全相同（指向同一个对象）时，“==”操作将返回true，否则返回false。</li></ul><h3 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals();方法"></a><code>equals();</code>方法</h3><ul><li>equals()方法定义在Object类里面，根据具体的业务逻辑来定义该方法，用于检查两个对象的相等性。</li><li>例如：两个Employees被认为是相等的如果他们有相同的empId的话，你可以在你自己的domain对象中重写equals方法用于比较哪两个对象相等。</li><li>equals与hashcode是有契约的（无论什么时候你重写了equals方法，你同样要重写hashcode()方法），默认的equals方法实现是与“==”操作一样的，基于业务需求重写equals方法是最好的实践之一，同样equals与compareTo保持一致也不足为奇，以至于存储对象在Treemap或treeset集合中时，将使用compareTo方法检查相等性，行为是一致的。</li></ul><h3 id="与equals-区别"><a href="#与equals-区别" class="headerlink" title="==与equals();区别"></a><code>==</code>与<code>equals();</code>区别</h3><ul><li>==常用于比较原生类型，而equals()方法用于检查对象的相等性。</li><li>另一个不同的点是：如果==和equals()用于比较对象，当两个引用地址相同，==返回true。而equals()可以返回true或者false主要取决于重写实现。最常见的一个例子，字符串的比较，不同情况==和equals()返回不同的结果。</li></ul><h3 id="献上代码："><a href="#献上代码：" class="headerlink" title="献上代码："></a>献上代码：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by RoyLeo on 2016/9/12.</span><br><span class="line"> */</span><br><span class="line">public class main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        String t1 = &quot;你好啊&quot;;</span><br><span class="line">        String t2 = &quot;你好啊&quot;;</span><br><span class="line">        String tt = t2;</span><br><span class="line">        String t3 = new String(&quot;你好啊&quot;);</span><br><span class="line">        String t4 = new String(&quot;你好啊&quot;);</span><br><span class="line">        String ttt = t3;</span><br><span class="line">        System.out.println(ttt==t4);             //false</span><br><span class="line">        System.out.println(ttt==t3);            //true</span><br><span class="line">        System.out.println(t1==t2);             //true</span><br><span class="line">        System.out.println(t1==t3);             //false</span><br><span class="line">        System.out.println(t3==t4);             //false</span><br><span class="line">        System.out.println(t1.equals(t2));      //true</span><br><span class="line">        System.out.println(t1.equals(t3));      //true</span><br><span class="line">        System.out.println(t3.equals(t4));      //true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v2ray_科学手段</title>
      <link href="/archives/4be26d16.html"/>
      <url>/archives/4be26d16.html</url>
      
        <content type="html"><![CDATA[<h4 id="For-Windows"><a href="#For-Windows" class="headerlink" title="For Windows"></a>For Windows</h4><ul><li>下载<ol><li><a href="http://qvm.lays3721.top/v2rayn_v2.14_win32.zip" target="_blank" rel="noopener">Win32</a></li><li><a href="http://qvm.lays3721.top/v2rayn_v2.14_win64.zip" target="_blank" rel="noopener">Win64</a></li></ol></li><li>安装<ol><li>安装 解压后，双击文件夹内的 V2RayN.exe 即可运行，如闪退请确认电脑系统是否缺少.NET 4.5（最低 4.5）</li><li><img src="http://qvm.lays3721.top/v2ray_forwin.gif" alt="安装/运行"></li></ol></li><li>配置<ol><li>账户导入：导入账号的方法有很多种，比如从剪切板导入批量 URL、扫描屏幕二维码、手动填写账号信息和导入配置文件等，前两个方法在 PC 端最为常用。</li><li>例如：<img src="http://qvm.lays3721.top/v2ray_win_config.gif" alt="剪切板导入"></li><li>如上图所示，先复制 V2Ray 账号 URL，在右键点击屏幕右下角 V2RayN 图标，选择从剪切板导入批量 URL，点击弹出的确认按钮即可；扫描屏幕二维码的导入方式也很好理解，在电脑屏幕上打开 V2Ray 账号的二维码图片，右键点击屏幕右下角 V2RayN 图标，选择扫描屏幕二维码。</li><li>V2rayn算是局部代理，可以选择配合chrome插件试用，比如： SwitchyOmega等，SwitchyOmega配置可先自行搜索，如果必要，后面再补上</li><li>必要配置：<br><img src="http://qvm.lays3721.top/v2ray_for_mac_%E5%BF%85%E8%A6%81%E8%AE%BE%E7%BD%AE.gif" alt="配置"><h4 id="For-Android-BifrostV"><a href="#For-Android-BifrostV" class="headerlink" title="For Android(BifrostV)"></a>For Android(BifrostV)</h4></li></ol></li><li>下载链接<ul><li><a href="http://qvm.lays3721.top/Bifrostv_v0.5.16_newfgq.com.apk" target="_blank" rel="noopener">BifrostV</a></li></ul></li><li>配置<ol><li>可选择手动配置，导入配置，扫描二维码形式配置等，如使用过ss/ssr客户端的用户，操作步骤基本一样，可操作性强</li><li>上图：<br><img src="http://qvm.lays3721.top/bifv_page_1.png" alt="BifrostV 页面"><br><img src="http://qvm.lays3721.top/brfg_p_2.png" alt="添加账号"><br><img src="http://qvm.lays3721.top/bifg_p3.png" alt="账号设置"></li></ol></li></ul><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><ul><li>此文仅用于学习研究试用，仅做笔记整理，如有其他用途，与本站无关</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> V2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生JDBC操作数据库的思考总结</title>
      <link href="/archives/861d9c25.html"/>
      <url>/archives/861d9c25.html</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>相信很多java工程师在入门Java操作数据库的时候，都是首先接触到JDBC连接数据库的方式访问操作数据库，对数据库进行增删查改(CRUD)</li><li>但是久而久之，基于各种原因(团队\需求)，后来就使用封装了JDBC的框架来访问数据库，比如<code>hibernate</code>,<code>Mybatis\iBats</code>,我这里总结一下一些关于使用原生JDBC操作数据库的一些思考</li></ul><h4 id="JDBC编程步骤"><a href="#JDBC编程步骤" class="headerlink" title="JDBC编程步骤"></a>JDBC编程步骤</h4><ol><li>加载数据库驱动</li><li>创建并获取数据库链接</li><li>创建jdbc statement对象</li><li>设置sql语句</li><li>社会sql语句中的参数(使用preparedStatement预加载)</li><li>通过statement执行sql并获得结果</li><li>对sql执行结果进行解析</li><li>释放资源关闭数据库</li></ol><h4 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h4><ol><li>数据库链接，使用时就创建，不使用的时候就释放，对数据库进行频繁连接开启和关闭，造成数据库资源浪费，影响数据库性能<br>假想方案：使用数据库连接池管理数据库连接</li><li>将sql语句英编码到Java代码中，如果要修改sql语句，需要重新编译Java代码，不利于系统维护<br>假想方案：将sql语句配置在xml配置文件中，需要修改sql语句的时候直接在xml配置文件，不需要重新编译Java代码</li><li>向preparedStatement中设置参数，对占位符位置和设置参数值，硬编码到Java代码中，不利于系统维护<br>假想方案：将sql语句以及占位符和参数全在配置文件中定义配置</li><li>从resultSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，不利于系统维护<br>假想方案：将查询的结果集，自动映射成Java对象</li><li>对于繁杂程度来说，要使用一堆编码，才能实现一丢丢的查询……</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 重定向与转发的异同</title>
      <link href="/archives/bef463.html"/>
      <url>/archives/bef463.html</url>
      
        <content type="html"><![CDATA[<h3 id="重定向与请求转发的异同"><a href="#重定向与请求转发的异同" class="headerlink" title="重定向与请求转发的异同"></a>重定向与请求转发的异同</h3><h5 id="同："><a href="#同：" class="headerlink" title="同："></a>同：</h5><ul><li>两种方式都能跳转到目标页面</li></ul><h5 id="异："><a href="#异：" class="headerlink" title="异："></a>异：</h5><ul><li><p>本质区别：</p><ol><li>请求转发是服务器行为，而重定向是客户端行为：<ul><li>转发过程：browser http请求—-&gt; web server接受请求—-&gt; 调用内部的一个方法在容器内部完成请求处理和转发 动作—–&gt;将目标资源发生给客户端；转发路径必须经过web容器的url，不能转向到其他的web路径，中间传递的是自的容器内的request. 而在客户端浏览器地址栏显示出来的是第一次访问的路径。也就是说，转发行为是浏览器只做了一次访问请求</li><li>重定向过程：browser http请求—-&gt; web server接受后发送302状态码以及对应新的location地址给客户端—-&gt; 客户端发现302状态码，则自动再转发一个新的http请求，请求url是新的location地址 —-&gt;服务器根据此请求寻找资源并发送给客户. 重定向行为是浏览器做了至少两次访问请求.</li></ul></li><li>对于请求次数的解析：<ul><li>重定向在客户端 request A ,server响应状态码，指示browser应该访问 B. 这时候可以看到地址栏发生变化。重定向可以访问自己web应用以外的资源，在充定向过程中，传输的信息会丢失</li><li>请求转发是在服务器内部一个request/response的处理权移交，对于客户端来说，它只知道自己最早的请求的那个A但是不知道中间其他的访问路径，传输信息不会丢失</li></ul></li></ol></li><li><p>从数据分享角度：</p><ul><li>请求转发的转发页面与转发目标页面可以共享request里面的数据</li><li>重定向的跳转页面之间不可以共享数据</li></ul></li><li><p>从运用角度：</p><ul><li>请求转发一般用于用户登录的时候，或者角色转发到响应的模块</li><li>重定向一般用于用户注销登陆时返回和跳转到其他网站等</li></ul></li><li><p>从效率角度：</p><ul><li>请求转发效率比重定向效率高</li></ul></li><li><p>内部实现：</p><ul><li><p>请求转发部分：servlet主要负责处理具体的请求转发。通过获得RequestDispatcher对象，然后用forward方法进行请求转发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RequestDisapatcher rd=reqest.getRequestDisapatcher();</span><br><span class="line">rd.forward(req,resp); //用这里的方法来进行转发</span><br></pre></td></tr></table></figure></li><li><p>sendRedirect方法属于HttpServletResponse对象的getRequestDispatcher方法得到</p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP通信三次握手协议原理与过程分析</title>
      <link href="/archives/5574abb0.html"/>
      <url>/archives/5574abb0.html</url>
      
        <content type="html"><![CDATA[<h3 id="TCP传输标志位解析："><a href="#TCP传输标志位解析：" class="headerlink" title="TCP传输标志位解析："></a>TCP传输标志位解析：</h3><ol><li>SYN(synchronous建立联机) ：请求建立连接的数据包</li><li>ACK(acknowledgement 确认) ：回应数据包，表示接收到了对方的某个数据包</li><li>PSH(push传送) ：正常数据包</li><li>FIN(finish结束) ：通讯结束包</li><li>RST(reset重置) ：重置连接</li><li>URG(urgent紧急) ：紧急指针</li><li>Sequence number(顺序号码) </li><li>Acknowledge number(确认号码)</li></ol><h3 id="TCP通信建立连接-三次握手-原理"><a href="#TCP通信建立连接-三次握手-原理" class="headerlink" title="TCP通信建立连接(三次握手)原理"></a>TCP通信建立连接(三次握手)原理</h3><ol><li>客户端通过向服务器端发送一个SYN来建立一个主动打开，作为三路握手的一部分</li><li>服务器端应当为一个合法的SYN回送一个SYN/ACK</li><li>最后，客户端再发送一个ACK，这样三次握手就完成，并进入到建立连接部分</li></ol><center><br><img src="http://qvm.lays3721.top/tcpbiuld.png" alt="TCPBuild"><br></center><h3 id="建立连接过程分析"><a href="#建立连接过程分析" class="headerlink" title="建立连接过程分析"></a>建立连接过程分析</h3><ul><li>过程</li></ul><ol><li>第一次握手：主机A发送位码为syn＝1,随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</li><li>第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1),syn=1,ack=1,随机产生seq=7654321的包</li><li>第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1,以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1),ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</li></ol><ul><li><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IP 192.168.1.116.3337 &gt; 192.168.1.123.7788: S 3626544836:3626544836</span><br><span class="line"> IP 192.168.1.123.7788 &gt; 192.168.1.116.3337: S 1739326486:1739326486 ack 3626544837</span><br><span class="line"> IP 192.168.1.116.3337 &gt; 192.168.1.123.7788: ack 1739326487,ack 1</span><br></pre></td></tr></table></figure></li><li><p>分析：</p></li></ul><ol><li>第一次握手：从192.168.1.116的端口3337发送位码syn=1,随机产生seq number=3626544836的数据包到192.168.1.123端口7788由syn=1知道192.168.1.116要求建立联机</li><li>第二次握手：192.168.1.123:7788收到请求之后要确认信息，向192.168.1.116:3337发送ack number=3626544837，syn=1，ack=1随机产生seq=1739326486的数据包</li><li>192.168.1.116收到后检查ack number是否正确，即第一次发送的seq number+1,以及位码ack是否为1，若正确，192.168.1.116会再发送ack number=1739326487,ack=1，192.168.1.123收到后确认seq=seq+1,ack=1则连接建立成功</li></ol><h3 id="TCP连接建立过程为神马需要三次握手？"><a href="#TCP连接建立过程为神马需要三次握手？" class="headerlink" title="TCP连接建立过程为神马需要三次握手？"></a>TCP连接建立过程为神马需要三次握手？</h3><ul><li>概述：传输控制协议（Transmission Control Protocol, TCP）是一种面向连接的、可靠的、基于字节流的运输层（Transport layer）通信协议，是专门为了在不可靠的互联网络上提供一个可靠的端到端字节流而设计的</li><li>目的：防止已经失效的连接请求突然又传送到服务端，因而产生错误(为了解决网络中存在延迟的重复分组)</li><li>例子说明：</li></ul><ol><li>client发出的第一个连接请求报文段并没有消失，而是在网络某个节点上长时间滞留了，以致延误到连接释放以后的某个时间才到达server端. 而这个已经失效已久的连接到达server之后，就误认为是client新建立起来的连接，于是server向client发送数据，但是server却以为新的传输连接已经建立，于是就像client发出确认报文段，同意建立连接。</li><li>如果没有三次握手的过程，那么只要server发出确认，新的连接就建立，由于现在client并没有发出建立 连接的请求，因此不会理财server的确认，也不会向server发送数据，但server却以为新的传输连接已经建立，并一直等待client发来数据，这样的话，就会造成资源浪费</li><li>而采用三次握手过程，就可以避免上述现象，client不会向server的确认发出确认，server由于收不到确认，就知道client并没有建立连接</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> NetWorker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中添加REST功能</title>
      <link href="/archives/4a1b8e6e.html"/>
      <url>/archives/4a1b8e6e.html</url>
      
        <content type="html"><![CDATA[<h4 id="REST基本原理："><a href="#REST基本原理：" class="headerlink" title="REST基本原理："></a>REST基本原理：</h4><ul><li>通过简单的HTTP URL触发事件</li><li>REST是将资源最合适地从服务端转移到客户端(或者反之)</li><li>REST与RPC(远程过程调用)：REST面向资源，强调描述应用程序的事物和名词;RPC面向服务，关注于行为和行动<h4 id="Spring如何支持REST？"><a href="#Spring如何支持REST？" class="headerlink" title="Spring如何支持REST？"></a>Spring如何支持REST？</h4></li><li>控制器可以处理所有的HTTP方法：GET、POST、DELETE、PUT…</li><li>@PathVariable 注解使控制器能够处理参数化的URL(带参数变量的URL)</li><li>Spring表单绑定JSP标签库的<code>&lt;form:form&gt;</code>标签以及新的HidenHttpMethodFilter，使得通过HTML转发提交的PUT，DELETE请求成为可能(即使mou’xie)</li><li>使用String的视图和视图解析器，资源可以以各种形式表述，包括将数据模型表示为：XML、JSON、ATOM、RSS等</li><li>使用新的ContentNegotiatingResolver来选择合适的客户端表述</li><li>类似的，使用@ResponseBody注解以及HttpMethodConverter实现可以将传入的HTTP数据转化为传入控制器的处理方法的Java对象</li><li>RestTemplate简化客户端对REST资源的使用</li></ul><h4 id="RESTful-URL"><a href="#RESTful-URL" class="headerlink" title="RESTful URL"></a>RESTful URL</h4><ul><li>格式：<code>http://localhost:8080/spitter/spittles/123</code><ul><li>协议：//域名：端口号/Servlet上下文路径/资源类型/特定的spittle</li><li>REST　URL是用来标识资源</li></ul></li><li>RESTful　URL是有层级结构的，每个层标识一种资源</li><li>其中，URL还可以参数化，在控制器中获取该参数<code>@PathVariable(&quot;id&quot;) long id</code></li></ul><h4 id="执行REST动作"><a href="#执行REST动作" class="headerlink" title="执行REST动作"></a>执行REST动作</h4><ul><li>HTTP提供来操作资源的方法，主要是四个</li></ul><table><thead><tr><th>方法</th><th>描述</th><th>是否安全</th></tr></thead><tbody><tr><td>GET</td><td>从服务器上检索资源信息，资源通过请求的URL来进行标识</td><td>是</td></tr><tr><td>POST</td><td>传送数据到服务器，数据会由监听该请求的URL处理器进行处理</td><td>否</td></tr><tr><td>PUT</td><td>按照请求的URＬ，防治资源到服务器指定位置</td><td>否</td></tr><tr><td>DELETE</td><td>将请求URL标识的资源从服务器上删除</td><td>否</td></tr></tbody></table><h4 id="表述资源"><a href="#表述资源" class="headerlink" title="表述资源"></a>表述资源</h4><ul><li>Spring提供两种形式，将资源的Java表述形式转换为发送给客户端的表述形式：<ul><li>基于视图渲染进行协商</li><li>HTTP消息转换器</li></ul></li><li>协商资源表述<br>bean配置:<figure class="highlight plain"><figcaption><span>根据客户端的不同的请求决定不同的view进行响应, 如/blog/1.json/blog/1.xml--></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.ContentNegotiatingViewResolver&quot;&gt;</span><br><span class="line">&lt;!-- 设置为true以忽略对Accept Header的支持--&gt;</span><br><span class="line">         ##&lt;property name=&quot;ignoreAcceptHeader&quot; value=&quot;true&quot;/&gt;</span><br><span class="line"> &lt;!-- 在没有扩展名时即: &quot;/user/1&quot; 时的默认展现形式 --&gt;</span><br><span class="line">        &lt;property name=&quot;defaultContentType&quot; value=&quot;text/html&quot;/&gt;</span><br><span class="line">&lt;!-- 扩展名至mimeType的映射,即 /user.json =&gt; application/json --&gt;</span><br><span class="line">        &lt;property name=&quot;mediaTypes&quot;&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key=&quot;json&quot; value=&quot;application/json&quot; /&gt;</span><br><span class="line">                &lt;entry key=&quot;xml&quot; value=&quot;application/xml&quot; /&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul><ol><li>确定请求的媒体类型<ul><li>ViewResolver首先查找URL中的文件扩展名，将文件扩展名与mediatype的条目匹配，如果找到匹配项，则使用该媒体类型，并覆盖accpt头信息中的任何媒体类型</li><li>如果找不到URL中的扩展名，那么就使用Accept中的头信息的媒体类型</li><li>如果请求头中不包含Accept头信息，那么就使用defaultContentType属性中设置的媒体类型</li></ul></li><li>影响如何选择类型<ul><li>将favorPathExtension属性设置为false，将会使得ContextNegotiatingViewResolver忽略URL路径扩展名</li><li>将JAF添加到类路径下将会使得ContextNegotiatingViewResolver除了使用mediaTypes属性中的条目外，在路径扩展名确定媒体类型时还会借助JAF</li><li>将favorParameter属性设置为true，并且请求中包含名为format参数，那么format参数的值将会mediatype属性来进行匹配，即使URL文件中没有文件扩展名也能匹配其中的媒体类型</li><li>ignoreAcceptHeader属性设置为true，将会忽略Accept头信息</li></ul></li><li>查找视图<ul><li>ContextNegotiatingViewResolver循环所有保存的媒体类型，找到能与之匹配内容类型的视图，完成视图解析匹配</li><li>如果ContextNegotiatingViewResolver没有找到合适的视图，那么它将返回null视图，或者如果useNotAcceptableStatusCode属性被设置为true，那么将返回带有http状态码406(Not Acceptable)的视图</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP九大内置对象、四个作用域以及六大基本动作</title>
      <link href="/archives/ac0ee78d.html"/>
      <url>/archives/ac0ee78d.html</url>
      
        <content type="html"><![CDATA[<h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><ol><li>request：javax.servlet.ServletRequest的子类型，此对象封装了由WEB浏览器或其它客户端生成地HTTP请求的细节（参数，属性，头标和数据）<ul><li>常用方法：getParameter、getParameterNames 和getParameterValues 通过调用这几个方法来获取请求对象中所包含的参数的值</li></ul></li><li>response： javax.servlet.ServletResponse的子类型，此对象封装了返回到HTTP客户端的输出，向页面作者提供设置响应头标和状态码的方式。经常用来设置HTTP标题，添加cookie，设置响应内容的类型和状态，发送HTTP重定向和编码URL</li><li>out: javax.servlet.jsp.JspWriter类型，代表输出流的对象<ul><li>常用的方法除了pirnt和println之外，还包括clear、clearBuffer、flush、getBufferSize和getRemaining，这是因为“out” 对象内部包含了一个缓冲区，所以需要一些对缓冲区进行操作的方法</li></ul></li><li>session: javax.servlet.http.HttpSession类型，主要用于跟踪对话;HttpSession是一个类似哈希表的与单一WEB浏览器会话相关的对象，它存在于HTTP请求之间，可以存储任<br>何类型的命名对象;<ul><li>“session” 对象建立在cookie的基础上，所以使用时应注意判断一下客户端是否打开了cookie。常用的方法包括getId、 getValue、 getValueNames和putValue等</li></ul></li><li>pageContext: javax.servlet.jsp.PageContext（抽象类）类型;此对象提供所有四个作用域层次的属性查询和修改能力，它也提供了转发请求到其它资源和包含其他资源的方法 ,该对象的方法都是抽象方法，代表的是当前页面运行的一些属性<ul><li>常用方法：findAttribute、getAttribute、getAttributesScope 和getAttributeNamesInScope</li><li>一般情况下pageContext对象用到得也不是很多，只有在项目所面临的情况比较复杂的情况下，才会利用到页面属性来辅助处理。</li></ul></li><li>application：javax.servlet.ServletContext类型，servlet的环境通过调用getServletConfig().getContext()方法获得;它提供了关于服务器版本，应用级初始化参数和应用内资源绝对路径，注册信息的方式得并设置会话属性<ul><li>常用的方法有getMimeType和getRealPath等</li></ul></li><li>config：javax.servlet.ServletConfig类型，（页面执行期）<ul><li>常用的方法有getInitParameter和getInitParameterNames，以获得Servlet初始化时的参数</li></ul></li><li>exception: java.lang.Throwable,通过JSP错误页面中一个catch块已经益出但没有捕获的java.lang.Throwable的任意实例，传向了errorPage的URI。作用域为page（页面执行期）。注意exception只有在page指令中具有属性isErrorPage=”true”时才有效。</li><li>page:java.lang.Object类型，指向页面自身的方式</li></ol><h2 id="内置对象与作用域对应关系"><a href="#内置对象与作用域对应关系" class="headerlink" title="内置对象与作用域对应关系"></a>内置对象与作用域对应关系</h2><table><thead><tr><th>对象</th><th>对象名称</th><th>所属类</th><th>作用域</th></tr></thead><tbody><tr><td>request</td><td>请求对象</td><td>javax.servlet.ServletRequest</td><td>Request</td></tr><tr><td>response</td><td>相应对象</td><td>javax.servlet.SrvletResponse</td><td>Page</td></tr><tr><td>pageContext</td><td>页面上下文</td><td>javax.servlet.jsp.PageContext</td><td>Page</td></tr><tr><td>session</td><td>会话对象</td><td>javax.servlet.http.HttpSession</td><td>Session</td></tr><tr><td>application</td><td>应用程序对象</td><td>javax.servlet.ServletContext</td><td>Application</td></tr><tr><td>out</td><td>输出对象</td><td>javax.servlet.jsp.JspWriter</td><td>Page</td></tr><tr><td>config</td><td>配置对象</td><td>javax.servlet.ServletConfig</td><td>Page</td></tr><tr><td>page</td><td>页面对象</td><td>javax.lang.Object</td><td>Page</td></tr><tr><td>exception</td><td>例外对象</td><td>javax.lang.Throwable</td><td>page</td></tr></tbody></table><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><table><thead><tr><th>作用域</th><th>有效范围</th></tr></thead><tbody><tr><td>pageContext</td><td>有效范围只是在当前jsp页面</td></tr><tr><td>request</td><td>有效范围只是在当前请求周期</td></tr><tr><td>session</td><td>当前会话(用户打开浏览器到用户关闭浏览器之间的过程),也就是说，只要用户不关浏览器，服务器就有办法知道这些请求是一个人发起的,整个过程被称为一个会话,而放到会话中的变量，就可以在当前会话的所有请求里使用</td></tr><tr><td>application</td><td>整个应用(只要服务器不重启，都有效);与上述三个不同的是，application里的变量可以被所有用户共用</td></tr></tbody></table><h2 id="六种基本动作"><a href="#六种基本动作" class="headerlink" title="六种基本动作"></a>六种基本动作</h2><ul><li><code>&lt;jsp:include page=&quot;&quot; /&gt;</code>: 在页面请求中包含一个文件</li><li><code>&lt;jsp:useBean id=&quot;&quot; class=&quot;&quot; scope=&quot;application page request session&quot; /&gt;</code>:寻找或者实例化一个javaBean</li><li><code>&lt;jsp:setProperty name=&quot;&quot; property=&quot;&quot; value=&quot;&quot; /&gt;</code>:设置javaBean的属性，通过反射调用方法</li><li><code>&lt;jsp:getProperty name=&quot;&quot; property=&quot;&quot;/&gt;</code>:取得某个javaBean的属性</li><li><code>&lt;jsp:forward page=&quot;&quot;/&gt;</code>:把请求转到一个新的页面</li><li><code>&lt;jsp:plugin&gt;</code>:插入Applet程序的代码</li><li><code>&lt;jsp:param name=&quot;&quot; value=&quot;&quot; /&gt;</code>:用于传参数，和forward一起使用</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Servlet </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 实现原理与结构解析</title>
      <link href="/archives/3fb7ed9.html"/>
      <url>/archives/3fb7ed9.html</url>
      
        <content type="html"><![CDATA[<h3 id="Mybatis概述"><a href="#Mybatis概述" class="headerlink" title="Mybatis概述"></a>Mybatis概述</h3><ul><li>Mybatis是支持普通SQL查询，存储过程和高级映射的优秀持久层框架</li><li>消除了几乎所有的JDBC代码和参数的手工设置以及结果集的检索</li><li>Mybatis使用简单的XML或注解用于配置和原始映射，将接口和Java的POJOs映射成数据库中的记录</li><li>每个Mybatis应用程序都是基于SqlSessionFactory实例，而一个SqlSessionFactory实例可以通过SqlSessionFactoryBuilder读取xml配置文件或者一个预定义的配置类的实例获得</li></ul><h3 id="Mybatis工作流程"><a href="#Mybatis工作流程" class="headerlink" title="Mybatis工作流程"></a>Mybatis工作流程</h3><ol><li>加载配置并初始化</li></ol><ul><li>将SQL的配置信息加载成一个个<code>MappedStatement</code>对象(包括传入参数映射配置、执行SQL语句、结果映射配置)，存储在内存中</li></ul><ol start="2"><li>接受调用请求</li></ol><ul><li>触发条件：调用Mybatis提供的API</li><li>传入参数：为SQL的ID和传入参数对象</li><li>处理过程：将请求传递给下层的请求处理层进行处理</li></ul><ol start="3"><li>处理触发请求<ul><li>触发条件：API接口层传递请求过来</li><li>传入参数：SQL的ID和传入参数的对象</li><li>处理过程：<pre><code>1. 根据SQL的ID查找对应的MappedStatement对象2. 根据传入的参数对象解析MappedStatement对象，最终得到要执行的SQL和执行传入参数3. 获取数据库连接，根据得到的最终SQL语句和执行传入参数到数据库执行，并得到执行结果4. 根据MappedStatement对象中的结果映射配置对得到的执行结果进行转换处理，并得到最终的处理结果5. 释放连接资源</code></pre></li></ul></li><li>返回接受最终处理结果</li></ol><h3 id="工作原理结构"><a href="#工作原理结构" class="headerlink" title="工作原理结构"></a>工作原理结构</h3><ul><li>功能架构：Mybatis的功能架构分为四层<ol><li>API接口层：提供给外部使用的API接口，开发人员通过这些本地的API来操纵数据库.接口层已收到调用请求就会调用数据处理层来完成具体的数据处理</li><li>数据处理层：负责具体的SQL查找，SQL解析，和结果执行映射处理等，其主要目的是根据调用的请求完成一次数据库的操作</li><li>基础支撑层：负责最基础的功能支撑，包括连接管理，事务管理，配置加载和缓存处理，这些都是共用的，将他们抽取出来作为最基础的封装组件，为上层的数据处理提供最基础的支撑</li><li>引导层：配置和启动Mybatis配置信息的方式，Mybatis提供两种方式来引导Mybatis：</li></ol><ul><li>基于XML配置文件获取配置信息</li><li>基于Java API的方式<center><br><img src="http://qvm.lays3721.top/%E5%8A%9F%E8%83%BD%E6%9E%B6%E6%9E%84.png" alt="Mybatis功能架构"><br></center></li></ul></li><li>框架架构：<ol><li>加载配置：配置来源于两个地方，一处是配置文件，一处是Java代码的注解，将SQL的配置信息加载为宜个MappedStatement对象(包括传入参数映射配置，执行的SQL语句，结果映射配置)　，存储在内存中</li><li>SQL解析：当API接口层接收到调用请求时，会接受到传入SQL的ID和传入对象(可以是Map、JavaBean对象或者是基本数据类型)，Mybatis会根据SQL的ID找到对应的MappedStatement，然后根据传入参数对象对MappedStatement进行解析，解析后可以得到最终要执行的SQL语句和参数</li><li>SQL执行：将最终得到的SQL语句和参数传入数据库中执行，得到数据库返回的执行结果</li><li>结果映射：将操作数据库的结果按照映射的配置进行转换，可以转换成HashMap，JavaBean或者基本数据类型，并将最终结果返回<center><br><img src="http://qvm.lays3721.top/%E5%8A%9F%E8%83%BD%E6%9E%B6%E6%9E%84.png" alt="Mybatis框架架构"><br>Panda<br></center></li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 迭代器Iterator的用法</title>
      <link href="/archives/4b2bec15.html"/>
      <url>/archives/4b2bec15.html</url>
      
        <content type="html"><![CDATA[<h3 id="迭代器-Iterator-概述"><a href="#迭代器-Iterator-概述" class="headerlink" title="迭代器(Iterator)概述"></a>迭代器(Iterator)概述</h3><ul><li>Iterator是作为一个接口存在的，它定义了迭代器所具有的功能</li><li>迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构;迭代器通常被称为“轻量级”对象，因为创建它的代价小.</li></ul><h3 id="迭代器的好处"><a href="#迭代器的好处" class="headerlink" title="迭代器的好处"></a>迭代器的好处</h3><ol><li>迭代器可以提供统一的迭代方式。</li><li>迭代器也可以在对客户端透明的情况下，提供各种不同的迭代方式。</li><li>迭代器提供一种<a href="http://wiki.jikexueyuan.com/project/java-enhancement/java-thirtyfour.html" target="_blank" rel="noopener">快速失败机制</a>，防止多线程下迭代的不安全操作。</li></ol><h3 id="功能方法"><a href="#功能方法" class="headerlink" title="功能方法"></a>功能方法</h3><ul><li><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; iter = list.iterator();</span><br><span class="line">while(iter.hasNext())</span><br><span class="line">&#123;</span><br><span class="line">iter.next();</span><br><span class="line">//System.out.println(iter.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Java中的迭代器功能比较简单，并且只能单向移动;</p></li><li>方法:<code>iterator();</code>要求容器返回一个Iterator;第一次调用Iterator的next()方法时，它返回序列的第一个元素</li><li><code>next();</code>获得序列中的下一个元素</li><li><code>hasNext();</code>检查序列中是否还有元素</li><li><code>remove();</code>将迭代器新返回的元素删除</li></ul><h3 id="知识扩充-遍历List集合的方法"><a href="#知识扩充-遍历List集合的方法" class="headerlink" title="知识扩充(遍历List集合的方法)"></a>知识扩充(遍历List集合的方法)</h3><ul><li><p>foreache 遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(String tmp:list)&#123;</span><br><span class="line">System.out.println(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for 循环遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt; list.size(); i++)&#123;</span><br><span class="line">list.get(i);</span><br><span class="line">System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Iterator遍历(例子上面已经给出)</p></li><li><p>其中，对于同一个List集合，统计每个遍历方式时间消耗如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List first visit method(foreache):</span><br><span class="line">Run Time:170(ms)</span><br><span class="line">List second visit method(for):</span><br><span class="line">Run Time:10(ms)</span><br><span class="line">List Third visit method(Iterator):</span><br><span class="line">Run Time:34(ms)</span><br></pre></td></tr></table></figure></li><li><p>显而易见；迭代器遍历在时间上的优势很大，代码简洁</p></li><li>同时，与for/foreach 相比，Iterator使用相同方式去遍历集合中元素，而不用考虑集合类的内部实现(只要它实现了 java.lang.Iterable 接口)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql视图技术原理与应用</title>
      <link href="/archives/69b20980.html"/>
      <url>/archives/69b20980.html</url>
      
        <content type="html"><![CDATA[<h3 id="视图概述"><a href="#视图概述" class="headerlink" title="视图概述"></a>视图概述</h3><ul><li>定义：视图是一个虚拟表，其内容由查询定义，视图表内存在行列数据，但是不在数据库中以存储的数据值集形式存在，行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成.</li><li>更新过程：当查询视图时，数据库从相应的引用表中引入数据到视图表</li><li>视图技术优点：<ul><li>视图能简化用户操作：视图机制使用户可以将注意力集中在所关心的数据上，使数据库看起来结构简单，清晰，并简化用户的查询操作</li><li>视图使用户能以多种身份看待数据：灵活地实现多种不同类型的用户共享同一个数据库</li><li>视图对重构数据库提供了不同程度上的逻辑独立性：重构时(数据库逻辑改变)，新增关系表或者对原有关系增加新字段，不会影响应用程序所需的数据查询形式</li><li>适当的利用视图可以更清晰地表达查询</li></ul></li></ul><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例:"></a>使用案例:</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><ul><li><code>ALGORITHM</code>:定义查询算法<ul><li><code>MERGE</code>:将查询视图的语句与视图的定义语句合并处理</li><li><code>TEMPTABLE</code>:视图查询的结果保存到临时表，而后在该临时表基础上执行查询视图的语句</li><li><code>UNDEFINED</code> : 由Mysql选择使用的算法，一般首选MERGE，因为MERGE更有效率，而且TEMPTABLE不支持更新</li></ul></li><li>WITH[CASCADED|LOCAL] CHECK OPTION 解析<ul><li>LOCAL参数表示更新视图时只要满足该视图本身定义的条件即可</li><li>CASCADED参数表示更新视图时需要满足所有相关视图和表的条件;没有指明时，该参数为默认值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] VIEW [db_name.]view_name [(column_list)] AS select_statement [WITH [CASCADED | LOCAL] CHECK OPTION]</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="创建视图："><a href="#创建视图：" class="headerlink" title="创建视图："></a>创建视图：</h4><ul><li>在单表上创建：<code>create view vName(id,sex,age) as select id,sex,age from student;</code></li><li>在多表上创建：<code>CREATE VIEW VName(ID, NAME, SEX, AGE,DEPARTMENT,POS,EXPERENCE) AS SELECT a.ID, a.NAME, a.SEX, a.AGE,a.DEPARTMENT,b.POS,b.EXPERENCE FROM learning.t_employee a,learning.t_employee_detail b WHERE a.ID=b.ID;</code></li><li>查看视图：<code>DESCRIBE vName;</code>或<code>SHOW TABLE STATUS;</code>或<code>SHOW CREATE VIEW VnAME;</code></li><li>修改视图：<ul><li><code>create or replace</code> 指令：<code>CREATE OR REPLACE VIEW V_VIEW1(ID, NAME, SEX) AS SELECT ID, NAME, SEX  FROM learning.t_employee;</code></li><li><code>ALERT</code>指令: <code>ALTER VIEW  V_VIEW1(ID, NAME) AS SELECT ID, NAME  FROM learning.t_employee;</code></li></ul></li><li>更新视图：主要通过(insert,update,delete)操作表中数据；由于视图上的数据来自于基本表，更新视图虚拟表上的数据都会转换到基本表更新.<ul><li>更新视图时，只能更新权限范围内的数据，超出范围，不能更新</li><li>指令实例：<code>update vName set project=&quot;psychonologic&quot; where id = 2;</code></li><li>不可更新的视图：由于虚拟表对应实体表中的数据，所以不是所有的视图表都能更新；如果视图含有下列结构中的任何一种，则不能更新：<ul><li>聚合函数(SUM(),MIN(),MAX(),COUNT()…)</li><li>DISTINCT</li><li>GROUP BY</li><li>HAVING</li><li>UNION/UNION ALL</li><li>位于选择序列中的子查询</li><li>Jion</li><li>FROM字句中的不可更新视图</li><li>WHERE子句的子查询，引用FROM字句的表</li><li>仅引用文字值</li><li>ALGORITHM = TEMPTABLE</li></ul></li><li>对于更新操作的提醒：视图虽然可以更新数据，但是有很多限制，一般情况下，最好将视图作为查询数据的虚拟表，而不要通过视图更新数据. 对于一些结构更加复杂的数据库表，最好在实体表中更新数据</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql触发器学与用</title>
      <link href="/archives/64423a64.html"/>
      <url>/archives/64423a64.html</url>
      
        <content type="html"><![CDATA[<h3 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h3><ul><li>Mysql在5.0.2版本以上开始支持触发器，触发器是有某些带有命令的的时间来出发某些操作，这些事件操作包括 insert delete update…</li><li>触发器可以用于记录对数据库的操作，它是一种与表操作有关的数据库对象，当触发器所在表上出现某个触发事件以及触发事件时，将调用该对象。即表的操作事件触发表上的触发器的执行</li></ul><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><ul><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CRATE TRIGGER TRIGGER_NAME </span><br><span class="line">TRIGGER_TIME</span><br><span class="line">TRIGGER_EVENT ON TRIGGER_TABLE</span><br><span class="line">FOR EACH ROW</span><br><span class="line">TRIGGER_STATEMEMTS</span><br></pre></td></tr></table></figure></li><li><p>解析：</p><ul><li>TRIGGER_NAME : 表示触发器名称，用户自定义</li><li>TRIGGER_TIME :  标识触发时机，取值为：before 、 after </li><li>TRIGGER_EVENT : 标识触发事件，取值为：INSERT , UPDATE ,DELETE</li><li>TRIGGER_TABLE ：标识建立触发器的表名，也就是触发器的表对象</li><li>TRIGGER_STATEMENT：触发器程序体，可以是一条语句，或如果是多条语句，用<code>begin [stmt_list] end;</code>包含，但是每条语句之间用分好分隔</li><li>根据触发时机与触发事件的组合，可以看出，最多可以建立6种触发器(注：一个表上不能简历相同的触发器)</li></ul></li><li>对于<code>begin...end</code>，由于中间使用了分号(mysql中标记执行完语句的符号)而导致begin找不到与之匹配的end，因此引入了<code>DELIMITER</code>命令，作为定界分隔符；<code>end$ DELIMITER ;</code></li></ul><h3 id="一个完整的触发器示例"><a href="#一个完整的触发器示例" class="headerlink" title="一个完整的触发器示例"></a>一个完整的触发器示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line">create trigger tri_stuInsert after insert</span><br><span class="line">on student for each row</span><br><span class="line">begin</span><br><span class="line">declare c int;</span><br><span class="line">set c = (select stuCount from class where classID=new.classID);</span><br><span class="line">update class set stuCount = c + 1 where classID = new.classID;</span><br><span class="line">end $</span><br><span class="line">DELIMITER;</span><br></pre></td></tr></table></figure><ul><li><p>mysql用使用DECLARE 来定义局部变量，并且该遍历只能在BEGIN…END之间使用，并且只能放在期间复合语句的开头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式：DECLARE var_name[,...] type [DEFAULT value]</span><br></pre></td></tr></table></figure></li><li><p>new与old：</p><ul><li>INSERT型触发器 ：NEW表示将要(BEFORE)或已经(AFTER)插入的新数据</li><li>UPDATE型触发器：OLD用来表示将要或者已经被修改的原数据，NEW表示将要或者已经被修改的新数据</li><li>DELETE型触发器：OLD用来表示将要或已经被删除的数据</li><li>并且，OLD是只读的，而NEW可以在触发器中使用set赋值，避免二次触发触发器，造成循环调用</li></ul></li></ul><h3 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h3><ul><li>语法：可以在后面指定数据库名来查看触发器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show triggers [from scheme_name];</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h3><ul><li>语法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop trigger [if exists] trigger_name;</span><br></pre></td></tr></table></figure></li></ul><h3 id="触发器执行顺序"><a href="#触发器执行顺序" class="headerlink" title="触发器执行顺序"></a>触发器执行顺序</h3><ul><li>我们建立的数据库一般都是 InnoDB 数据库，其上建立的表是事务性表，也就是事务安全的。这时，若SQL语句或触发器执行失败，MySQL 会回滚事务，有：</li></ul><ol><li>如果 BEFORE 触发器执行失败，SQL 无法正确执行</li><li>SQL 执行失败时，AFTER 型触发器不会触发</li><li>AFTER 类型的触发器执行失败，SQL 会回滚</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 实现TCP/IP Socket通信</title>
      <link href="/archives/39b075e7.html"/>
      <url>/archives/39b075e7.html</url>
      
        <content type="html"><![CDATA[<h5 id="Java提供的网络功能有四大类"><a href="#Java提供的网络功能有四大类" class="headerlink" title="Java提供的网络功能有四大类"></a>Java提供的网络功能有四大类</h5><ul><li>InetAddress; 用于标识网络上的硬件资源，比如MAC地址等．．．</li><li>URL：统一资源定位符 通过URL可以直接读取或写入网络上的数据</li><li>Sockets：使用TCP协议实现网络通信的Socket的相关类</li><li>Datagram：使用UDP协议，将数据保存在数据报中，通过网络进行通信<h5 id="InetAddress类：表示互联网协议-IP-地址"><a href="#InetAddress类：表示互联网协议-IP-地址" class="headerlink" title="InetAddress类：表示互联网协议(IP)地址"></a>InetAddress类：表示互联网协议(IP)地址</h5></li><li>通过静态方法获取实例：(然后就可以根据jdk文档，使用相关方法)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InetAddress address = InetAddress.getLocalHost();//或者</span><br><span class="line">InetAddress address1 = InetAddress.getByName(&quot;10.2.18.87&quot;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="Socket实现TCP通信-基于数据流套接字"><a href="#Socket实现TCP通信-基于数据流套接字" class="headerlink" title="Socket实现TCP通信(基于数据流套接字)"></a>Socket实现TCP通信(基于数据流套接字)</h5><ul><li>建立连接流程： 服务器处于监听状态，等待并接受客户端创建的socket向服务器发送请求，服务器接收请求之后，创建连接Socket进行通信</li><li>开始通信：通过相关的输入流(InputStream)、输出流(OutputStream)，发送接收数据</li><li>结束通信：关闭客户端和服务端的socket，释放资源</li><li>实现步骤：<ol><li>创建ServerSocket和Socket</li><li>打开连接到Socket的输入/输出流</li><li>按照协议对Socket进行读写操作</li><li>通信完毕，关闭输出流，关闭Socket</li></ol></li><li>服务端实现步骤：<ol><li>创建ServerSocket对象，绑定监听端口</li><li>通过accept()方法绑定客户端请求</li><li>建立连接后，通过输入流读取客户端发送的请求信息</li><li>通过输出流向客户端发送响应信息</li><li>关闭相关资源</li></ol></li><li>客户端实现步骤：<ol><li>创建Socket对象，指明需要连接的服务器的地址与端口号</li><li>连接创建后，通过输出流向服务器发送请求信息</li><li>关闭相关资源</li></ol></li><li>主要方法：getInputStream(), getOutPutStream();实现发送/接受数据 </li><li>多线程实现服务器与多客户端之间通信<ul><li>基本步骤：<ol><li>在服务器端创建ServerSock，循环调用accept()等待客户端连接</li><li>客户端创建一个Socket并请求和服务端连接</li><li>服务端就收客户端请求，创建socket与该客户简历专线连接</li><li>建立链接的两个Socket在一个单独的线程上对话</li><li>服务器机箱等待新的连接<h5 id="UDP-Socket编程"><a href="#UDP-Socket编程" class="headerlink" title="UDP Socket编程"></a>UDP Socket编程</h5></li></ol></li></ul></li><li>使用的类：DatagramPacket类，DatagramSocket类；可以在jdk文档里面了解其中方法的用法</li><li>服务端实现步骤：<ol><li>创建DatagramSocket，指定端口号</li><li>创建DatagramPacket，用于接收客户端数据</li><li>接受客户端发送的数据</li><li>读取数据</li></ol></li><li>客户端实现步骤<ol><li>定义发送信息</li><li>创建DatagramPacket，包含要发送的数据信息</li><li>创建DatagramSocket</li><li>发送数据</li></ol></li><li>同样，也可以通过像tcp Socket通信那样完善，添加多线程监控客户端请求并相应;</li><li>备注：程序代码都在Github 仓库：<a href="https://github.com/liangqian/socketDemo.git" target="_blank" rel="noopener">enter link description here</a> </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>struts2基础笔记(1)</title>
      <link href="/archives/5970580b.html"/>
      <url>/archives/5970580b.html</url>
      
        <content type="html"><![CDATA[<h3 id="Sturts2访问Servlet-API"><a href="#Sturts2访问Servlet-API" class="headerlink" title="Sturts2访问Servlet API"></a>Sturts2访问Servlet API</h3><ul><li><p>访问Servlet API的三种方式</p><ul><li><p>ActionContext：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> ActionContext actionContext=ActionContext.getContext();  </span><br><span class="line">Map&lt;String,Object&gt; map=actionContext.getSession();  </span><br><span class="line">map.put(&quot;hello&quot;,&quot;helloworld&quot;);</span><br></pre></td></tr></table></figure></li><li><p>实现***Aware接口：通过实现指定接口ServletContextAware，ServletRequestAware，ServletResponseAware，这种方式不推荐使用，与ServletAPI的耦合性大</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class LoginAction extends ActionSupport implements ServletRequestAware&#123; </span><br><span class="line">HttpSession session=request.getSession();</span><br><span class="line">//something same as httpSetvlet</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ServletActionContext：ServletActionContext是面向action,特定于上下文的信息。继承于ActionContext</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest request=ServletActionContext.getRequest();  </span><br><span class="line">    HttpSession session=request.getSession();  </span><br><span class="line">    session.setAttribute(&quot;hello&quot;, &quot;helloworld&quot;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Action的搜索顺序"><a href="#Action的搜索顺序" class="headerlink" title="Action的搜索顺序"></a>Action的搜索顺序</h3><ol><li>发生URL请求：<code>http://localhost:80/projectName/path1/path2/path3/test.action</code></li><li>首先会检索namespace为<code>/path1/path2/path3/</code>的package里面的test；如果找到则访问<ul><li>否则，转向默认表空间[namespace=””]里面寻找该action，找到则访问<ul><li>否则，转向默认表空间[namespace=””]寻找默认的action，找到则访问改action<ul><li>如果默认空间中没有设置默认的action，则返回404….[not found]</li></ul></li></ul></li></ul></li><li>首先会检索namespace为<code>/path1/path2/</code>的package里面的test；如果找到则访问<ul><li>否则，转向默认表空间[namespace=””]里面寻找该action，找到则访问<ul><li>否则，转向默认表空间[namespace=””]寻找默认的action，找到则访问改action<ul><li>如果默认空间中没有设置默认的action，则返回404….[not found]</li></ul></li></ul></li></ul></li><li>首先会检索namespace为<code>/path1/</code>的package里面的test；如果找到则访问<ul><li>否则，转向默认表空间[namespace=””]里面寻找该action，找到则访问<ul><li>否则，转向默认表空间[namespace=””]寻找默认的action，找到则访问改action<ul><li>如果默认空间中没有设置默认的action，则返回404….[not found]</li></ul></li></ul></li></ul></li><li>如果仍然不存在这个package,就去默认的namaspace的package下面去找名字为test的action(默认的命名空间为空字符串””),<br>如果还是找不到,页面提示找不到action,报404找不到内容的错误</li></ol><h3 id="动态方法调用"><a href="#动态方法调用" class="headerlink" title="动态方法调用"></a>动态方法调用</h3><ul><li>概述：解决一个action对应多个请求的处理的问题，简化开发，避免Action太多</li><li>方法一：指定Method属性<ul><li>在配置文件中指定访问方法(method)：<figure class="highlight plain"><figcaption><span>name</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;result name=&quot;success&quot;&gt;/result.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>方法二：感叹号方式<ul><li>开启常量值配置：<code>&lt;constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;true&quot;&gt;&lt;/constant&gt;</code></li><li>根据返回值在<code>&lt;result&gt;</code>里面用name指定视图：<code>&lt;result name=&quot;result&quot;&gt;/result.jsp&lt;/result&gt;</code></li><li>调用在action后缀之前添加感叹号和方法的方式访问：<code>http://localhost:8080/testStruts2/hello!result.action</code></li></ul></li><li>方法三：通配符方式<ul><li>在<code>&lt;action&gt;</code>配置里面name属性后面用<code>_*</code>的方式统配参数：第一个星号对应参数{1},第二个星号对应第二个参数{2}，可以统配包名，类名，方法名，或者部分名称的切割</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;action name=&quot;hello_*_*&quot; class=&quot;&#123;1&#125;&quot; method=&quot;execute&quot;&gt;</span><br><span class="line">&lt;result name=&quot;success&quot;&gt;/&#123;2&#125;.jsp&lt;/result&gt;</span><br><span class="line">  &lt;/action&gt;</span><br></pre></td></tr></table></figure><h3 id="指定多个配置文件"><a href="#指定多个配置文件" class="headerlink" title="指定多个配置文件"></a>指定多个配置文件</h3><ul><li>项目中action特别多，如果全在一个<code>struts.xml</code>里面，就很复杂</li><li>可以通过<include>导入多个分割了的action配置文件模块：<code>&lt;include file=&quot;hello.xml&quot;&gt;&lt;/include&gt;</code></include></li><li>也可以统一配置文件的编码：用<code>&lt;constrant&gt;</code><h3 id="默认action"><a href="#默认action" class="headerlink" title="默认action"></a>默认action</h3></li><li>防止出现尴尬页面…..</li><li>在<code>struts.xml</code>配置文件配置:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;default-action-ref name=&quot;hello&quot;&gt;&lt;/default-action-ref&gt;</span><br><span class="line">&lt;action name=&quot;hello&quot;&gt;&lt;result name=&quot;error&quot;&gt;/error.jsp&lt;/result&gt;&lt;/action&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="struts2后缀："><a href="#struts2后缀：" class="headerlink" title="struts2后缀："></a>struts2后缀：</h3><ul><li>伪造页面，安全，防hacker</li><li>改成html后缀：<code>&lt;constant name=&quot;struts.action.extension&quot; value=&quot;html&quot;/&gt;</code></li><li>取消后缀,只需消息value的值：<code>&lt;constant name=&quot;struts.action.extension&quot; value=&quot;&quot;/&gt;</code></li><li>也可以在struts.properties里面配置，还可以在里面配置多个参数</li><li>可以在web.xml里面配置<init-param>来指定后缀<h3 id="接收参数："><a href="#接收参数：" class="headerlink" title="接收参数："></a>接收参数：</h3></init-param></li><li>方法一：使用Action属性接收：<ul><li>在接受的类中创建与提交部分命名一致的属性，以及getter，setter；传过来 的时候就能接收</li></ul></li><li><p>方法二：使用Domain Model接收：</p><ul><li>创建对象model来接收，为了将数据存入到指定的对象模型，在提交数据的时候，需要指定存入的已经实例化的对象的属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;用户名：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;us.username&quot;&gt;</span><br><span class="line"> &lt;label&gt;密  码：&lt;/label&gt;&lt;input type=&quot;password&quot; name=&quot;us.password&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法三：使用ModelDriven接收：</p><ul><li>实现ModelDriven的接口；如果通过对象接受数据，必须实例化，并且，在提交数据的时候，不需要再指定属性传输的对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;用户名：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">&lt;label&gt;密  码：&lt;/label&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">&lt;label&gt;书籍1：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;booklist[0]&quot;&gt;</span><br><span class="line">&lt;label&gt;书籍2：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;booklist[1]&quot;&gt;</span><br><span class="line">&lt;label&gt;书籍3：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;booklist[2]&quot;&gt;  //user对象里面设置List集合接收</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class hwaction extends ActionSupport implements ModelDriven&lt;user&gt; &#123;  //泛型定义需要赋值转换的类</span><br><span class="line">    private user us = new user();  \\不需要getter setter...</span><br><span class="line">    public String login()&#123;</span><br><span class="line">System.out.println(us.getUsername());</span><br><span class="line"> System.out.println(us.getBooklist().get(2));</span><br><span class="line">System.out.println(us.getBooklist().get(1));</span><br><span class="line">System.out.println(us.getBooklist().get(0));</span><br><span class="line">        return SUCCESS;&#125;</span><br><span class="line">     @Override</span><br><span class="line">    public user getModel() &#123; </span><br><span class="line">        return us; //返回需要转换的对象 &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>方法四：使用request方法接受 </li></ul><p>###处理结果类型</p><ul><li>处理结果标签里面：type属性，默认(dispatcher)是定义jsp模板，还有其他的xstl,chain,redirect,stream,plaintext….</li><li>五个系统内置属性：success，none，error，login，input</li><li>success：正确执行完成，返回响应的视图</li><li>none：正确执行，但是不返回视图</li><li>error：执行失败，返回到错误处理视图</li><li>login：由于用户没有登陆的原因没有正确执行，将返回登陆视图，要求用户进行登陆身份验证</li><li>input：Action的执行需要前端界面获取参数，input就是代表这个参数的输入界面<ul><li>表单验证的出现类型转换错误的时候会跳转回去</li><li>在判断验证部分使用<code>this.addFieldError(&quot;username&quot;,&quot;用户名不为空&quot;)</code>，使用<code>return input;</code>跳转，并在前端部分使用struts标签显示username的提示</li><li>继承ActionSupport里面的Validate()方法，也可以实现跳转<h3 id="根据位置不同来划分处理结果类型："><a href="#根据位置不同来划分处理结果类型：" class="headerlink" title="根据位置不同来划分处理结果类型："></a>根据位置不同来划分处理结果类型：</h3><ul><li>局部结果</li><li>全局结果：所有的包下面的请求都可以公用其中返回功能</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比较http请求方法中的GET与POST方法</title>
      <link href="/archives/4ac038bf.html"/>
      <url>/archives/4ac038bf.html</url>
      
        <content type="html"><![CDATA[<h4 id="GET方法和POST方法的异同"><a href="#GET方法和POST方法的异同" class="headerlink" title="GET方法和POST方法的异同"></a>GET方法和POST方法的异同</h4><ul><li>GET方法：向页面请求发送已编码的用户信息；页面与已编码信息之间用<code>?</code>隔开传递:<code>http://localhost/test?key1=value&amp;key2=value2</code><ul><li>GET方法的特点是将需要传递信息暴露在URL上面，因此不宜传输敏信息</li><li>同时，GET方法有大小限制：请求字符串最多只能有1024个字符</li></ul></li><li>POST方法：通过比较可靠的方式向后台程序传递数据；但是在传递方式上与GET方法不同，POST方法是通过标准输的形式将一个单独的消息传递给后台程序<h4 id="在后台程序中读取传递过来的数据"><a href="#在后台程序中读取传递过来的数据" class="headerlink" title="在后台程序中读取传递过来的数据"></a>在后台程序中读取传递过来的数据</h4></li><li>解析方法：<ul><li>String getParameter(String str); 获取表单参数值</li><li>String[] getParameterValues(String str); 获取在同一个参数里多个值,并以数组形式返</li><li>String[] getParameterNames();获取请求中所有参数的完整列表</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Servlet </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC常用的控制器方法与使用</title>
      <link href="/archives/86b8ba8f.html"/>
      <url>/archives/86b8ba8f.html</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-mvc-控制器与方法"><a href="#Spring-mvc-控制器与方法" class="headerlink" title="Spring mvc 控制器与方法"></a>Spring mvc 控制器与方法</h2><h4 id="Controller定义一个Controller控制器"><a href="#Controller定义一个Controller控制器" class="headerlink" title="@Controller定义一个Controller控制器"></a>@Controller定义一个Controller控制器</h4><ul><li>在使用这个标记主注解之前需要配置控制器(两种方法)    <ul><li>在Spring MVC配置文件中添加<code>&lt;bean&gt;</code>对象：<code>&lt;bean class=&quot;xyz.royleo.vice&quot;/&gt;</code></li><li>在spring配置文件中@Controller控制器的位置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt; context:component-scan base-package = &quot;com.host.app.web.controller&quot; &gt;  </span><br><span class="line">   &lt; context:exclude-filter type = &quot;annotation&quot;  </span><br><span class="line">       expression = &quot;org.springframework.stereotype.Service&quot; /&gt;  </span><br><span class="line">&lt;/ context:component-scan &gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="RequestMapping来映射Request请求与控制器"><a href="#RequestMapping来映射Request请求与控制器" class="headerlink" title="@RequestMapping来映射Request请求与控制器"></a>@RequestMapping来映射Request请求与控制器</h4><ul><li><p>通过URL模板实现 : 在URL模板中含有变量值,再在<code>@requestMapping</code>的方法里面，通过<code>@PathVariable</code>获取通过RUL传过来的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller  </span><br><span class="line">@RequestMapping ( &quot;/test/&#123;variable1&#125;&quot; )  </span><br><span class="line">public class MyController &#123;  </span><br><span class="line">    @RequestMapping ( &quot;/showView/&#123;variable2&#125;&quot; )  </span><br><span class="line">    public ModelAndView showView( @PathVariable String variable1, @PathVariable ( &quot;variable2&quot; ) int variable2) &#123;  </span><br><span class="line">//do something </span><br><span class="line">       return modelAndView;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>@RequestParam</code>绑定HttpServletRequest请求参数到控制器方法参数</p><ul><li>其中，有requested=false是可选的参数，默认是必须的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping ( &quot;requestParam&quot; )  </span><br><span class="line">ublic String testRequestParam( @RequestParam(required=false) String name, @RequestParam ( &quot;age&quot; ) int age) &#123;  </span><br><span class="line">   return &quot;requestParam&quot; ;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="HttpServletRequest-amp-HttpServletResponse-amp-HttpSession…"><a href="#HttpServletRequest-amp-HttpServletResponse-amp-HttpSession…" class="headerlink" title="HttpServletRequest &amp; HttpServletResponse &amp; HttpSession…"></a>HttpServletRequest &amp; HttpServletResponse &amp; HttpSession…</h4><ul><li>跟普通的Servlet一样，spring mvc中也可以用servlet里面的方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/somePath&quot;)</span><br><span class="line">   public String requestResponseExample(HttpServletRequest request, HttpServletResponse reponses, HttpSession session, Model model) &#123;</span><br><span class="line"> // Todo something here</span><br><span class="line">       return &quot;someView&quot;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="控制器的重定向"><a href="#控制器的重定向" class="headerlink" title="控制器的重定向"></a>控制器的重定向</h4><ul><li>使用前缀：<code>redirect</code>该方法返回字符串，可以重定向到另一页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/redirect&quot;, method = RequestMethod.GET)</span><br><span class="line">    public String authorInfo(Model model) &#123;</span><br><span class="line"> // Do somethong here</span><br><span class="line">  return &quot;redirect:/hello&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用-CookieValue绑定cookie数值到Controller方法参数"><a href="#使用-CookieValue绑定cookie数值到Controller方法参数" class="headerlink" title="使用@CookieValue绑定cookie数值到Controller方法参数"></a>使用<code>@CookieValue</code>绑定cookie数值到Controller方法参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping ( &quot;cookieValue&quot; )</span><br><span class="line">public String testCookieValue( @CookieValue ( &quot;hello&quot; ) String cookieValue, @CookieValue String hello) &#123;</span><br><span class="line"> //do something</span><br><span class="line">   return &quot;cookieValue&quot; ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-RequestHeader注解绑定HttpServletRequest头信息到Controller方法参数"><a href="#使用-RequestHeader注解绑定HttpServletRequest头信息到Controller方法参数" class="headerlink" title="使用@RequestHeader注解绑定HttpServletRequest头信息到Controller方法参数"></a>使用<code>@RequestHeader</code>注解绑定HttpServletRequest头信息到Controller方法参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping ( &quot;testRequestHeader&quot; )</span><br><span class="line">public String testRequestHeader( @RequestHeader ( &quot;Host&quot; ) String hostAddr, @RequestHeader String Host, @RequestHeader String host ) &#123;</span><br><span class="line">   //use Host... do something</span><br><span class="line">    return &quot;requestHeader&quot; ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RequestMapping的一些高级应用"><a href="#RequestMapping的一些高级应用" class="headerlink" title="@RequestMapping的一些高级应用"></a><code>@RequestMapping</code>的一些高级应用</h4><ul><li>RequestMapping除了指定的路径value值之外，还有其他的一些属性，如：params，method，headers等,便于缩小映射范围</li><li><p><code>params</code>属性：</p><ul><li>例子说明：代码中定义了映射的路径，params的三个参数，当映射路径<code>/testParams.do</code>并且满足params的规则(param1等于value1，param2必须存在，值无所谓，param3必须不存在)，才能正确映射到testParams()方法. 即：<code>/testParams.do?param2=value&amp;param2=value2</code>才能访问指定方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping (value= &quot;testParams&quot; , params=&#123; &quot;param1=value1&quot; , &quot;param2&quot; , &quot;!param3&quot; &#125;)  </span><br><span class="line">public String testParams() &#123;  </span><br><span class="line">   System. out .println( &quot;test Params...........&quot; );  </span><br><span class="line">   return &quot;testParams&quot; ;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>method属性:主要用于限制能访问的方法类型(GET,POST,DELETE…)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping (value= &quot;testMethod&quot; , method=&#123;RequestMethod. GET , RequestMethod. DELETE &#125;)  </span><br><span class="line">public String testMethod() &#123;  </span><br><span class="line">   return &quot;method&quot; ;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>headers</code>属性</p><ul><li>headers 属性的用法和功能与params 属性相似。在上面的代码中当请求/testHeaders.do 的时候只有当请求头包含Accept 信息，且请求的host 为localhost 的时候才能正确的访问到testHeaders 方法。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping (value= &quot;testHeaders&quot; , headers=&#123; &quot;host=localhost&quot; , &quot;Accept&quot; &#125;)  </span><br><span class="line">public String testHeaders() &#123;  </span><br><span class="line">   return &quot;headers&quot; ;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="以-RequestMapping-标记的处理器方法支持的方法参数和返回类型"><a href="#以-RequestMapping-标记的处理器方法支持的方法参数和返回类型" class="headerlink" title="以 @RequestMapping 标记的处理器方法支持的方法参数和返回类型"></a>以 @RequestMapping 标记的处理器方法支持的方法参数和返回类型</h4><ul><li>支持的方法参数类型<ul><li>HttpServlet对象：HttpServletRequest、HttpServletResponse、HttpSession</li><li>Spring自己的WebRequest对象</li><li>InputStream、OutputStream、read、write</li><li>使用 @pathVariable @RequestParam @CookieValue @RequestHeader 标记的参数</li><li>使用 @ModelAttribute 标记的参数</li><li>java.util.Map 、Spring 封装的Model 和ModelMap：用来展现视图</li><li>实体类</li><li>Spring封装的MutipartFile,用来上传文件</li><li>Spring 封装的Errors 和BindingResult 对象</li></ul></li><li>支持的返回类型<ul><li>一个包含模型和视图的ModelAndView 对象</li><li>一个模型对象，这主要包括Spring 封装好的Model 和ModelMap ，以及java.util.Map ，当没有视图返回的时候视图名称将由RequestToViewNameTranslator 来决定</li><li>一个View 对象。这个时候如果在渲染视图的过程中模型的话就可以给处理器方法定义一个模型参数，然后在方法体里面往模型中添加值</li><li>一个String字符串、返回JSON对象(主要是Restful风格，前后端通信)</li><li>返回值是void：主要方法体接受传值，执行相关逻辑，返回值可以忽略</li><li>如果处理器方法被注解@ResponseBody 标记的话，那么处理器方法的任何返回类型都会通过HttpMessageConverters 转换之后写到HttpServletResponse 中，而不会像上面的那些情况一样当做视图或者模型来处理</li><li>除以上几种情况之外的其他任何返回类型都会被当做模型中的一个属性来处理，而返回的视图还是由RequestToViewNameTranslator 来决定，添加到模型中的属性名称可以在该方法上用@ModelAttribute(“attributeName”) 来定义，否则将使用返回类型的类名称的首字母小写形式来表示。使用@ModelAttribute 标记的方法会在@RequestMapping 标记的方法执行之前执行<h4 id="使用-ModelAttribute-和-SessionAttributes-传递和保存数据"><a href="#使用-ModelAttribute-和-SessionAttributes-传递和保存数据" class="headerlink" title="使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据"></a>使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据</h4></li></ul></li><li>@ModelAttribute标记一般放在需要标记的上面，并指定相关值，当@RequestMapping调用属性参数获取的时候执行</li><li>@SessionAttribute 标记一般放在@RequestMapping注解的下面，类名的上面。被@SessionAttribute标记的参数的数值需要被添加到Session中之后，在读取出来之后才有内容；当然，添加的标记的参数类型可以是字符串，数组，实体对象等</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AngularJS 核心特性</title>
      <link href="/archives/5b142d5f.html"/>
      <url>/archives/5b142d5f.html</url>
      
        <content type="html"><![CDATA[<ul><li>MVC : Model - View - Controller<ul><li>切分代码职责</li><li>更好的复用代码</li><li>便于模块化管理</li><li>终极目标：实现模块化，复用</li></ul></li><li>模块化Module：一起都是从模块开始，其他都是在module的基础上调用</li><li><p>指令系统 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">angular.module(&quot;mymodule&quot;,[]).directive(&quot;hello&quot;,function()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">restrict: &quot;E&quot;,</span><br><span class="line">template: &apos;&lt;div&gt;Hi everyone&lt;/div&gt;&apos;</span><br><span class="line">replace: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>双向数据绑定</p><ul><li>单向数据绑定：先定义好模板跟数据结合，通过数据绑定机制，将模板跟数据生成一段html标签，再把生成的HTML标签加入到文档流中，但是当数据变化的时候，再去改变view页面的数据，复杂度高；并且view中的数据变换(输入)的时候，无法将改变传回来给model数据<br><img src="http://qvm.lays3721.top/%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A.png" alt="单向数据绑定"></li><li>双向数据绑定：view中的数据变化的时候，数据模型发生变化，当model中的数据发生变化的时候，其中改变能直接反馈给view页面<br><img src="http://qvm.lays3721.top/%E5%8F%8C%E5%90%91.png" alt="双向数据绑定"></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Angular JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-MVC请求处理工作流程</title>
      <link href="/archives/5a644a79.html"/>
      <url>/archives/5a644a79.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Spring Web MVC框架提供了model-view-controller 的体系结构，可以用来开发灵活的，借助spring的AOP特性，实现松耦合的Web应用程序组件；</li><li>MVC模式导致了应用程序不同方面的分离(输入业务、逻辑业务和UI逻辑)，同时提供了这些元素之间的松散耦合<ul><li>Model：封装应用程序数据，并且通常由POJO组成</li><li>View: 主要用于呈现模型数据，并且由它生成客户端浏览器能够解析的HTML输出</li><li>Controller：主要用于处理客户请求，并且构建合适的模型，并传递给视图呈现</li></ul></li></ul><h2 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h2><ul><li>Spring MVC框架中，DispatcherServlet用来处理所有的HTTP请求和响应<h4 id="工作流程如下："><a href="#工作流程如下：" class="headerlink" title="工作流程如下："></a>工作流程如下：</h4><img src="http://qvm.lays3721.top/mvc1.png" alt="DispatcherServlet"><h4 id="当请求触发的时候…"><a href="#当请求触发的时候…" class="headerlink" title="当请求触发的时候…"></a>当请求触发的时候…</h4></li><li>收到一个HTTP请求之后，DispatcherServlet根据HandlerMapping来选择并且调用适当的控制器</li><li>控制器接受请求，并基于使用GET或者POST方法来调用适当的Service方法。Service方法将设置基于定义业务逻辑的数据模型，并返回视图名称到DispatcherServlet中</li><li>DispatcherServlet在ViewResolver的协助下，检索获取指定的视图</li><li>当视图确定之后，DispatcherServlet把模型数据传递给视图，最后在浏览器中呈现<h2 id="部分配置以及代码说明"><a href="#部分配置以及代码说明" class="headerlink" title="部分配置以及代码说明"></a>部分配置以及代码说明</h2></li><li><p>初始化DispatcherServlet,导入Servlet-Name的应用配置文件<code>{servlet-name}-servlet.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">      &lt;servlet-name&gt;HelloWeb&lt;/servlet-name&gt;</span><br><span class="line">      &lt;servlet-class&gt;</span><br><span class="line">         org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">      &lt;/servlet-class&gt;</span><br><span class="line">      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">   &lt;/servlet&gt;</span><br></pre></td></tr></table></figure></li><li><p>定义处理的URL类型(对应servlet-name)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">      &lt;servlet-name&gt;HelloWeb&lt;/servlet-name&gt;</span><br><span class="line">      &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></li><li><p>定义视图解决方案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;</span><br><span class="line">      &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;//收到DispatcherServlet返回的视图名称之后，显示`[viewName].jsp`文件</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>定义控制器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/hello&quot;)  //url路径</span><br><span class="line">public class HelloController&#123;</span><br><span class="line">   @RequestMapping(method = RequestMethod.GET) //使用GET方法</span><br><span class="line">   public String printHello(ModelMap model) &#123;</span><br><span class="line">      model.addAttribute(&quot;message&quot;, &quot;Hello Spring MVC Framework!&quot;); //绑定Message属性的值，并传递给DispatcherServlet</span><br><span class="line">      return &quot;viewName&quot;;  //返回给DispatcherServlet的视图名称</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>视图,下例是一个jsp文件的部分代码，message是在控制器内部设置的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">   &lt;title&gt;Hello Spring MVC&lt;/title&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">   &lt;h2&gt;$&#123;message&#125;&lt;/h2&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul><li>目前流行的Restful风格的设计，可以借助Spring-MVC实现，更好的实现前后端分离，控制器之间通过DispatcherServlet，给View页面传递一组 JSON 或者是 XML 等形式的数据，view接受到数据之后，通过Angular JS /reaact等其他一些Javascript的一些单页框架，处理后端传过来的数据，并显示出来.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular JS 基础笔记</title>
      <link href="/archives/897c0a7c.html"/>
      <url>/archives/897c0a7c.html</url>
      
        <content type="html"><![CDATA[<h2 id="AngularJS-开发"><a href="#AngularJS-开发" class="headerlink" title="AngularJS 开发"></a>AngularJS 开发</h2><ul><li>使得开发现代的单一页面应用程序（SPAs：Single Page Applications）变得更加容易。</li><li>Angular JS 把应用程序数据绑定到HTML元素</li><li>Angular JS 可以克隆和重复HTML元素</li><li>Angular JS 可以隐藏/显示HTML元素</li><li>Angular JS 可以在元素背后添加代码</li><li>Angular JS 支持输入验证</li></ul><h2 id="scope-作用域"><a href="#scope-作用域" class="headerlink" title="$scope 作用域"></a>$scope 作用域</h2><ul><li>$scope 对象当作一个参数传递</li><li>带有属性和方法，这些属性和方法可以在视图和控制器中使用</li><li>根作用域<code>$rootScope</code>: 可作用于整个应用中。是各个 controller 中 scope 的桥梁。用 rootscope 定义的值，可以在各个 controller 中使用。</li></ul><h2 id="Angular-JS-服务"><a href="#Angular-JS-服务" class="headerlink" title="Angular JS 服务"></a>Angular JS 服务</h2><ul><li>$location : 返回当前页面的 URL 地址 ($location.absUrl();)</li><li><p>$http :(例子)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app = angular.module(&apos;myApp&apos;, []);</span><br><span class="line">app.controller(&apos;myCtrl&apos;, function($scope, $http) &#123;</span><br><span class="line">    $http.get(&quot;welcome.htm&quot;).then(function (response) &#123;</span><br><span class="line">        $scope.myWelcome = response.data;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>$timeout 访问在规定的毫秒数后执行指定函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$timeout(function () &#123;</span><br><span class="line">      $scope.myHeader = &quot;How are you today?&quot;;</span><br><span class="line">  &#125;, 2000);</span><br></pre></td></tr></table></figure></li><li><p>$interval 访问在指定的周期(以毫秒计)来调用函数或计算表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$interval(function () &#123;</span><br><span class="line">     $scope.theTime = new Date().toLocaleTimeString();</span><br><span class="line"> &#125;, 1000);</span><br></pre></td></tr></table></figure></li><li><p>创建自定义服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.service(&apos;hexafy&apos;, function() &#123;</span><br><span class="line">    this.myFunc = function (x) &#123;</span><br><span class="line">        return x.toString(16);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用自定义服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.controller(&apos;myCtrl&apos;, function($scope, hexafy) &#123;</span><br><span class="line">    $scope.hex = hexafy.myFunc(255);</span><br><span class="line">&#125;); //不加`$`区分自带和自定义服务</span><br></pre></td></tr></table></figure></li></ul><h2 id="Angular-JS-指令"><a href="#Angular-JS-指令" class="headerlink" title="Angular JS 指令"></a>Angular JS 指令</h2><ul><li>ng-app 指令初始化一个AngularJS应用程序</li><li>ng-init 初始化一个应用程序数据</li><li>ng-model 把元素值(比如输入域的值)绑定到应用程序中</li><li><p>ng-repeat 指令会重复一个HTML元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-app=&quot;&quot; ng-init=&quot;names=[&apos;Jani&apos;,&apos;Hege&apos;,&apos;dasd&apos;];in=100&quot;&gt;</span><br><span class="line">  &lt;p&gt;使用 ng-repeat 来循环数组&lt;/p&gt;</span><br><span class="line">&lt;input type=number ng-model=&quot;in&quot; &gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li ng-repeat=&quot;x in names&quot;&gt;</span><br><span class="line">      &#123;&#123; x &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;li&gt;&#123;&#123;in&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>ng-disabled : 直接绑定应用程序数据到HTML的disabled属性 ; 当 标记记作 <code>true</code> 被标记的元素失效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button ng-disabled=&quot;mySwitch&quot;&gt;点我!&lt;/button&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; ng-model=&quot;mySwitch&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>ng-show : 被标记元素标记为true时，改元素可见</p></li><li>ng-hide :  true —&gt; 不可见</li></ul><h2 id="Angular-JS-事件"><a href="#Angular-JS-事件" class="headerlink" title="Angular JS 事件"></a>Angular JS 事件</h2><ul><li>ng-click : 定义ng的点击触发事件</li></ul><hr><h2 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Angular JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hibernate实现原理与思考</title>
      <link href="/archives/7ae62b4c.html"/>
      <url>/archives/7ae62b4c.html</url>
      
        <content type="html"><![CDATA[<h4 id="hibernate概述-参考Wikipedia"><a href="#hibernate概述-参考Wikipedia" class="headerlink" title="hibernate概述(参考Wikipedia)"></a>hibernate概述(参考<a href="https://zh.wikipedia.org/wiki/Hibernate" target="_blank" rel="noopener">Wikipedia</a>)</h4><ul><li>hibernate是一种Java语言下对象关系映射(ORM)解决方案；</li><li>设计目标是将软件开发人员从大量相同的数据持久层相关编程工作中解放出来</li><li>hibernate可以想象成为一个中间组件；当Java通过SQL连接数据库的时候，hibernate负责将java程序的SQL语句接受过来发送带数据库处理，而数据库返回的数据，hibernate接受之后直接生成对象的形式传递给Java程序</li></ul><hr><h4 id="以一次数据库操作为例，分析hibernate实现原理"><a href="#以一次数据库操作为例，分析hibernate实现原理" class="headerlink" title="以一次数据库操作为例，分析hibernate实现原理."></a>以一次数据库操作为例，分析hibernate实现原理.</h4><ul><li>当SQL语句能正常执行：<code>select * from user;</code></li><li>项目启动时候，hibernate配置文件(<code>*.cfg.xml</code> &amp; <code>user.hbm.xml</code>) 中的内容已经配置好在容器中，存储着实体类(<code>User</code>)与表的对应关系</li><li>执行hql语句的时候，hibernate会根据反射机制先找到User的全路径名称，进而找到容器中User对应的配置</li><li>由于对象的实体属性与表中的属性一一对应，hibernate会将HQL语句，根据不同的数据库方言解析为SQL语句，并在数据库中执行语句</li></ul><hr><h4 id="总的来说："><a href="#总的来说：" class="headerlink" title="总的来说："></a>总的来说：</h4><ul><li>hibernate是将实体类中的字段按照<code>*.hbm.xml</code>配置文件或者是annotation的注释标记来解析一条或者多条sql语句，然后放在数据库中执行</li></ul><ol><li>通过<code>configuration().configure();</code>读取并解析hibernate.cfg.xml配置文件</li><li>执行完<code>hibernate.cfg.xml</code>的基本数据库映射配置之后，再通过配置文件中的 mapping 标记，解析并读取映射信息</li><li><code>config.biuldSessionFactory();</code>创建SessionFactory;</li><li><code>SessionFactory.open();</code> 打开Session</li><li><code>session.beginTransaction();</code>创建事务</li><li>persistent operate 持久化操作</li><li><code>session.getTransaction().commit();</code>提交事务</li><li><code>session.getTransaction.rollback();</code>事务提交出错的时候，回滚事务</li><li><code>session.close();</code>关闭事务</li><li><code>SessionFactory.close();</code></li></ol><ul><li>这就是hibernate的原理(也可以叫流程)：基于一个ORM的主流持久化框架，对JDBC访问数据库代买进行了封装</li></ul><hr><p>####思考：</p><ul><li>昨天去了某厂面试，当面试官问我hibernate知不知道hibernate底层原理的时候,我说了不了解….</li><li>因为在这个问题之前我就是已经简单的描述了hibernate的流程，当我听到底层原理的时候，及懵逼了，用了hibernate这么久，还真好像没看到过hibernate的底层原理的描述…</li><li>回来查了一下,其实就是详细的描述hibernate流程…</li><li>面试的时候，由于是第一次面试，紧张！还没适应面试的过程是怎么样的，应聘者应该如果主动的跟面试官沟通，如果将自己的能力以及个性给面试官展现出来…</li><li>又是一次新鲜的经历，在各种经历中成长 @.@</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql管理用户操作(创建用户，删除用户，修改用户密码，权限分配以及相关授权)</title>
      <link href="/archives/8314bbf6.html"/>
      <url>/archives/8314bbf6.html</url>
      
        <content type="html"><![CDATA[<h4 id="创建mysql用户"><a href="#创建mysql用户" class="headerlink" title="创建mysql用户"></a>创建mysql用户</h4><ul><li>创建用户设定密码：<br><code>create user &#39;username&#39; identified by &#39;password&#39;;</code></li><li>创建用户，密码，并绑定登陆IP(ip:%表示所有IP，也可以限制为网段[231.23.2.%])<br><code>create user &#39;username&#39;@&#39;ip&#39; identified by &#39;password&#39;</code></li><li>使操作生效：<code>flush privileges</code></li></ul><h4 id="为用户授权"><a href="#为用户授权" class="headerlink" title="为用户授权"></a>为用户授权</h4><ul><li>将用户所有的权限绑定到某个数据库：<br><code>grant all privileges on basename(*).tablename(*) to username@localhost</code></li><li>或者只授予用户指定的权限：<code>insert</code> <code>delete</code> <code>update</code> <code>select</code>…<br><code>grant insert,select,update,delete on *.* to user@localhost</code></li></ul><h4 id="撤销用户权限"><a href="#撤销用户权限" class="headerlink" title="撤销用户权限"></a>撤销用户权限</h4><ul><li>格式：<code>revoke 权限 on 库名.表名 from 用户名@用户地址;</code></li></ul><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><ul><li><p>直接删除用户：<code>drop user</code>(将用户信息全部删除)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;drop user test1@&apos;%&apos;;</span><br><span class="line">&gt;flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>删除用户：<code>delete from user</code>(只会清除对应user创建的表)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;use mysql;</span><br><span class="line">&gt;delete from user where user=test1 and host=&apos;%&apos;;</span><br><span class="line">&gt;flush privileges;</span><br></pre></td></tr></table></figure></li></ul><h4 id="修改指定用户的密码-也就是更新mysql库下user的表"><a href="#修改指定用户的密码-也就是更新mysql库下user的表" class="headerlink" title="修改指定用户的密码(也就是更新mysql库下user的表)"></a>修改指定用户的密码(也就是更新mysql库下user的表)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;update mysql.user set password=password(&apos;新密码&apos;) where  user=&quot;test2&quot; and host=&quot;%&quot;;</span><br><span class="line">&gt;&gt;flush privilieges;</span><br></pre></td></tr></table></figure><h4 id="远程登陆"><a href="#远程登陆" class="headerlink" title="远程登陆"></a>远程登陆</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;mysql -h &apos;ip&apos; -u &apos;username&apos; -p &apos;ip&apos;  ##个人习惯enter之后输密文password</span><br></pre></td></tr></table></figure><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><ul><li>mysql库下面有几个表，研究清楚了，也就更加了解了mysql的基本操作了</li><li>还有就是，新版本的mysql数据库自动为你创建了几个常用的库跟表，比如’country’等….(然而我很少用)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate出现Caused by: java.sql.SQLException: Field &#39;id&#39; doesn&#39;t have a default value的解决方法</title>
      <link href="/archives/faff5c20.html"/>
      <url>/archives/faff5c20.html</url>
      
        <content type="html"><![CDATA[<h3 id="原因：设计Mysql的id的时候，id使用主键策略，但是没有设置自动生成造成"><a href="#原因：设计Mysql的id的时候，id使用主键策略，但是没有设置自动生成造成" class="headerlink" title="原因：设计Mysql的id的时候，id使用主键策略，但是没有设置自动生成造成"></a>原因：设计Mysql的id的时候，id使用主键策略，但是没有设置自动生成造成</h3><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><ul><li>取消主键策略(下下策)；</li><li>更改结构语句：为主键id添加<code>auto_increment</code>属性；也就是更改表结构</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Maven 打包时 缺失properties和xml后缀的文件</title>
      <link href="/archives/f8defb4e.html"/>
      <url>/archives/f8defb4e.html</url>
      
        <content type="html"><![CDATA[<ul><li>背景<ul><li>Intellij IDEA 14.1.5</li><li>Maven 项目</li></ul></li><li>问题<h3 id="打包Maven项目的时候，报错"><a href="#打包Maven项目的时候，报错" class="headerlink" title="打包Maven项目的时候，报错"></a>打包Maven项目的时候，报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log4j:WARN No appenders could be found for logger (logmain).</span><br><span class="line">log4j:WARN Please initialize the log4j system properly.</span><br><span class="line">log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</span><br></pre></td></tr></table></figure></li></ul><h3 id="但是我的目录下有log4j-properties配置文件"><a href="#但是我的目录下有log4j-properties配置文件" class="headerlink" title="但是我的目录下有log4j.properties配置文件"></a>但是我的目录下有<code>log4j.properties</code>配置文件</h3><h3 id="展开才发现：输出的类没有’log4j-properties’配置文件"><a href="#展开才发现：输出的类没有’log4j-properties’配置文件" class="headerlink" title="展开才发现：输出的类没有’log4j.properties’配置文件"></a>展开才发现：输出的类没有’log4j.properties’配置文件</h3><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>在pom中添加resources配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>Maven的生命周期：</li></ul><table><thead><tr><th>生命周期阶段</th><th>目标</th></tr></thead><tbody><tr><td>process-resources</td><td>resources:resources</td></tr><tr><td>compile</td><td>compile:compile</td></tr><tr><td>process-test-resources</td><td>resources:testResource</td></tr><tr><td>test-compile</td><td>compile:testCompile</td></tr><tr><td>test</td><td>surefire:test</td></tr><tr><td>package</td><td>war:war</td></tr><tr><td>install</td><td>install:install</td></tr><tr><td>deploy</td><td>deploy:deploy</td></tr></tbody></table><ul><li><p>经测试</p><ol><li>当pom中不增加resources配置时，<br>执行process-resources，class文件夹下只包含src/main/resources下的文件<br>执行compile，class文件夹下包含src/main/resources下的文件与src/main/java下的<em>.class文件，丢失src/main/java下的</em>.properties文件</li><li>当pom中增加resources配置时<br>执行process-resources，class文件夹下只包含src/main/resources下的文件与src/main/java下的<em>.properties文件<br>执行compile，class文件夹下包含src/main/resources下的文件与src/main/java下的</em>.class文件与*.properties文件</li></ol></li></ul><h3 id="同样，对于maven项目加载不出来xml文件的情况，解决方法类似"><a href="#同样，对于maven项目加载不出来xml文件的情况，解决方法类似" class="headerlink" title="同样，对于maven项目加载不出来xml文件的情况，解决方法类似"></a>同样，对于maven项目加载不出来<code>xml</code>文件的情况，解决方法类似</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无法连接远程Mysql数据库的解决办法 I</title>
      <link href="/archives/b4e8978.html"/>
      <url>/archives/b4e8978.html</url>
      
        <content type="html"><![CDATA[<h2 id="tips-“Can-not-connet-to-mysql-server-on-‘192-168-2-3’-10061-”"><a href="#tips-“Can-not-connet-to-mysql-server-on-‘192-168-2-3’-10061-”" class="headerlink" title="tips: “Can not connet to mysql  server on ‘192.168.2.3’ (10061)”"></a>tips: “Can not connet to mysql  server on ‘192.168.2.3’ (10061)”</h2><ul><li><p>很多时候想要远程登陆Mysql服务器，进行操作，发现弹出上面的提示…</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ul><li>可能没有启动Mysql服务：<code>/etc/init.d/mysql start</code> 启动服务</li><li><p>查看配置文件 <code>/etc/mysql/my.cnf</code> 文件中绑定的ip地址是否为默认ip(127.0.0.1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu: vim /etc/mysql/my.cnf</span><br><span class="line">root@ubuntu:                      #修改my.cnf的文件里面的配置</span><br><span class="line">修改 bind-adress = 127.0.0.1</span><br><span class="line">为 bind-adress = 服务器IP</span><br><span class="line">#这种情况最显著的现象是：远程登陆不上Mysql服务器，但是服务器本地能登陆进去mysql程序</span><br></pre></td></tr></table></figure></li><li><p>检查或者重置my.ini配置文件是否正确</p></li><li>Mysql服务器连接池已满，重新释放一下连接池，这时候你要重新评估你的连接数或者检测是否有恶意访问攻击什么的</li></ul></li></ul><hr><p>  如果找partner，要物色好可靠的人选；不然，两人的价值观不一样，做事情的效率跟质量都不一样。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> TakeDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java垃圾回收之finalize()</title>
      <link href="/archives/db1953ee.html"/>
      <url>/archives/db1953ee.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java垃圾回收"><a href="#Java垃圾回收" class="headerlink" title="Java垃圾回收"></a>Java垃圾回收</h2><ul><li>Java垃圾回收器负责回收无用对象占据的内存资源</li><li>但是，无论是“垃圾回收”或者“终结”，JVM都不保证会发生，因为JVM在没有面临内存耗尽的情况下，它是不会浪费时间去执行垃圾回收以恢复内存</li><li>JVM不会主动去发现一些无用特殊的内存区块，并清除它，所以引入<code>finalize()</code>方法</li></ul><h2 id="finalize-用法"><a href="#finalize-用法" class="headerlink" title="finalize()用法"></a><code>finalize()</code>用法</h2><ul><li>对象可能不被垃圾回收</li><li>垃圾回收并不等于“析构”</li><li>垃圾回收只与内存有关</li></ul><h5 id="finalize-工作原理"><a href="#finalize-工作原理" class="headerlink" title="finalize()工作原理"></a><code>finalize()</code>工作原理</h5><ul><li>一旦垃圾回收器准备好释放对象占用的存储空间，将首先调用<code>finalize()</code>方法，并且在下一次垃圾回收动作发生时，才会真正回收对象占用的内存</li></ul><h4 id="下面一个例子示范finalize-可能的使用方式-终结条件"><a href="#下面一个例子示范finalize-可能的使用方式-终结条件" class="headerlink" title="下面一个例子示范finalize()可能的使用方式(终结条件)"></a>下面一个例子示范<code>finalize()</code>可能的使用方式(终结条件)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Book&#123;</span><br><span class="line">  boolean checkedOut = false;</span><br><span class="line">  Book(boolean checkOut)&#123;</span><br><span class="line">    checkedOut = checkOut;</span><br><span class="line">  &#125;</span><br><span class="line">  void chechIn()&#123;</span><br><span class="line">    checkedOut = false;</span><br><span class="line">  &#125;</span><br><span class="line">  protected void finalize()&#123;</span><br><span class="line">    if(checkedOut)&#123;</span><br><span class="line">      System.out.print(&quot;error:check out&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Terminal&#123;</span><br><span class="line">  public static void main(String[] args)&#123;</span><br><span class="line">    Book novel = new Book(true);</span><br><span class="line">    novel.chechIn();</span><br><span class="line">    new Book(true);</span><br><span class="line">    System.gc();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">*output:</span><br><span class="line">*error:check out</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h6 id="本例的终结条件：所有的Book对象在被当作垃圾回收前都应该被签入-chechIn-但是main-方法中，有一本书没被签入，所以如果没有finalize-来验证终结条件，那么这个缺陷很难被发现"><a href="#本例的终结条件：所有的Book对象在被当作垃圾回收前都应该被签入-chechIn-但是main-方法中，有一本书没被签入，所以如果没有finalize-来验证终结条件，那么这个缺陷很难被发现" class="headerlink" title="本例的终结条件：所有的Book对象在被当作垃圾回收前都应该被签入(chechIn);但是main()方法中，有一本书没被签入，所以如果没有finalize()来验证终结条件，那么这个缺陷很难被发现."></a>本例的终结条件：所有的Book对象在被当作垃圾回收前都应该被签入(chechIn);但是<code>main()</code>方法中，有一本书没被签入，所以如果没有<code>finalize()</code>来验证终结条件，那么这个缺陷很难被发现.</h6>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java常识之构造器</title>
      <link href="/archives/57584ce4.html"/>
      <url>/archives/57584ce4.html</url>
      
        <content type="html"><![CDATA[<h2 id="构造器确保初始化"><a href="#构造器确保初始化" class="headerlink" title="构造器确保初始化"></a>构造器确保初始化</h2><ul><li>创建对象时，会为对象分配存储空间，并调用相应的构造器，这样就确保了你操作对象之前，它已经被初始化；</li><li>如果类中没有定义构造器，编译器会自动帮你创建一个默认构造器，当你定义了构造器，就不能使用默认构造器;</li><li>要求构造器的名字与类名一致，可以有多个构造器，但是每个构造器要有区分(有参数\无参数\参数顺序\参数类型)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Rock&#123;</span><br><span class="line">  Rock()&#123;</span><br><span class="line">    System.out.print(&quot;Constructor Initialize&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  public static void main(String[] args)&#123;</span><br><span class="line">    for(int i = 0; i &lt; 5 ; i++ )&#123;</span><br><span class="line">      new Rock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ul><li>一个类中，可以有相同的命名的方法，但是这些方法需要有区分</li><li>区分重载方法：<ul><li>是否有参数;</li><li>参数的顺序;</li><li>参数的类型;<ul><li>当传入的实际参数小于重载方法声明的形式参数时，实际数据类型就会被提升，而实际参数是char型，如果无法找到插好接受char参数的方法，就会把char型提升到int型;</li><li>当传入的实际参数大于重载方法声明的形式参数时，实际参数需要进行类型转换来窄化转换，否则会报错;</li></ul></li></ul></li></ul><h5 id="Best-Wish-Happy-Mathors-Day-To-My-Mon"><a href="#Best-Wish-Happy-Mathors-Day-To-My-Mon" class="headerlink" title="Best Wish : Happy Mathors Day! To My Mon ."></a>Best Wish : Happy Mathors Day! To My Mon .</h5>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Github创建静态网站预览的方法</title>
      <link href="/archives/a9d721e9.html"/>
      <url>/archives/a9d721e9.html</url>
      
        <content type="html"><![CDATA[<ul><li>前段时间参加了百度前端学院的前端学习，想着不用把别人前端页面代码下载下来就能预览的话，就方便多了，既能看代码，又能看到效果，还可以用chrome调试</li></ul><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ul><li>方法一：通过第三方开源项目预览<ul><li>访问<code>http://htmlpreview.github.io/</code><a href="http://htmlpreview.github.io/" target="_blank" rel="noopener">enter link description here</a> 填写你要预览的页面地址，Enter–&gt;Get</li><li>得到这样格式的访问连接：<code>http://htmlpreview.github.io/?https://github.com/liangqian/ifeFPGetting/blob/master/Part1/task_01_01_01.html</code> 也就是 ：<code>http://htmlpreview.github.io/?</code>+目标预览页面地址</li></ul></li><li>方法二：创建gh-pages分支进行预览<ul><li>创建gh-pages分支进行预览，创建分支之后，访问<code>http://你的Github名.github.io/</code>+页面地址<br>例如：liangqian.github.io/preview/test.html</li><li>这是官方的推荐方法 <a href="https://help.github.com/articles/creating-project-pages-manually/" target="_blank" rel="noopener">enter link description here</a></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> TakeDown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
